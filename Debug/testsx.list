
testsx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d70  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006f50  08006f50  00016f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b4  080073b4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073bc  080073bc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073bc  080073bc  000173bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073c0  080073c0  000173c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  080073c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200001d4  08007598  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08007598  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aafc  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002355  00000000  00000000  0002ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002dc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c22e  00000000  00000000  0002e6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a717  00000000  00000000  0004a90e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f93  00000000  00000000  00055025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebfb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  000ec008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006f38 	.word	0x08006f38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08006f38 	.word	0x08006f38

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d101      	bne.n	8000f14 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000f10:	2301      	movs	r3, #1
 8000f12:	e000      	b.n	8000f16 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	2b80      	cmp	r3, #128	; 0x80
 8000f34:	d101      	bne.n	8000f3a <LL_SPI_IsActiveFlag_BSY+0x18>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	330c      	adds	r3, #12
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	330c      	adds	r3, #12
 8000fac:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	78fa      	ldrb	r2, [r7, #3]
 8000fb2:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d101      	bne.n	8000fdc <LL_GPIO_IsInputPinSet+0x1c>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e000      	b.n	8000fde <LL_GPIO_IsInputPinSet+0x1e>
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <spi_write_8>:
static void spi_write_8(uint8_t data);
static uint8_t spi_read_8(uint8_t data);


static void spi_write_8(uint8_t data)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	while (!(LL_SPI_IsActiveFlag_TXE(SPI_HANDLER))){} 	/* Wait for Tx buffer to empty */
 800102e:	bf00      	nop
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <spi_write_8+0x40>)
 8001032:	f7ff ff63 	bl	8000efc <LL_SPI_IsActiveFlag_TXE>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f9      	beq.n	8001030 <spi_write_8+0xc>
		LL_SPI_TransmitData8(SPI_HANDLER, data);
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4619      	mov	r1, r3
 8001040:	4808      	ldr	r0, [pc, #32]	; (8001064 <spi_write_8+0x40>)
 8001042:	f7ff ffab 	bl	8000f9c <LL_SPI_TransmitData8>
	while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY)
 8001046:	e002      	b.n	800104e <spi_write_8+0x2a>
	{
		LL_SPI_ReceiveData8(SPI_HANDLER); 				/* Clear received data */
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <spi_write_8+0x40>)
 800104a:	f7ff ff99 	bl	8000f80 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <spi_write_8+0x40>)
 8001050:	f7ff ff7a 	bl	8000f48 <LL_SPI_GetRxFIFOLevel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f6      	bne.n	8001048 <spi_write_8+0x24>
	}
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40003c00 	.word	0x40003c00

08001068 <spi_read_8>:


static uint8_t spi_read_8(uint8_t reg_address)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
	spi_write_8(reg_address);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffd3 	bl	8001024 <spi_write_8>
	while (!(LL_SPI_IsActiveFlag_TXE(SPI_HANDLER))){}
 800107e:	bf00      	nop
 8001080:	4814      	ldr	r0, [pc, #80]	; (80010d4 <spi_read_8+0x6c>)
 8001082:	f7ff ff3b 	bl	8000efc <LL_SPI_IsActiveFlag_TXE>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f9      	beq.n	8001080 <spi_read_8+0x18>
	LL_SPI_TransmitData8(SPI_HANDLER, 0xFF); 	/* send dummy byte to
 800108c:	21ff      	movs	r1, #255	; 0xff
 800108e:	4811      	ldr	r0, [pc, #68]	; (80010d4 <spi_read_8+0x6c>)
 8001090:	f7ff ff84 	bl	8000f9c <LL_SPI_TransmitData8>
											 	 generate clock signal and read data from register */

	while (LL_SPI_GetTxFIFOLevel(SPI_HANDLER) != LL_SPI_TX_FIFO_EMPTY){}; /* Wait for  */
 8001094:	bf00      	nop
 8001096:	480f      	ldr	r0, [pc, #60]	; (80010d4 <spi_read_8+0x6c>)
 8001098:	f7ff ff64 	bl	8000f64 <LL_SPI_GetTxFIFOLevel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f9      	bne.n	8001096 <spi_read_8+0x2e>

	while (LL_SPI_IsActiveFlag_BSY(SPI_HANDLER) != 0);
 80010a2:	bf00      	nop
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <spi_read_8+0x6c>)
 80010a6:	f7ff ff3c 	bl	8000f22 <LL_SPI_IsActiveFlag_BSY>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f9      	bne.n	80010a4 <spi_read_8+0x3c>
	while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY) /* check busy flag */
 80010b0:	e004      	b.n	80010bc <spi_read_8+0x54>
		{
			temp = LL_SPI_ReceiveData8(SPI_HANDLER);
 80010b2:	4808      	ldr	r0, [pc, #32]	; (80010d4 <spi_read_8+0x6c>)
 80010b4:	f7ff ff64 	bl	8000f80 <LL_SPI_ReceiveData8>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
	while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY) /* check busy flag */
 80010bc:	4805      	ldr	r0, [pc, #20]	; (80010d4 <spi_read_8+0x6c>)
 80010be:	f7ff ff43 	bl	8000f48 <LL_SPI_GetRxFIFOLevel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d1f4      	bne.n	80010b2 <spi_read_8+0x4a>
		}
	return temp;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
	}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40003c00 	.word	0x40003c00

080010d8 <lora_write>:


void lora_write(uint8_t reg_addr, uint8_t reg_value)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	460a      	mov	r2, r1
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	71bb      	strb	r3, [r7, #6]
	NSS_PIN_LOW
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <lora_write+0x48>)
 80010ee:	f7ff ff8a 	bl	8001006 <LL_GPIO_ResetOutputPin>
	uint8_t write_addr = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
	write_addr = reg_addr | 0x80;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010fc:	73fb      	strb	r3, [r7, #15]
	spi_write_8(write_addr);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff8f 	bl	8001024 <spi_write_8>
	spi_write_8(reg_value);
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff8b 	bl	8001024 <spi_write_8>
	NSS_PIN_HIGH
 800110e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001112:	4803      	ldr	r0, [pc, #12]	; (8001120 <lora_write+0x48>)
 8001114:	f7ff ff69 	bl	8000fea <LL_GPIO_SetOutputPin>
}
 8001118:	bf00      	nop
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	48000800 	.word	0x48000800

08001124 <lora_read>:


uint8_t lora_read(uint8_t reg_addr)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	73bb      	strb	r3, [r7, #14]
	addr = reg_addr & 0x7F;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800113c:	73fb      	strb	r3, [r7, #15]
	NSS_PIN_LOW
 800113e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <lora_read+0x44>)
 8001144:	f7ff ff5f 	bl	8001006 <LL_GPIO_ResetOutputPin>
	temp = spi_read_8(addr);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff8c 	bl	8001068 <spi_read_8>
 8001150:	4603      	mov	r3, r0
 8001152:	73bb      	strb	r3, [r7, #14]
	NSS_PIN_HIGH
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <lora_read+0x44>)
 800115a:	f7ff ff46 	bl	8000fea <LL_GPIO_SetOutputPin>
	return temp;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000800 	.word	0x48000800

0800116c <lora_mode>:


void lora_mode(mode_e mode)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	/* mask 0xf8 */
	uint8_t read_value = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
	read_value = lora_read(ADDR_REGOPMODE);
 800117a:	2001      	movs	r0, #1
 800117c:	f7ff ffd2 	bl	8001124 <lora_read>
 8001180:	4603      	mov	r3, r0
 8001182:	73fb      	strb	r3, [r7, #15]
	read_value = read_value & 0xf8; /* set bit that you want to change to 0 */
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	f023 0307 	bic.w	r3, r3, #7
 800118a:	73fb      	strb	r3, [r7, #15]
	read_value = read_value | mode; /* add bits you want */
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4313      	orrs	r3, r2
 8001192:	73fb      	strb	r3, [r7, #15]
	lora_write(ADDR_REGOPMODE, read_value);
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	4619      	mov	r1, r3
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff ff9d 	bl	80010d8 <lora_write>
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <lora_set_bandwidth>:

void lora_set_bandwidth(bandwidth_e bandwidth)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
	uint8_t read_value = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
	read_value = lora_read(ADDR_REGMODEMCONFIG1);
 80011b4:	201d      	movs	r0, #29
 80011b6:	f7ff ffb5 	bl	8001124 <lora_read>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
	read_value = read_value & 0x0f;
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	73fb      	strb	r3, [r7, #15]
	read_value = read_value | bandwidth<<4;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	b25a      	sxtb	r2, r3
 80011cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b25b      	sxtb	r3, r3
 80011d4:	73fb      	strb	r3, [r7, #15]
	lora_write(ADDR_REGMODEMCONFIG1, read_value);
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	4619      	mov	r1, r3
 80011da:	201d      	movs	r0, #29
 80011dc:	f7ff ff7c 	bl	80010d8 <lora_write>
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <lora_set_spreading_factor>:
	read_value = read_value | coding_rate<<1;
	lora_write(ADDR_REGMODEMCONFIG1, read_value);
}

void lora_set_spreading_factor(spreading_factor_e SF)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
	uint8_t read_value = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
	read_value = lora_read(ADDR_REGMODEMCONFIG2);
 80011f6:	201e      	movs	r0, #30
 80011f8:	f7ff ff94 	bl	8001124 <lora_read>
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
	read_value = read_value & 0x0f;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	73fb      	strb	r3, [r7, #15]
	read_value = read_value | SF<<4;
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	b25a      	sxtb	r2, r3
 800120e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001212:	4313      	orrs	r3, r2
 8001214:	b25b      	sxtb	r3, r3
 8001216:	73fb      	strb	r3, [r7, #15]
	lora_write(ADDR_REGMODEMCONFIG2, read_value);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	4619      	mov	r1, r3
 800121c:	201e      	movs	r0, #30
 800121e:	f7ff ff5b 	bl	80010d8 <lora_write>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <lora_set_crc>:

void lora_set_crc(bool_e set_rest)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b084      	sub	sp, #16
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	71fb      	strb	r3, [r7, #7]
  uint8_t read_value = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  read_value = lora_read(ADDR_REGMODEMCONFIG2);
 8001238:	201e      	movs	r0, #30
 800123a:	f7ff ff73 	bl	8001124 <lora_read>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
  if(set_rest == SET_BIT)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d104      	bne.n	8001252 <lora_set_crc+0x28>
  {
    read_value = read_value | 0x04;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e003      	b.n	800125a <lora_set_crc+0x30>
  }
  else
  {
    read_value = read_value & 0xfb;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	73fb      	strb	r3, [r7, #15]
  }
  lora_write(ADDR_REGMODEMCONFIG2, read_value);
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	4619      	mov	r1, r3
 800125e:	201e      	movs	r0, #30
 8001260:	f7ff ff3a 	bl	80010d8 <lora_write>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <lora_set_pa_boost>:
 * BIT: 7
 * PA_BOOST: SET - Max Output Power limited to +20dBm
 * PA_BOOST: RESET - Max Output Power limited to +14dBm
 */
void lora_set_pa_boost(bool_e set_rest)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  uint8_t read_value = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
  read_value = lora_read(ADDR_REGPACONFIG);
 800127a:	2009      	movs	r0, #9
 800127c:	f7ff ff52 	bl	8001124 <lora_read>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
  if(set_rest == SET_BIT)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d104      	bne.n	8001294 <lora_set_pa_boost+0x28>
  {
    read_value = read_value | (1<<7);
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001290:	73fb      	strb	r3, [r7, #15]
 8001292:	e003      	b.n	800129c <lora_set_pa_boost+0x30>
  }
  else
  {
    read_value = read_value & ~(1<<7);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800129a:	73fb      	strb	r3, [r7, #15]
  }
  lora_write(ADDR_REGPACONFIG, read_value);
 800129c:	7bfb      	ldrb	r3, [r7, #15]
 800129e:	4619      	mov	r1, r3
 80012a0:	2009      	movs	r0, #9
 80012a2:	f7ff ff19 	bl	80010d8 <lora_write>
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <lora_set_max_output_power>:
 * BIT: 6-4
 * Set Max Output Power: 0 to 7
 */

void lora_set_max_output_power(uint8_t set_rest)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
	if(set_rest <= 7)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	d813      	bhi.n	80012e6 <lora_set_max_output_power+0x38>
	{
		  uint8_t read_value = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
		  read_value = lora_read(ADDR_REGPACONFIG);
 80012c2:	2009      	movs	r0, #9
 80012c4:	f7ff ff2e 	bl	8001124 <lora_read>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
		  read_value = read_value | (set_rest)<<4;
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	73fb      	strb	r3, [r7, #15]
		  lora_write(ADDR_REGPACONFIG, read_value);
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	4619      	mov	r1, r3
 80012e0:	2009      	movs	r0, #9
 80012e2:	f7ff fef9 	bl	80010d8 <lora_write>
	}
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <lora_set_output_power>:
 * BIT: 3-0
 * Set Max Output Power: 0 to 15
 */

void lora_set_output_power(uint8_t set_rest)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
	if(set_rest <= 15)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	d80f      	bhi.n	800131e <lora_set_output_power+0x30>
	{
		uint8_t read_value = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
		read_value = lora_read(ADDR_REGPACONFIG);
 8001302:	2009      	movs	r0, #9
 8001304:	f7ff ff0e 	bl	8001124 <lora_read>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]
		read_value = read_value | (set_rest);
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	79fb      	ldrb	r3, [r7, #7]
 8001310:	4313      	orrs	r3, r2
 8001312:	73fb      	strb	r3, [r7, #15]
		lora_write(ADDR_REGPACONFIG, read_value);
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	4619      	mov	r1, r3
 8001318:	2009      	movs	r0, #9
 800131a:	f7ff fedd 	bl	80010d8 <lora_write>
	}

}
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <lora_set_lna_gain>:
 * REG: RegLna(0x0C)
 * BIT: 7-5
 * Set Max Output Power: 0 to 7
 */
void lora_set_lna_gain(uint8_t set_rest)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
	if(set_rest <= 7)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b07      	cmp	r3, #7
 8001334:	d813      	bhi.n	800135e <lora_set_lna_gain+0x38>
	{
		uint8_t read_value = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
		read_value = lora_read(ADDR_REGLNA);
 800133a:	200c      	movs	r0, #12
 800133c:	f7ff fef2 	bl	8001124 <lora_read>
 8001340:	4603      	mov	r3, r0
 8001342:	73fb      	strb	r3, [r7, #15]
		read_value = read_value | (set_rest)<<5;
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	015b      	lsls	r3, r3, #5
 8001348:	b25a      	sxtb	r2, r3
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4313      	orrs	r3, r2
 8001350:	b25b      	sxtb	r3, r3
 8001352:	73fb      	strb	r3, [r7, #15]
		lora_write(ADDR_REGLNA, read_value);
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	4619      	mov	r1, r3
 8001358:	200c      	movs	r0, #12
 800135a:	f7ff febd 	bl	80010d8 <lora_write>
	}
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <lora_init_receive>:
	lora_mode(TX);
	while(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_6) == 0){};                     /* Check if TX is done */
}

void lora_init_receive()
{
 8001366:	b580      	push	{r7, lr}
 8001368:	af00      	add	r7, sp, #0
    lora_write(ADDR_REGDIOMAPPING1, 0x00);  /* Map Pin DIO0 for interrupt when RX done */
 800136a:	2100      	movs	r1, #0
 800136c:	2040      	movs	r0, #64	; 0x40
 800136e:	f7ff feb3 	bl	80010d8 <lora_write>
    lora_write(ADDR_REGIRQFLAGS, 0xFF);     /* Clear interrupts flags */
 8001372:	21ff      	movs	r1, #255	; 0xff
 8001374:	2012      	movs	r0, #18
 8001376:	f7ff feaf 	bl	80010d8 <lora_write>
	lora_set_crc(RESET_BIT);				/* CRC only on TX side in Explicit mode */
 800137a:	2000      	movs	r0, #0
 800137c:	f7ff ff55 	bl	800122a <lora_set_crc>
}
 8001380:	bf00      	nop
 8001382:	bd80      	pop	{r7, pc}

08001384 <lora_recieve_8>:


void lora_recieve_8(int8_t *recieved_data)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

    uint8_t fifo_current_address = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	73bb      	strb	r3, [r7, #14]
	uint8_t bytes_received = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	737b      	strb	r3, [r7, #13]

	lora_mode(STDBY);
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fee9 	bl	800116c <lora_mode>
	fifo_current_address = lora_read(ADDR_REGFIFORXBASEADDR);
 800139a:	200f      	movs	r0, #15
 800139c:	f7ff fec2 	bl	8001124 <lora_read>
 80013a0:	4603      	mov	r3, r0
 80013a2:	73bb      	strb	r3, [r7, #14]
	lora_write(ADDR_REGFIFOADDPTR, fifo_current_address);
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	4619      	mov	r1, r3
 80013a8:	200d      	movs	r0, #13
 80013aa:	f7ff fe95 	bl	80010d8 <lora_write>
	lora_mode(RXCONTINUOUS);
 80013ae:	2005      	movs	r0, #5
 80013b0:	f7ff fedc 	bl	800116c <lora_mode>

	while(LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_6) == 0){}; 	/* Wait for RX done interrupt */
 80013b4:	bf00      	nop
 80013b6:	2140      	movs	r1, #64	; 0x40
 80013b8:	4818      	ldr	r0, [pc, #96]	; (800141c <lora_recieve_8+0x98>)
 80013ba:	f7ff fe01 	bl	8000fc0 <LL_GPIO_IsInputPinSet>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f8      	beq.n	80013b6 <lora_recieve_8+0x32>

	bytes_received = lora_read(ADDR_REGRXNBBYTES);
 80013c4:	2013      	movs	r0, #19
 80013c6:	f7ff fead 	bl	8001124 <lora_read>
 80013ca:	4603      	mov	r3, r0
 80013cc:	737b      	strb	r3, [r7, #13]
	fifo_current_address = lora_read(ADDR_REGFIFORXBASEADDR);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f7ff fea8 	bl	8001124 <lora_read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	73bb      	strb	r3, [r7, #14]
	lora_write(ADDR_REGFIFOADDPTR, fifo_current_address);
 80013d8:	7bbb      	ldrb	r3, [r7, #14]
 80013da:	4619      	mov	r1, r3
 80013dc:	200d      	movs	r0, #13
 80013de:	f7ff fe7b 	bl	80010d8 <lora_write>
	for (uint8_t i = 0; i < bytes_received; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e00c      	b.n	8001402 <lora_recieve_8+0x7e>
	{
		recieved_data[i] = lora_read(ADDR_REGFIFO);     		/* Write data to FIFO, Pointer to next data
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fe9b 	bl	8001124 <lora_read>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4619      	mov	r1, r3
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	b24a      	sxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bytes_received; i++)
 80013fc:	7bfb      	ldrb	r3, [r7, #15]
 80013fe:	3301      	adds	r3, #1
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	7b7b      	ldrb	r3, [r7, #13]
 8001406:	429a      	cmp	r2, r3
 8001408:	d3ee      	bcc.n	80013e8 <lora_recieve_8+0x64>
																   increment itself		*/
	}
	lora_write(ADDR_REGIRQFLAGS, 0xFF);
 800140a:	21ff      	movs	r1, #255	; 0xff
 800140c:	2012      	movs	r0, #18
 800140e:	f7ff fe63 	bl	80010d8 <lora_write>
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	48000800 	.word	0x48000800

08001420 <lora_init>:


void lora_init(lora_s *lora)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	 * Header = Explicit
	 * Preamble length = 8
	 *
	 */

	lora_mode(SLEEP);
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fe9f 	bl	800116c <lora_mode>
	lora_write(ADDR_REGOPMODE, 0x88); 		/* Set LoRa Mode */
 800142e:	2188      	movs	r1, #136	; 0x88
 8001430:	2001      	movs	r0, #1
 8001432:	f7ff fe51 	bl	80010d8 <lora_write>
	lora_set_bandwidth(lora->bandwidth);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff feb3 	bl	80011a6 <lora_set_bandwidth>
	lora_set_spreading_factor(lora->sf);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	785b      	ldrb	r3, [r3, #1]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fecf 	bl	80011e8 <lora_set_spreading_factor>
	lora_set_pa_boost(lora->pa_boost);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	789b      	ldrb	r3, [r3, #2]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff0c 	bl	800126c <lora_set_pa_boost>
	lora_set_max_output_power(lora->max_power);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	78db      	ldrb	r3, [r3, #3]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff28 	bl	80012ae <lora_set_max_output_power>
	lora_set_output_power(lora->output_power);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	791b      	ldrb	r3, [r3, #4]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff43 	bl	80012ee <lora_set_output_power>
	lora_set_lna_gain(lora->lna_gain);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	795b      	ldrb	r3, [r3, #5]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5a 	bl	8001326 <lora_set_lna_gain>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <__NVIC_EnableIRQ+0x38>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800159a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800159c:	4907      	ldr	r1, [pc, #28]	; (80015bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4013      	ands	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000

080015c0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <LL_SYSCFG_SetEXTISource+0x6c>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	3302      	adds	r3, #2
 80015d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	43db      	mvns	r3, r3
 80015de:	ea02 0103 	and.w	r1, r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80015fa:	2320      	movs	r3, #32
 80015fc:	e003      	b.n	8001606 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	fab3 f383 	clz	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	409a      	lsls	r2, r3
 800160e:	4807      	ldr	r0, [pc, #28]	; (800162c <LL_SYSCFG_SetEXTISource+0x6c>)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	430a      	orrs	r2, r1
 8001618:	3302      	adds	r3, #2
 800161a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800161e:	bf00      	nop
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40010000 	.word	0x40010000

08001630 <LL_GPIO_SetPinMode>:
{
 8001630:	b480      	push	{r7}
 8001632:	b08b      	sub	sp, #44	; 0x2c
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa93 f3a3 	rbit	r3, r3
 800164a:	613b      	str	r3, [r7, #16]
  return result;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001656:	2320      	movs	r3, #32
 8001658:	e003      	b.n	8001662 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	fab3 f383 	clz	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2103      	movs	r1, #3
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	401a      	ands	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	61fb      	str	r3, [r7, #28]
  return result;
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001684:	2320      	movs	r3, #32
 8001686:	e003      	b.n	8001690 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	fa01 f303 	lsl.w	r3, r1, r3
 8001698:	431a      	orrs	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	601a      	str	r2, [r3, #0]
}
 800169e:	bf00      	nop
 80016a0:	372c      	adds	r7, #44	; 0x2c
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_GPIO_SetPinPull>:
{
 80016aa:	b480      	push	{r7}
 80016ac:	b08b      	sub	sp, #44	; 0x2c
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	68da      	ldr	r2, [r3, #12]
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	613b      	str	r3, [r7, #16]
  return result;
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80016d0:	2320      	movs	r3, #32
 80016d2:	e003      	b.n	80016dc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fab3 f383 	clz	r3, r3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2103      	movs	r1, #3
 80016e0:	fa01 f303 	lsl.w	r3, r1, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	61fb      	str	r3, [r7, #28]
  return result;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80016fe:	2320      	movs	r3, #32
 8001700:	e003      	b.n	800170a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	431a      	orrs	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	60da      	str	r2, [r3, #12]
}
 8001718:	bf00      	nop
 800171a:	372c      	adds	r7, #44	; 0x2c
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_GPIO_SetOutputPin>:
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	619a      	str	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_GPIO_ResetOutputPin>:
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
 800177c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800177e:	2004      	movs	r0, #4
 8001780:	f7ff ff06 	bl	8001590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8001784:	2020      	movs	r0, #32
 8001786:	f7ff ff03 	bl	8001590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff ff00 	bl	8001590 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001790:	2002      	movs	r0, #2
 8001792:	f7ff fefd 	bl	8001590 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001796:	2120      	movs	r1, #32
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f7ff ffd0 	bl	8001740 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EN4_GPIO_Port, EN4_Pin);
 80017a0:	2102      	movs	r1, #2
 80017a2:	486c      	ldr	r0, [pc, #432]	; (8001954 <MX_GPIO_Init+0x1f8>)
 80017a4:	f7ff ffcc 	bl	8001740 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EN1_GPIO_Port, EN1_Pin);
 80017a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ac:	4869      	ldr	r0, [pc, #420]	; (8001954 <MX_GPIO_Init+0x1f8>)
 80017ae:	f7ff ffc7 	bl	8001740 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EN2_GPIO_Port, EN2_Pin);
 80017b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017b6:	4867      	ldr	r0, [pc, #412]	; (8001954 <MX_GPIO_Init+0x1f8>)
 80017b8:	f7ff ffc2 	bl	8001740 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(EN3_GPIO_Port, EN3_Pin);
 80017bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c0:	4864      	ldr	r0, [pc, #400]	; (8001954 <MX_GPIO_Init+0x1f8>)
 80017c2:	f7ff ffbd 	bl	8001740 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(NSS_GPIO_Port, NSS_Pin);
 80017c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ca:	4863      	ldr	r0, [pc, #396]	; (8001958 <MX_GPIO_Init+0x1fc>)
 80017cc:	f7ff ffaa 	bl	8001724 <LL_GPIO_SetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80017d0:	4962      	ldr	r1, [pc, #392]	; (800195c <MX_GPIO_Init+0x200>)
 80017d2:	2002      	movs	r0, #2
 80017d4:	f7ff fef4 	bl	80015c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE6);
 80017d8:	4961      	ldr	r1, [pc, #388]	; (8001960 <MX_GPIO_Init+0x204>)
 80017da:	2002      	movs	r0, #2
 80017dc:	f7ff fef0 	bl	80015c0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80017e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80017e6:	2301      	movs	r3, #1
 80017e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80017f2:	2301      	movs	r3, #1
 80017f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 fbef 	bl	8002fe0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8001802:	2340      	movs	r3, #64	; 0x40
 8001804:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001806:	2301      	movs	r3, #1
 8001808:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800180c:	2300      	movs	r3, #0
 800180e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	4618      	mov	r0, r3
 800181e:	f001 fbdf 	bl	8002fe0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001828:	484b      	ldr	r0, [pc, #300]	; (8001958 <MX_GPIO_Init+0x1fc>)
 800182a:	f7ff ff3e 	bl	80016aa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(TXFLAG_GPIO_Port, TXFLAG_Pin, LL_GPIO_PULL_NO);
 800182e:	2200      	movs	r2, #0
 8001830:	2140      	movs	r1, #64	; 0x40
 8001832:	4849      	ldr	r0, [pc, #292]	; (8001958 <MX_GPIO_Init+0x1fc>)
 8001834:	f7ff ff39 	bl	80016aa <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800183e:	4846      	ldr	r0, [pc, #280]	; (8001958 <MX_GPIO_Init+0x1fc>)
 8001840:	f7ff fef6 	bl	8001630 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TXFLAG_GPIO_Port, TXFLAG_Pin, LL_GPIO_MODE_INPUT);
 8001844:	2200      	movs	r2, #0
 8001846:	2140      	movs	r1, #64	; 0x40
 8001848:	4843      	ldr	r0, [pc, #268]	; (8001958 <MX_GPIO_Init+0x1fc>)
 800184a:	f7ff fef1 	bl	8001630 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800184e:	2320      	movs	r3, #32
 8001850:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001852:	2301      	movs	r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	4619      	mov	r1, r3
 8001866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186a:	f001 fdfd 	bl	8003468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN4_Pin;
 800186e:	2302      	movs	r3, #2
 8001870:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001872:	2301      	movs	r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EN4_GPIO_Port, &GPIO_InitStruct);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	4619      	mov	r1, r3
 8001886:	4833      	ldr	r0, [pc, #204]	; (8001954 <MX_GPIO_Init+0x1f8>)
 8001888:	f001 fdee 	bl	8003468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN1_Pin;
 800188c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001890:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001892:	2301      	movs	r3, #1
 8001894:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	4619      	mov	r1, r3
 80018a6:	482b      	ldr	r0, [pc, #172]	; (8001954 <MX_GPIO_Init+0x1f8>)
 80018a8:	f001 fdde 	bl	8003468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN2_Pin;
 80018ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018b2:	2301      	movs	r3, #1
 80018b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EN2_GPIO_Port, &GPIO_InitStruct);
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	4619      	mov	r1, r3
 80018c6:	4823      	ldr	r0, [pc, #140]	; (8001954 <MX_GPIO_Init+0x1f8>)
 80018c8:	f001 fdce 	bl	8003468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = EN3_Pin;
 80018cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018d2:	2301      	movs	r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(EN3_GPIO_Port, &GPIO_InitStruct);
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	481b      	ldr	r0, [pc, #108]	; (8001954 <MX_GPIO_Init+0x1f8>)
 80018e8:	f001 fdbe 	bl	8003468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NSS_Pin;
 80018ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018f2:	2301      	movs	r3, #1
 80018f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	4619      	mov	r1, r3
 8001906:	4814      	ldr	r0, [pc, #80]	; (8001958 <MX_GPIO_Init+0x1fc>)
 8001908:	f001 fdae 	bl	8003468 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800190c:	f7ff fdb6 	bl	800147c <__NVIC_GetPriorityGrouping>
 8001910:	4603      	mov	r3, r0
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fe06 	bl	8001528 <NVIC_EncodePriority>
 800191c:	4603      	mov	r3, r0
 800191e:	4619      	mov	r1, r3
 8001920:	2017      	movs	r0, #23
 8001922:	f7ff fdd7 	bl	80014d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001926:	2017      	movs	r0, #23
 8001928:	f7ff fdb6 	bl	8001498 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800192c:	f7ff fda6 	bl	800147c <__NVIC_GetPriorityGrouping>
 8001930:	4603      	mov	r3, r0
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fdf6 	bl	8001528 <NVIC_EncodePriority>
 800193c:	4603      	mov	r3, r0
 800193e:	4619      	mov	r1, r3
 8001940:	2028      	movs	r0, #40	; 0x28
 8001942:	f7ff fdc7 	bl	80014d4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001946:	2028      	movs	r0, #40	; 0x28
 8001948:	f7ff fda6 	bl	8001498 <__NVIC_EnableIRQ>

}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	; 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	00f00003 	.word	0x00f00003
 8001960:	0f000001 	.word	0x0f000001

08001964 <__NVIC_SetPriorityGrouping>:
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800198c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <LL_RCC_HSI_Enable+0x1c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <LL_RCC_HSI_Enable+0x1c>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <LL_RCC_HSI_IsReady+0x24>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019dc:	d101      	bne.n	80019e2 <LL_RCC_HSI_IsReady+0x16>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_RCC_HSI_IsReady+0x18>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	061b      	lsls	r3, r3, #24
 8001a08:	4904      	ldr	r1, [pc, #16]	; (8001a1c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	604b      	str	r3, [r1, #4]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <LL_RCC_SetSysClkSource+0x24>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 0203 	bic.w	r2, r3, #3
 8001a30:	4904      	ldr	r1, [pc, #16]	; (8001a44 <LL_RCC_SetSysClkSource+0x24>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000

08001a48 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <LL_RCC_GetSysClkSource+0x18>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 030c 	and.w	r3, r3, #12
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	4904      	ldr	r1, [pc, #16]	; (8001a88 <LL_RCC_SetAHBPrescaler+0x24>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000

08001a8c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a9c:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac4:	4904      	ldr	r1, [pc, #16]	; (8001ad8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000

08001adc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <LL_RCC_PLL_Enable+0x1c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <LL_RCC_PLL_Enable+0x1c>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aea:	6013      	str	r3, [r2, #0]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <LL_RCC_PLL_IsReady+0x24>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b0c:	d101      	bne.n	8001b12 <LL_RCC_PLL_IsReady+0x16>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_RCC_PLL_IsReady+0x18>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	0212      	lsls	r2, r2, #8
 8001b44:	4311      	orrs	r1, r2
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	4904      	ldr	r1, [pc, #16]	; (8001b5c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	f9ff800c 	.word	0xf9ff800c

08001b64 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000

08001b84 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b90:	4907      	ldr	r1, [pc, #28]	; (8001bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <LL_APB1_GRP1_ForceReset+0x20>)
 8001bbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <LL_APB1_GRP1_ForceReset+0x20>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001be0:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <LL_APB1_GRP1_ReleaseReset+0x24>)
 8001be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	43db      	mvns	r3, r3
 8001be8:	4904      	ldr	r1, [pc, #16]	; (8001bfc <LL_APB1_GRP1_ReleaseReset+0x24>)
 8001bea:	4013      	ands	r3, r2
 8001bec:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000

08001c00 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c0c:	4907      	ldr	r1, [pc, #28]	; (8001c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001c16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40021000 	.word	0x40021000

08001c30 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <LL_FLASH_SetLatency+0x24>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 020f 	bic.w	r2, r3, #15
 8001c40:	4904      	ldr	r1, [pc, #16]	; (8001c54 <LL_FLASH_SetLatency+0x24>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	600b      	str	r3, [r1, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	40022000 	.word	0x40022000

08001c58 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <LL_FLASH_GetLatency+0x18>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 030f 	and.w	r3, r3, #15
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000

08001c74 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001c84:	4904      	ldr	r1, [pc, #16]	; (8001c98 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40007000 	.word	0x40007000

08001c9c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001caa:	6093      	str	r3, [r2, #8]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40007000 	.word	0x40007000

08001cbc <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	621a      	str	r2, [r3, #32]
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff ff7a 	bl	8001c00 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d0c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001d10:	f7ff ff38 	bl	8001b84 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f7ff fe25 	bl	8001964 <__NVIC_SetPriorityGrouping>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  LL_PWR_DisableUCPDDeadBattery();
 8001d1a:	f7ff ffbf 	bl	8001c9c <LL_PWR_DisableUCPDDeadBattery>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d1e:	f000 f831 	bl	8001d84 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_SPI3);
 8001d22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d26:	f7ff ff45 	bl	8001bb4 <LL_APB1_GRP1_ForceReset>
  MX_GPIO_Init();
 8001d2a:	f7ff fd17 	bl	800175c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001d2e:	f000 ff83 	bl	8002c38 <MX_LPUART1_UART_Init>
  LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_SPI3);
 8001d32:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d36:	f7ff ff4f 	bl	8001bd8 <LL_APB1_GRP1_ReleaseReset>
  MX_SPI3_Init();
 8001d3a:	f000 f943 	bl	8001fc4 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001d3e:	f000 fe07 	bl	8002950 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  lora_s lora =
 8001d42:	4a0f      	ldr	r2, [pc, #60]	; (8001d80 <main+0x80>)
 8001d44:	463b      	mov	r3, r7
 8001d46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d4a:	6018      	str	r0, [r3, #0]
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	8019      	strh	r1, [r3, #0]
	.max_power = 3,
	.output_power = 14,
	.lna_gain = 6
  };

  lora_init(&lora);
 8001d50:	463b      	mov	r3, r7
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fb64 	bl	8001420 <lora_init>
  lora_init_receive();
 8001d58:	f7ff fb05 	bl	8001366 <lora_init_receive>


  LL_TIM_EnableCounter(TIM2);
 8001d5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d60:	f7ff ffac 	bl	8001cbc <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);
 8001d64:	2101      	movs	r1, #1
 8001d66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d6a:	f7ff ffb7 	bl	8001cdc <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH2);
 8001d6e:	2110      	movs	r1, #16
 8001d70:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d74:	f7ff ffb2 	bl	8001cdc <LL_TIM_CC_EnableChannel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  start();
 8001d78:	f000 f9de 	bl	8002138 <start>
 8001d7c:	e7fc      	b.n	8001d78 <main+0x78>
 8001d7e:	bf00      	nop
 8001d80:	08006f50 	.word	0x08006f50

08001d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001d8a:	2003      	movs	r0, #3
 8001d8c:	f7ff ff50 	bl	8001c30 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_3)
 8001d90:	bf00      	nop
 8001d92:	f7ff ff61 	bl	8001c58 <LL_FLASH_GetLatency>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d1fa      	bne.n	8001d92 <SystemClock_Config+0xe>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001d9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001da0:	f7ff ff68 	bl	8001c74 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001da4:	f7ff fe02 	bl	80019ac <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001da8:	bf00      	nop
 8001daa:	f7ff fe0f 	bl	80019cc <LL_RCC_HSI_IsReady>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d1fa      	bne.n	8001daa <SystemClock_Config+0x26>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 8001db4:	2040      	movs	r0, #64	; 0x40
 8001db6:	f7ff fe1d 	bl	80019f4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_2, 25, LL_RCC_PLLR_DIV_2);
 8001dba:	2300      	movs	r3, #0
 8001dbc:	2219      	movs	r2, #25
 8001dbe:	2110      	movs	r1, #16
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f7ff feaf 	bl	8001b24 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001dc6:	f7ff fecd 	bl	8001b64 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001dca:	f7ff fe87 	bl	8001adc <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001dce:	bf00      	nop
 8001dd0:	f7ff fe94 	bl	8001afc <LL_RCC_PLL_IsReady>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d1fa      	bne.n	8001dd0 <SystemClock_Config+0x4c>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f7ff fe20 	bl	8001a20 <LL_RCC_SetSysClkSource>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8001de0:	2080      	movs	r0, #128	; 0x80
 8001de2:	f7ff fe3f 	bl	8001a64 <LL_RCC_SetAHBPrescaler>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001de6:	bf00      	nop
 8001de8:	f7ff fe2e 	bl	8001a48 <LL_RCC_GetSysClkSource>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d1fa      	bne.n	8001de8 <SystemClock_Config+0x64>
  {
  }

  /* Insure 1us transition state at intermediate medium speed clock*/
  for (__IO uint32_t i = (170 >> 1); i !=0; i--);
 8001df2:	2355      	movs	r3, #85	; 0x55
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	e002      	b.n	8001dfe <SystemClock_Config+0x7a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <SystemClock_Config+0x74>

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fe2d 	bl	8001a64 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff fe3e 	bl	8001a8c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fe4f 	bl	8001ab4 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(100000000);
 8001e16:	4805      	ldr	r0, [pc, #20]	; (8001e2c <SystemClock_Config+0xa8>)
 8001e18:	f002 fb0e 	bl	8004438 <LL_Init1msTick>

  LL_SetSystemCoreClock(100000000);
 8001e1c:	4803      	ldr	r0, [pc, #12]	; (8001e2c <SystemClock_Config+0xa8>)
 8001e1e:	f002 fb19 	bl	8004454 <LL_SetSystemCoreClock>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	05f5e100 	.word	0x05f5e100

08001e30 <LL_LPUART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_LPUART_IsActiveFlag_TXE_TXFNF
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *LPUARTx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	2b80      	cmp	r3, #128	; 0x80
 8001e42:	d101      	bne.n	8001e48 <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x18>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <LL_LPUART_IsActiveFlag_TXE_TXFNF+0x1a>
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <Transmit_uart>:
 */
#include "print.h"


void Transmit_uart(uint8_t *data_buf, uint8_t data_size)
 {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
	for (int var = 0; var < data_size; ++var)
 8001e80:	2300      	movs	r3, #0
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	e011      	b.n	8001eaa <Transmit_uart+0x36>
	{
		 while (!LL_LPUART_IsActiveFlag_TXE(LPUART1)){};
 8001e86:	bf00      	nop
 8001e88:	480c      	ldr	r0, [pc, #48]	; (8001ebc <Transmit_uart+0x48>)
 8001e8a:	f7ff ffd1 	bl	8001e30 <LL_LPUART_IsActiveFlag_TXE_TXFNF>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f9      	beq.n	8001e88 <Transmit_uart+0x14>
		  LL_LPUART_TransmitData8(LPUART1, data_buf[var]);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4807      	ldr	r0, [pc, #28]	; (8001ebc <Transmit_uart+0x48>)
 8001ea0:	f7ff ffd9 	bl	8001e56 <LL_LPUART_TransmitData8>
	for (int var = 0; var < data_size; ++var)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	dbe9      	blt.n	8001e86 <Transmit_uart+0x12>
	}
 }
 8001eb2:	bf00      	nop
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40008000 	.word	0x40008000

08001ec0 <__io_putchar>:

int __io_putchar(int ch)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	Transmit_uart((uint8_t*)&ch, 1);
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2101      	movs	r1, #1
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ffd1 	bl	8001e74 <Transmit_uart>
	return ch;
 8001ed2:	687b      	ldr	r3, [r7, #4]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <LL_AHB2_GRP1_EnableClock>:
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ee8:	4907      	ldr	r1, [pc, #28]	; (8001f08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ef2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001efa:	68fb      	ldr	r3, [r7, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000

08001f0c <LL_APB1_GRP1_EnableClock>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001f22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4013      	ands	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_SPI_Enable>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	601a      	str	r2, [r3, #0]
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_SPI_Disable>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	601a      	str	r2, [r3, #0]
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_SPI_SetStandard>:
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f023 0210 	bic.w	r2, r3, #16
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	605a      	str	r2, [r3, #4]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_SPI_DisableNSSPulseMgt>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f023 0208 	bic.w	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	605a      	str	r2, [r3, #4]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b090      	sub	sp, #64	; 0x40
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */
  LL_SPI_Disable(SPI3);
 8001fca:	483d      	ldr	r0, [pc, #244]	; (80020c0 <MX_SPI3_Init+0xfc>)
 8001fcc:	f7ff ffc6 	bl	8001f5c <LL_SPI_Disable>

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	2228      	movs	r2, #40	; 0x28
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f002 fa75 	bl	80044c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fde:	463b      	mov	r3, r7
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8001fee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ff2:	f7ff ff8b 	bl	8001f0c <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001ff6:	2004      	movs	r0, #4
 8001ff8:	f7ff ff70 	bl	8001edc <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002000:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002002:	2302      	movs	r3, #2
 8002004:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002012:	2306      	movs	r3, #6
 8002014:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002016:	463b      	mov	r3, r7
 8002018:	4619      	mov	r1, r3
 800201a:	482a      	ldr	r0, [pc, #168]	; (80020c4 <MX_SPI3_Init+0x100>)
 800201c:	f001 fa24 	bl	8003468 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8002020:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002024:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002026:	2302      	movs	r3, #2
 8002028:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002036:	2306      	movs	r3, #6
 8002038:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800203a:	463b      	mov	r3, r7
 800203c:	4619      	mov	r1, r3
 800203e:	4821      	ldr	r0, [pc, #132]	; (80020c4 <MX_SPI3_Init+0x100>)
 8002040:	f001 fa12 	bl	8003468 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8002044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002048:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800204a:	2302      	movs	r3, #2
 800204c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800205a:	2306      	movs	r3, #6
 800205c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	463b      	mov	r3, r7
 8002060:	4619      	mov	r1, r3
 8002062:	4818      	ldr	r0, [pc, #96]	; (80020c4 <MX_SPI3_Init+0x100>)
 8002064:	f001 fa00 	bl	8003468 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002068:	2300      	movs	r3, #0
 800206a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800206c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002070:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002072:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002076:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002080:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002084:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8002086:	2318      	movs	r3, #24
 8002088:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800208a:	2300      	movs	r3, #0
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002092:	2307      	movs	r3, #7
 8002094:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8002096:	f107 0318 	add.w	r3, r7, #24
 800209a:	4619      	mov	r1, r3
 800209c:	4808      	ldr	r0, [pc, #32]	; (80020c0 <MX_SPI3_Init+0xfc>)
 800209e:	f001 fcd3 	bl	8003a48 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80020a2:	2100      	movs	r1, #0
 80020a4:	4806      	ldr	r0, [pc, #24]	; (80020c0 <MX_SPI3_Init+0xfc>)
 80020a6:	f7ff ff69 	bl	8001f7c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_SPI3_Init+0xfc>)
 80020ac:	f7ff ff79 	bl	8001fa2 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 80020b0:	4803      	ldr	r0, [pc, #12]	; (80020c0 <MX_SPI3_Init+0xfc>)
 80020b2:	f7ff ff43 	bl	8001f3c <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 80020b6:	bf00      	nop
 80020b8:	3740      	adds	r7, #64	; 0x40
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40003c00 	.word	0x40003c00
 80020c4:	48000800 	.word	0x48000800

080020c8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_GPIO_SetOutputPin>:
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	619a      	str	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_GPIO_ResetOutputPin>:
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <start>:
motor_state_s state;
duty_cycle_s duty_cycle;


void start()
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
	  get_axis_position(&axis);
 800213c:	4806      	ldr	r0, [pc, #24]	; (8002158 <start+0x20>)
 800213e:	f000 f922 	bl	8002386 <get_axis_position>
	  set_motor_direction(&axis, &state);
 8002142:	4906      	ldr	r1, [pc, #24]	; (800215c <start+0x24>)
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <start+0x20>)
 8002146:	f000 f8e7 	bl	8002318 <set_motor_direction>
	  loop(&state, &duty_cycle);
 800214a:	4905      	ldr	r1, [pc, #20]	; (8002160 <start+0x28>)
 800214c:	4803      	ldr	r0, [pc, #12]	; (800215c <start+0x24>)
 800214e:	f000 f931 	bl	80023b4 <loop>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200001f0 	.word	0x200001f0
 800215c:	200001f4 	.word	0x200001f4
 8002160:	200001f8 	.word	0x200001f8

08002164 <move_forward>:


void move_forward()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, EN1_Pin);
 8002168:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800216c:	4807      	ldr	r0, [pc, #28]	; (800218c <move_forward+0x28>)
 800216e:	f7ff ffc7 	bl	8002100 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, EN2_Pin);
 8002172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <move_forward+0x28>)
 8002178:	f7ff ffd0 	bl	800211c <LL_GPIO_ResetOutputPin>
	set_motor_speed(&axis, &state, &duty_cycle);
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <move_forward+0x2c>)
 800217e:	4905      	ldr	r1, [pc, #20]	; (8002194 <move_forward+0x30>)
 8002180:	4805      	ldr	r0, [pc, #20]	; (8002198 <move_forward+0x34>)
 8002182:	f000 f86b 	bl	800225c <set_motor_speed>

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	48000400 	.word	0x48000400
 8002190:	200001f8 	.word	0x200001f8
 8002194:	200001f4 	.word	0x200001f4
 8002198:	200001f0 	.word	0x200001f0

0800219c <move_revers>:

void move_revers()
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, EN1_Pin);
 80021a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a4:	4807      	ldr	r0, [pc, #28]	; (80021c4 <move_revers+0x28>)
 80021a6:	f7ff ffb9 	bl	800211c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, EN2_Pin);
 80021aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <move_revers+0x28>)
 80021b0:	f7ff ffa6 	bl	8002100 <LL_GPIO_SetOutputPin>
	set_motor_speed(&axis, &state, &duty_cycle);
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <move_revers+0x2c>)
 80021b6:	4905      	ldr	r1, [pc, #20]	; (80021cc <move_revers+0x30>)
 80021b8:	4805      	ldr	r0, [pc, #20]	; (80021d0 <move_revers+0x34>)
 80021ba:	f000 f84f 	bl	800225c <set_motor_speed>
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	48000400 	.word	0x48000400
 80021c8:	200001f8 	.word	0x200001f8
 80021cc:	200001f4 	.word	0x200001f4
 80021d0:	200001f0 	.word	0x200001f0

080021d4 <move_right>:

void move_right()
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOB, EN3_Pin);
 80021d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021dc:	4806      	ldr	r0, [pc, #24]	; (80021f8 <move_right+0x24>)
 80021de:	f7ff ff8f 	bl	8002100 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, EN4_Pin);
 80021e2:	2102      	movs	r1, #2
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <move_right+0x24>)
 80021e6:	f7ff ff99 	bl	800211c <LL_GPIO_ResetOutputPin>
	set_motor_speed(&axis, &state, &duty_cycle);
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <move_right+0x28>)
 80021ec:	4904      	ldr	r1, [pc, #16]	; (8002200 <move_right+0x2c>)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <move_right+0x30>)
 80021f0:	f000 f834 	bl	800225c <set_motor_speed>
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	48000400 	.word	0x48000400
 80021fc:	200001f8 	.word	0x200001f8
 8002200:	200001f4 	.word	0x200001f4
 8002204:	200001f0 	.word	0x200001f0

08002208 <move_left>:

void move_left()
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOB, EN3_Pin);
 800220c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002210:	4806      	ldr	r0, [pc, #24]	; (800222c <move_left+0x24>)
 8002212:	f7ff ff83 	bl	800211c <LL_GPIO_ResetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, EN4_Pin);
 8002216:	2102      	movs	r1, #2
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <move_left+0x24>)
 800221a:	f7ff ff71 	bl	8002100 <LL_GPIO_SetOutputPin>
	set_motor_speed(&axis, &state, &duty_cycle);
 800221e:	4a04      	ldr	r2, [pc, #16]	; (8002230 <move_left+0x28>)
 8002220:	4904      	ldr	r1, [pc, #16]	; (8002234 <move_left+0x2c>)
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <move_left+0x30>)
 8002224:	f000 f81a 	bl	800225c <set_motor_speed>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	48000400 	.word	0x48000400
 8002230:	200001f8 	.word	0x200001f8
 8002234:	200001f4 	.word	0x200001f4
 8002238:	200001f0 	.word	0x200001f0

0800223c <no_move>:

void no_move()
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	set_motor_speed(&axis, &state, &duty_cycle);
 8002240:	4a03      	ldr	r2, [pc, #12]	; (8002250 <no_move+0x14>)
 8002242:	4904      	ldr	r1, [pc, #16]	; (8002254 <no_move+0x18>)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <no_move+0x1c>)
 8002246:	f000 f809 	bl	800225c <set_motor_speed>
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200001f8 	.word	0x200001f8
 8002254:	200001f4 	.word	0x200001f4
 8002258:	200001f0 	.word	0x200001f0

0800225c <set_motor_speed>:

void set_motor_speed(axis_s *axis, motor_state_s *state, duty_cycle_s *duty_cycle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
	if(state->up_down == UP)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10a      	bne.n	8002286 <set_motor_speed+0x2a>
	{
		duty_cycle->up_down = 70;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2246      	movs	r2, #70	; 0x46
 8002274:	701a      	strb	r2, [r3, #0]
		LL_TIM_OC_SetCompareCH1(TIM2, duty_cycle->up_down);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002280:	f7ff ff22 	bl	80020c8 <LL_TIM_OC_SetCompareCH1>
 8002284:	e01a      	b.n	80022bc <set_motor_speed+0x60>
	}
	else if (state->up_down == DOWN)
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b04      	cmp	r3, #4
 800228c:	d10a      	bne.n	80022a4 <set_motor_speed+0x48>
	{
		duty_cycle->up_down = 70;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2246      	movs	r2, #70	; 0x46
 8002292:	701a      	strb	r2, [r3, #0]
		LL_TIM_OC_SetCompareCH1(TIM2, duty_cycle->up_down);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	4619      	mov	r1, r3
 800229a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800229e:	f7ff ff13 	bl	80020c8 <LL_TIM_OC_SetCompareCH1>
 80022a2:	e00b      	b.n	80022bc <set_motor_speed+0x60>
;
	}
	else if (state->up_down == IDLE)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d107      	bne.n	80022bc <set_motor_speed+0x60>
	{
		duty_cycle->up_down = 0;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
		LL_TIM_OC_SetCompareCH1(TIM2, 0);
 80022b2:	2100      	movs	r1, #0
 80022b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022b8:	f7ff ff06 	bl	80020c8 <LL_TIM_OC_SetCompareCH1>
	}

	if (state->left_right == RIGHT)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d10a      	bne.n	80022da <set_motor_speed+0x7e>
	{
		duty_cycle->left_right = 50;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2232      	movs	r2, #50	; 0x32
 80022c8:	705a      	strb	r2, [r3, #1]
		LL_TIM_OC_SetCompareCH2(TIM2, duty_cycle->left_right);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	785b      	ldrb	r3, [r3, #1]
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022d4:	f7ff ff06 	bl	80020e4 <LL_TIM_OC_SetCompareCH2>
	else if (state->left_right == IDLE)
	{
		duty_cycle->left_right = 0; // RIGHT
		LL_TIM_OC_SetCompareCH2(TIM2, 0);
	}
}
 80022d8:	e01a      	b.n	8002310 <set_motor_speed+0xb4>
	else if (state->left_right == LEFT)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d10a      	bne.n	80022f8 <set_motor_speed+0x9c>
		duty_cycle->left_right = 50;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2232      	movs	r2, #50	; 0x32
 80022e6:	705a      	strb	r2, [r3, #1]
		LL_TIM_OC_SetCompareCH2(TIM2, duty_cycle->left_right);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	4619      	mov	r1, r3
 80022ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022f2:	f7ff fef7 	bl	80020e4 <LL_TIM_OC_SetCompareCH2>
}
 80022f6:	e00b      	b.n	8002310 <set_motor_speed+0xb4>
	else if (state->left_right == IDLE)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d107      	bne.n	8002310 <set_motor_speed+0xb4>
		duty_cycle->left_right = 0; // RIGHT
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	705a      	strb	r2, [r3, #1]
		LL_TIM_OC_SetCompareCH2(TIM2, 0);
 8002306:	2100      	movs	r1, #0
 8002308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800230c:	f7ff feea 	bl	80020e4 <LL_TIM_OC_SetCompareCH2>
}
 8002310:	bf00      	nop
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <set_motor_direction>:


void set_motor_direction(axis_s *axis, motor_state_s *state)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
	if(axis->y == 1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d103      	bne.n	8002334 <set_motor_direction+0x1c>
	{
		state->up_down = UP;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	e00c      	b.n	800234e <set_motor_direction+0x36>
	}
	else if (axis->y == -1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233e:	d103      	bne.n	8002348 <set_motor_direction+0x30>
	{
		state->up_down = DOWN;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	2204      	movs	r2, #4
 8002344:	701a      	strb	r2, [r3, #0]
 8002346:	e002      	b.n	800234e <set_motor_direction+0x36>
	}
	else
	{
		state->up_down = IDLE;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
	}

	if(axis->x == 1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f993 3000 	ldrsb.w	r3, [r3]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d103      	bne.n	8002360 <set_motor_direction+0x48>
	{
		state->left_right = RIGHT;;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2203      	movs	r2, #3
 800235c:	705a      	strb	r2, [r3, #1]
		state->left_right = IDLE;
	}

	//printf("Motor state up: %d\n\r", state->up_down);
	//printf("Motor state left: %d\n\r", state->left_right);
}
 800235e:	e00c      	b.n	800237a <set_motor_direction+0x62>
	else if (axis->x == -1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f993 3000 	ldrsb.w	r3, [r3]
 8002366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236a:	d103      	bne.n	8002374 <set_motor_direction+0x5c>
		state->left_right = LEFT;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	705a      	strb	r2, [r3, #1]
}
 8002372:	e002      	b.n	800237a <set_motor_direction+0x62>
		state->left_right = IDLE;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	705a      	strb	r2, [r3, #1]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <get_axis_position>:


void get_axis_position(axis_s *axis)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
	lora_recieve_8(axis->recieved_data);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3302      	adds	r3, #2
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fff6 	bl	8001384 <lora_recieve_8>
	axis->x = axis->recieved_data[0];
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	701a      	strb	r2, [r3, #0]
	axis->y = axis->recieved_data[1];
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f993 2003 	ldrsb.w	r2, [r3, #3]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	705a      	strb	r2, [r3, #1]

	//printf("Axis x: %d\n\r", axis->x);
	//printf("Axis y: %d\n\r", axis->y);
}
 80023ac:	bf00      	nop
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <loop>:


void loop(motor_state_s *state, duty_cycle_s *duty_cycle)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
	switch (state->up_down)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d018      	beq.n	80023f8 <loop+0x44>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	dc1f      	bgt.n	800240a <loop+0x56>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <loop+0x20>
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d009      	beq.n	80023e6 <loop+0x32>
	case DOWN:
		move_revers();
		printf("DOWN:%u \n\r", duty_cycle->up_down);
		break;

	default: break;
 80023d2:	e01a      	b.n	800240a <loop+0x56>
		no_move();
 80023d4:	f7ff ff32 	bl	800223c <no_move>
		printf("IDLE:%u \n\r", duty_cycle->up_down);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	4821      	ldr	r0, [pc, #132]	; (8002464 <loop+0xb0>)
 80023e0:	f002 fce4 	bl	8004dac <iprintf>
		break;
 80023e4:	e012      	b.n	800240c <loop+0x58>
		move_forward();
 80023e6:	f7ff febd 	bl	8002164 <move_forward>
		printf("UP:%u \n\r", duty_cycle->up_down);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	481d      	ldr	r0, [pc, #116]	; (8002468 <loop+0xb4>)
 80023f2:	f002 fcdb 	bl	8004dac <iprintf>
		break;
 80023f6:	e009      	b.n	800240c <loop+0x58>
		move_revers();
 80023f8:	f7ff fed0 	bl	800219c <move_revers>
		printf("DOWN:%u \n\r", duty_cycle->up_down);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	481a      	ldr	r0, [pc, #104]	; (800246c <loop+0xb8>)
 8002404:	f002 fcd2 	bl	8004dac <iprintf>
		break;
 8002408:	e000      	b.n	800240c <loop+0x58>
	default: break;
 800240a:	bf00      	nop
	}

	switch (state->left_right)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	785b      	ldrb	r3, [r3, #1]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d00f      	beq.n	8002434 <loop+0x80>
 8002414:	2b03      	cmp	r3, #3
 8002416:	dc1f      	bgt.n	8002458 <loop+0xa4>
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <loop+0x6e>
 800241c:	2b02      	cmp	r3, #2
 800241e:	d012      	beq.n	8002446 <loop+0x92>
	case LEFT:
		move_left();
		printf("LEFT:%u \n\r", duty_cycle->left_right);
		break;

	default: break;
 8002420:	e01a      	b.n	8002458 <loop+0xa4>
		no_move();
 8002422:	f7ff ff0b 	bl	800223c <no_move>
		printf("IDLE:%u \n\r", duty_cycle->left_right);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	785b      	ldrb	r3, [r3, #1]
 800242a:	4619      	mov	r1, r3
 800242c:	480d      	ldr	r0, [pc, #52]	; (8002464 <loop+0xb0>)
 800242e:	f002 fcbd 	bl	8004dac <iprintf>
		break;
 8002432:	e012      	b.n	800245a <loop+0xa6>
		move_right();
 8002434:	f7ff fece 	bl	80021d4 <move_right>
		printf("RIGHT:%u \n\r", duty_cycle->left_right);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	785b      	ldrb	r3, [r3, #1]
 800243c:	4619      	mov	r1, r3
 800243e:	480c      	ldr	r0, [pc, #48]	; (8002470 <loop+0xbc>)
 8002440:	f002 fcb4 	bl	8004dac <iprintf>
		break;
 8002444:	e009      	b.n	800245a <loop+0xa6>
		move_left();
 8002446:	f7ff fedf 	bl	8002208 <move_left>
		printf("LEFT:%u \n\r", duty_cycle->left_right);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	4619      	mov	r1, r3
 8002450:	4808      	ldr	r0, [pc, #32]	; (8002474 <loop+0xc0>)
 8002452:	f002 fcab 	bl	8004dac <iprintf>
		break;
 8002456:	e000      	b.n	800245a <loop+0xa6>
	default: break;
 8002458:	bf00      	nop
	}
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	08006f58 	.word	0x08006f58
 8002468:	08006f64 	.word	0x08006f64
 800246c:	08006f70 	.word	0x08006f70
 8002470:	08006f7c 	.word	0x08006f7c
 8002474:	08006f88 	.word	0x08006f88

08002478 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4013      	ands	r3, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	429a      	cmp	r2, r3
 800248c:	d101      	bne.n	8002492 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40010400 	.word	0x40010400

080024a4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80024ac:	4a04      	ldr	r2, [pc, #16]	; (80024c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6153      	str	r3, [r2, #20]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40010400 	.word	0x40010400

080024c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <NMI_Handler+0x4>

080024ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <MemManage_Handler+0x4>

080024d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024da:	e7fe      	b.n	80024da <BusFault_Handler+0x4>

080024dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 800251e:	2040      	movs	r0, #64	; 0x40
 8002520:	f7ff ffaa 	bl	8002478 <LL_EXTI_IsActiveFlag_0_31>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 800252a:	2040      	movs	r0, #64	; 0x40
 800252c:	f7ff ffba 	bl	80024a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8002538:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800253c:	f7ff ff9c 	bl	8002478 <LL_EXTI_IsActiveFlag_0_31>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8002546:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800254a:	f7ff ffab 	bl	80024a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}

08002552 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  return 1;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_kill>:

int _kill(int pid, int sig)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800256c:	f001 ff82 	bl	8004474 <__errno>
 8002570:	4603      	mov	r3, r0
 8002572:	2216      	movs	r2, #22
 8002574:	601a      	str	r2, [r3, #0]
  return -1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_exit>:

void _exit (int status)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800258a:	f04f 31ff 	mov.w	r1, #4294967295
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffe7 	bl	8002562 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002594:	e7fe      	b.n	8002594 <_exit+0x12>

08002596 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b086      	sub	sp, #24
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e00a      	b.n	80025be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025a8:	f3af 8000 	nop.w
 80025ac:	4601      	mov	r1, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	60ba      	str	r2, [r7, #8]
 80025b4:	b2ca      	uxtb	r2, r1
 80025b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dbf0      	blt.n	80025a8 <_read+0x12>
  }

  return len;
 80025c6:	687b      	ldr	r3, [r7, #4]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e009      	b.n	80025f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	60ba      	str	r2, [r7, #8]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fc68 	bl	8001ec0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dbf1      	blt.n	80025e2 <_write+0x12>
  }
  return len;
 80025fe:	687b      	ldr	r3, [r7, #4]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <_close>:

int _close(int file)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002630:	605a      	str	r2, [r3, #4]
  return 0;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <_isatty>:

int _isatty(int file)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002648:	2301      	movs	r3, #1
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <_sbrk+0x5c>)
 800267a:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <_sbrk+0x60>)
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <_sbrk+0x64>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d102      	bne.n	8002692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800268c:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <_sbrk+0x64>)
 800268e:	4a12      	ldr	r2, [pc, #72]	; (80026d8 <_sbrk+0x68>)
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002692:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <_sbrk+0x64>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4413      	add	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	429a      	cmp	r2, r3
 800269e:	d207      	bcs.n	80026b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a0:	f001 fee8 	bl	8004474 <__errno>
 80026a4:	4603      	mov	r3, r0
 80026a6:	220c      	movs	r2, #12
 80026a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	e009      	b.n	80026c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <_sbrk+0x64>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <_sbrk+0x64>)
 80026c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c2:	68fb      	ldr	r3, [r7, #12]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	2001c000 	.word	0x2001c000
 80026d0:	00000400 	.word	0x00000400
 80026d4:	200001fc 	.word	0x200001fc
 80026d8:	20000210 	.word	0x20000210

080026dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <SystemInit+0x20>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	4a05      	ldr	r2, [pc, #20]	; (80026fc <SystemInit+0x20>)
 80026e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <LL_AHB2_GRP1_EnableClock>:
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800270a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800270c:	4907      	ldr	r1, [pc, #28]	; (800272c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4313      	orrs	r3, r2
 8002712:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	40021000 	.word	0x40021000

08002730 <LL_APB1_GRP1_EnableClock>:
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002738:	4b08      	ldr	r3, [pc, #32]	; (800275c <LL_APB1_GRP1_EnableClock+0x2c>)
 800273a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <LL_APB1_GRP1_EnableClock+0x2c>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4313      	orrs	r3, r2
 8002742:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002746:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	40021000 	.word	0x40021000

08002760 <LL_TIM_EnableARRPreload>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	601a      	str	r2, [r3, #0]
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <LL_TIM_OC_DisableFast>:
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d02e      	beq.n	80027ee <LL_TIM_OC_DisableFast+0x6e>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d029      	beq.n	80027ea <LL_TIM_OC_DisableFast+0x6a>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d024      	beq.n	80027e6 <LL_TIM_OC_DisableFast+0x66>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2b40      	cmp	r3, #64	; 0x40
 80027a0:	d01f      	beq.n	80027e2 <LL_TIM_OC_DisableFast+0x62>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a8:	d019      	beq.n	80027de <LL_TIM_OC_DisableFast+0x5e>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b0:	d013      	beq.n	80027da <LL_TIM_OC_DisableFast+0x5a>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b8:	d00d      	beq.n	80027d6 <LL_TIM_OC_DisableFast+0x56>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027c0:	d007      	beq.n	80027d2 <LL_TIM_OC_DisableFast+0x52>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d101      	bne.n	80027ce <LL_TIM_OC_DisableFast+0x4e>
 80027ca:	2308      	movs	r3, #8
 80027cc:	e010      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027ce:	2309      	movs	r3, #9
 80027d0:	e00e      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027d2:	2307      	movs	r3, #7
 80027d4:	e00c      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027d6:	2306      	movs	r3, #6
 80027d8:	e00a      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027da:	2305      	movs	r3, #5
 80027dc:	e008      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027de:	2304      	movs	r3, #4
 80027e0:	e006      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e004      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e002      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_TIM_OC_DisableFast+0x70>
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3318      	adds	r3, #24
 80027f6:	4619      	mov	r1, r3
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <LL_TIM_OC_DisableFast+0xa8>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	440b      	add	r3, r1
 8002800:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	4908      	ldr	r1, [pc, #32]	; (800282c <LL_TIM_OC_DisableFast+0xac>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	4619      	mov	r1, r3
 800280e:	2304      	movs	r3, #4
 8002810:	408b      	lsls	r3, r1
 8002812:	43db      	mvns	r3, r3
 8002814:	401a      	ands	r2, r3
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	601a      	str	r2, [r3, #0]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	08006fac 	.word	0x08006fac
 800282c:	08006fb8 	.word	0x08006fb8

08002830 <LL_TIM_OC_EnablePreload>:
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d02e      	beq.n	800289e <LL_TIM_OC_EnablePreload+0x6e>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d029      	beq.n	800289a <LL_TIM_OC_EnablePreload+0x6a>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b10      	cmp	r3, #16
 800284a:	d024      	beq.n	8002896 <LL_TIM_OC_EnablePreload+0x66>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d01f      	beq.n	8002892 <LL_TIM_OC_EnablePreload+0x62>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002858:	d019      	beq.n	800288e <LL_TIM_OC_EnablePreload+0x5e>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d013      	beq.n	800288a <LL_TIM_OC_EnablePreload+0x5a>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002868:	d00d      	beq.n	8002886 <LL_TIM_OC_EnablePreload+0x56>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002870:	d007      	beq.n	8002882 <LL_TIM_OC_EnablePreload+0x52>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d101      	bne.n	800287e <LL_TIM_OC_EnablePreload+0x4e>
 800287a:	2308      	movs	r3, #8
 800287c:	e010      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 800287e:	2309      	movs	r3, #9
 8002880:	e00e      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 8002882:	2307      	movs	r3, #7
 8002884:	e00c      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 8002886:	2306      	movs	r3, #6
 8002888:	e00a      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 800288a:	2305      	movs	r3, #5
 800288c:	e008      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 800288e:	2304      	movs	r3, #4
 8002890:	e006      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 8002892:	2303      	movs	r3, #3
 8002894:	e004      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 8002896:	2302      	movs	r3, #2
 8002898:	e002      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <LL_TIM_OC_EnablePreload+0x70>
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3318      	adds	r3, #24
 80028a6:	4619      	mov	r1, r3
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <LL_TIM_OC_EnablePreload+0xa4>)
 80028ac:	5cd3      	ldrb	r3, [r2, r3]
 80028ae:	440b      	add	r3, r1
 80028b0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	4907      	ldr	r1, [pc, #28]	; (80028d8 <LL_TIM_OC_EnablePreload+0xa8>)
 80028ba:	5ccb      	ldrb	r3, [r1, r3]
 80028bc:	4619      	mov	r1, r3
 80028be:	2308      	movs	r3, #8
 80028c0:	408b      	lsls	r3, r1
 80028c2:	431a      	orrs	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	601a      	str	r2, [r3, #0]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	08006fac 	.word	0x08006fac
 80028d8:	08006fb8 	.word	0x08006fb8

080028dc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80028ee:	f023 0307 	bic.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	605a      	str	r2, [r3, #4]
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	609a      	str	r2, [r3, #8]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b094      	sub	sp, #80	; 0x50
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002956:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
 8002964:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002966:	f107 031c 	add.w	r3, r7, #28
 800296a:	2220      	movs	r2, #32
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f001 fdaa 	bl	80044c8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	605a      	str	r2, [r3, #4]
 800297c:	609a      	str	r2, [r3, #8]
 800297e:	60da      	str	r2, [r3, #12]
 8002980:	611a      	str	r2, [r3, #16]
 8002982:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002984:	2001      	movs	r0, #1
 8002986:	f7ff fed3 	bl	8002730 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 7;
 800298a:	2307      	movs	r3, #7
 800298c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800298e:	2300      	movs	r3, #0
 8002990:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8002992:	2363      	movs	r3, #99	; 0x63
 8002994:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800299a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029a4:	f001 f93e 	bl	8003c24 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 80029a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029ac:	f7ff fed8 	bl	8002760 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80029b0:	2100      	movs	r1, #0
 80029b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029b6:	f7ff ff91 	bl	80028dc <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80029ba:	2101      	movs	r1, #1
 80029bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029c0:	f7ff ff36 	bl	8002830 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80029c4:	2360      	movs	r3, #96	; 0x60
 80029c6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80029c8:	2300      	movs	r3, #0
 80029ca:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	461a      	mov	r2, r3
 80029de:	2101      	movs	r1, #1
 80029e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029e4:	f001 f9b6 	bl	8003d54 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80029e8:	2101      	movs	r1, #1
 80029ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029ee:	f7ff fec7 	bl	8002780 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 80029f2:	2110      	movs	r1, #16
 80029f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80029f8:	f7ff ff1a 	bl	8002830 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	461a      	mov	r2, r3
 8002a02:	2110      	movs	r1, #16
 8002a04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a08:	f001 f9a4 	bl	8003d54 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8002a0c:	2110      	movs	r1, #16
 8002a0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a12:	f7ff feb5 	bl	8002780 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002a16:	2100      	movs	r1, #0
 8002a18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a1c:	f7ff ff73 	bl	8002906 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002a20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002a24:	f7ff ff84 	bl	8002930 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002a28:	2001      	movs	r0, #1
 8002a2a:	f7ff fe69 	bl	8002700 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a32:	2302      	movs	r3, #2
 8002a34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4e:	f000 fd0b 	bl	8003468 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8002a52:	2302      	movs	r3, #2
 8002a54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002a56:	2302      	movs	r3, #2
 8002a58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a72:	f000 fcf9 	bl	8003468 <LL_GPIO_Init>

}
 8002a76:	bf00      	nop
 8002a78:	3750      	adds	r7, #80	; 0x50
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <LL_LPUART_Enable>:
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f043 0201 	orr.w	r2, r3, #1
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_LPUART_DisableFIFO>:
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	601a      	str	r2, [r3, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_LPUART_SetTXFIFOThreshold>:
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b089      	sub	sp, #36	; 0x24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3308      	adds	r3, #8
 8002acc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	e853 3f00 	ldrex	r3, [r3]
 8002ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	075b      	lsls	r3, r3, #29
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	61ba      	str	r2, [r7, #24]
 8002aec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	e841 2300 	strex	r3, r2, [r1]
 8002af6:	613b      	str	r3, [r7, #16]
   return(result);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e4      	bne.n	8002ac8 <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8002afe:	bf00      	nop
 8002b00:	bf00      	nop
 8002b02:	3724      	adds	r7, #36	; 0x24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_LPUART_SetRXFIFOThreshold>:
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3308      	adds	r3, #8
 8002b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	e853 3f00 	ldrex	r3, [r3]
 8002b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	065b      	lsls	r3, r3, #25
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3308      	adds	r3, #8
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	61ba      	str	r2, [r7, #24]
 8002b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6979      	ldr	r1, [r7, #20]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	613b      	str	r3, [r7, #16]
   return(result);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e4      	bne.n	8002b16 <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_LPUART_IsActiveFlag_TEACK>:
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b6e:	d101      	bne.n	8002b74 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_LPUART_IsActiveFlag_REACK>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b96:	d101      	bne.n	8002b9c <LL_LPUART_IsActiveFlag_REACK+0x1a>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <LL_LPUART_IsActiveFlag_REACK+0x1c>
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <LL_RCC_SetLPUARTClockSource>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002bb4:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <LL_RCC_SetLPUARTClockSource+0x28>)
 8002bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bbe:	4905      	ldr	r1, [pc, #20]	; (8002bd4 <LL_RCC_SetLPUARTClockSource+0x28>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <LL_AHB2_GRP1_EnableClock>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002be4:	4907      	ldr	r1, [pc, #28]	; (8002c04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40021000 	.word	0x40021000

08002c08 <LL_APB1_GRP2_EnableClock>:
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c14:	4907      	ldr	r1, [pc, #28]	; (8002c34 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002c1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4013      	ands	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c26:	68fb      	ldr	r3, [r7, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	40021000 	.word	0x40021000

08002c38 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08e      	sub	sp, #56	; 0x38
 8002c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	609a      	str	r2, [r3, #8]
 8002c4a:	60da      	str	r2, [r3, #12]
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	615a      	str	r2, [r3, #20]
 8002c50:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
 8002c60:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7ff ffa2 	bl	8002bac <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f7ff ffcd 	bl	8002c08 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f7ff ffb2 	bl	8002bd8 <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin;
 8002c74:	2304      	movs	r3, #4
 8002c76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8002c88:	230c      	movs	r3, #12
 8002c8a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LPUART1_TX_GPIO_Port, &GPIO_InitStruct);
 8002c8c:	1d3b      	adds	r3, r7, #4
 8002c8e:	4619      	mov	r1, r3
 8002c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c94:	f000 fbe8 	bl	8003468 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 8002c98:	2308      	movs	r3, #8
 8002c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8002cac:	230c      	movs	r3, #12
 8002cae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cb8:	f000 fbd6 	bl	8003468 <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 8002cc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002cc4:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8002cda:	f107 031c 	add.w	r3, r7, #28
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4811      	ldr	r0, [pc, #68]	; (8002d28 <MX_LPUART1_UART_Init+0xf0>)
 8002ce2:	f000 fcc9 	bl	8003678 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	480f      	ldr	r0, [pc, #60]	; (8002d28 <MX_LPUART1_UART_Init+0xf0>)
 8002cea:	f7ff fee8 	bl	8002abe <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8002cee:	2100      	movs	r1, #0
 8002cf0:	480d      	ldr	r0, [pc, #52]	; (8002d28 <MX_LPUART1_UART_Init+0xf0>)
 8002cf2:	f7ff ff0b 	bl	8002b0c <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8002cf6:	480c      	ldr	r0, [pc, #48]	; (8002d28 <MX_LPUART1_UART_Init+0xf0>)
 8002cf8:	f7ff fed1 	bl	8002a9e <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8002cfc:	480a      	ldr	r0, [pc, #40]	; (8002d28 <MX_LPUART1_UART_Init+0xf0>)
 8002cfe:	f7ff febe 	bl	8002a7e <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 8002d02:	bf00      	nop
 8002d04:	4808      	ldr	r0, [pc, #32]	; (8002d28 <MX_LPUART1_UART_Init+0xf0>)
 8002d06:	f7ff ff28 	bl	8002b5a <LL_LPUART_IsActiveFlag_TEACK>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f9      	beq.n	8002d04 <MX_LPUART1_UART_Init+0xcc>
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_LPUART1_UART_Init+0xf0>)
 8002d12:	f7ff ff36 	bl	8002b82 <LL_LPUART_IsActiveFlag_REACK>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f3      	beq.n	8002d04 <MX_LPUART1_UART_Init+0xcc>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d1c:	bf00      	nop
 8002d1e:	bf00      	nop
 8002d20:	3738      	adds	r7, #56	; 0x38
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40008000 	.word	0x40008000

08002d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d2c:	480d      	ldr	r0, [pc, #52]	; (8002d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d30:	f7ff fcd4 	bl	80026dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d34:	480c      	ldr	r0, [pc, #48]	; (8002d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d36:	490d      	ldr	r1, [pc, #52]	; (8002d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <LoopForever+0xe>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d3c:	e002      	b.n	8002d44 <LoopCopyDataInit>

08002d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d42:	3304      	adds	r3, #4

08002d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d48:	d3f9      	bcc.n	8002d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	; (8002d78 <LoopForever+0x16>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d50:	e001      	b.n	8002d56 <LoopFillZerobss>

08002d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d54:	3204      	adds	r2, #4

08002d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d58:	d3fb      	bcc.n	8002d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d5a:	f001 fb91 	bl	8004480 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d5e:	f7fe ffcf 	bl	8001d00 <main>

08002d62 <LoopForever>:

LoopForever:
    b LoopForever
 8002d62:	e7fe      	b.n	8002d62 <LoopForever>
  ldr   r0, =_estack
 8002d64:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d6c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002d70:	080073c4 	.word	0x080073c4
  ldr r2, =_sbss
 8002d74:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002d78:	20000210 	.word	0x20000210

08002d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC1_2_IRQHandler>
	...

08002d80 <LL_EXTI_EnableIT_0_31>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4904      	ldr	r1, [pc, #16]	; (8002da0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	600b      	str	r3, [r1, #0]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40010400 	.word	0x40010400

08002da4 <LL_EXTI_EnableIT_32_63>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002dae:	6a1a      	ldr	r2, [r3, #32]
 8002db0:	4904      	ldr	r1, [pc, #16]	; (8002dc4 <LL_EXTI_EnableIT_32_63+0x20>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	620b      	str	r3, [r1, #32]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <LL_EXTI_DisableIT_0_31>:
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <LL_EXTI_DisableIT_0_31+0x24>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	4904      	ldr	r1, [pc, #16]	; (8002dec <LL_EXTI_DisableIT_0_31+0x24>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40010400 	.word	0x40010400

08002df0 <LL_EXTI_DisableIT_32_63>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <LL_EXTI_DisableIT_32_63+0x24>)
 8002dfa:	6a1a      	ldr	r2, [r3, #32]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	4904      	ldr	r1, [pc, #16]	; (8002e14 <LL_EXTI_DisableIT_32_63+0x24>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	620b      	str	r3, [r1, #32]
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010400 	.word	0x40010400

08002e18 <LL_EXTI_EnableEvent_0_31>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4904      	ldr	r1, [pc, #16]	; (8002e38 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	604b      	str	r3, [r1, #4]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40010400 	.word	0x40010400

08002e3c <LL_EXTI_EnableEvent_32_63>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e48:	4904      	ldr	r1, [pc, #16]	; (8002e5c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40010400 	.word	0x40010400

08002e60 <LL_EXTI_DisableEvent_0_31>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002e68:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	4904      	ldr	r1, [pc, #16]	; (8002e84 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	40010400 	.word	0x40010400

08002e88 <LL_EXTI_DisableEvent_32_63>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <LL_EXTI_DisableEvent_32_63+0x24>)
 8002e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	43db      	mvns	r3, r3
 8002e98:	4904      	ldr	r1, [pc, #16]	; (8002eac <LL_EXTI_DisableEvent_32_63+0x24>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010400 	.word	0x40010400

08002eb0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002ede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee0:	4904      	ldr	r1, [pc, #16]	; (8002ef4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	4904      	ldr	r1, [pc, #16]	; (8002f1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40010400 	.word	0x40010400

08002f20 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002f28:	4b06      	ldr	r3, [pc, #24]	; (8002f44 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	4904      	ldr	r1, [pc, #16]	; (8002f44 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40010400 	.word	0x40010400

08002f48 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	4904      	ldr	r1, [pc, #16]	; (8002f68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60cb      	str	r3, [r1, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	40010400 	.word	0x40010400

08002f6c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f78:	4904      	ldr	r1, [pc, #16]	; (8002f8c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40010400 	.word	0x40010400

08002f90 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	4904      	ldr	r1, [pc, #16]	; (8002fb4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60cb      	str	r3, [r1, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002fc0:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	7a1b      	ldrb	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80d3 	beq.w	800319c <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d063      	beq.n	80030c6 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7a5b      	ldrb	r3, [r3, #9]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d01c      	beq.n	8003040 <LL_EXTI_Init+0x60>
 8003006:	2b02      	cmp	r3, #2
 8003008:	dc25      	bgt.n	8003056 <LL_EXTI_Init+0x76>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <LL_EXTI_Init+0x34>
 800300e:	2b01      	cmp	r3, #1
 8003010:	d00b      	beq.n	800302a <LL_EXTI_Init+0x4a>
 8003012:	e020      	b.n	8003056 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff21 	bl	8002e60 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff feac 	bl	8002d80 <LL_EXTI_EnableIT_0_31>
          break;
 8003028:	e018      	b.n	800305c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff feca 	bl	8002dc8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff feed 	bl	8002e18 <LL_EXTI_EnableEvent_0_31>
          break;
 800303e:	e00d      	b.n	800305c <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fe9b 	bl	8002d80 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fee2 	bl	8002e18 <LL_EXTI_EnableEvent_0_31>
          break;
 8003054:	e002      	b.n	800305c <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8003056:	2301      	movs	r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
          break;
 800305a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7a9b      	ldrb	r3, [r3, #10]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d030      	beq.n	80030c6 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7a9b      	ldrb	r3, [r3, #10]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d01c      	beq.n	80030a6 <LL_EXTI_Init+0xc6>
 800306c:	2b03      	cmp	r3, #3
 800306e:	dc25      	bgt.n	80030bc <LL_EXTI_Init+0xdc>
 8003070:	2b01      	cmp	r3, #1
 8003072:	d002      	beq.n	800307a <LL_EXTI_Init+0x9a>
 8003074:	2b02      	cmp	r3, #2
 8003076:	d00b      	beq.n	8003090 <LL_EXTI_Init+0xb0>
 8003078:	e020      	b.n	80030bc <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff ff86 	bl	8002f90 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff11 	bl	8002eb0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800308e:	e01b      	b.n	80030c8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff2f 	bl	8002ef8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff52 	bl	8002f48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80030a4:	e010      	b.n	80030c8 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff00 	bl	8002eb0 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff47 	bl	8002f48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80030ba:	e005      	b.n	80030c8 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	60fb      	str	r3, [r7, #12]
            break;
 80030c4:	e000      	b.n	80030c8 <LL_EXTI_Init+0xe8>
        }
      }
 80030c6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07a      	beq.n	80031c6 <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7a5b      	ldrb	r3, [r3, #9]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d01c      	beq.n	8003112 <LL_EXTI_Init+0x132>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	dc25      	bgt.n	8003128 <LL_EXTI_Init+0x148>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <LL_EXTI_Init+0x106>
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d00b      	beq.n	80030fc <LL_EXTI_Init+0x11c>
 80030e4:	e020      	b.n	8003128 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fecc 	bl	8002e88 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe55 	bl	8002da4 <LL_EXTI_EnableIT_32_63>
          break;
 80030fa:	e01a      	b.n	8003132 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fe75 	bl	8002df0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff fe96 	bl	8002e3c <LL_EXTI_EnableEvent_32_63>
          break;
 8003110:	e00f      	b.n	8003132 <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fe44 	bl	8002da4 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe8b 	bl	8002e3c <LL_EXTI_EnableEvent_32_63>
          break;
 8003126:	e004      	b.n	8003132 <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
          break;
 8003130:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	7a9b      	ldrb	r3, [r3, #10]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d045      	beq.n	80031c6 <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	7a9b      	ldrb	r3, [r3, #10]
 800313e:	2b03      	cmp	r3, #3
 8003140:	d01c      	beq.n	800317c <LL_EXTI_Init+0x19c>
 8003142:	2b03      	cmp	r3, #3
 8003144:	dc25      	bgt.n	8003192 <LL_EXTI_Init+0x1b2>
 8003146:	2b01      	cmp	r3, #1
 8003148:	d002      	beq.n	8003150 <LL_EXTI_Init+0x170>
 800314a:	2b02      	cmp	r3, #2
 800314c:	d00b      	beq.n	8003166 <LL_EXTI_Init+0x186>
 800314e:	e020      	b.n	8003192 <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff2f 	bl	8002fb8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff feb8 	bl	8002ed4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8003164:	e030      	b.n	80031c8 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fed8 	bl	8002f20 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fef9 	bl	8002f6c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800317a:	e025      	b.n	80031c8 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fea7 	bl	8002ed4 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff feee 	bl	8002f6c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8003190:	e01a      	b.n	80031c8 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f043 0305 	orr.w	r3, r3, #5
 8003198:	60fb      	str	r3, [r7, #12]
            break;
 800319a:	e015      	b.n	80031c8 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7ff fe11 	bl	8002dc8 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff fe58 	bl	8002e60 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fe1b 	bl	8002df0 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fe62 	bl	8002e88 <LL_EXTI_DisableEvent_32_63>
 80031c4:	e000      	b.n	80031c8 <LL_EXTI_Init+0x1e8>
      }
 80031c6:	bf00      	nop
  }

  return status;
 80031c8:	68fb      	ldr	r3, [r7, #12]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <LL_GPIO_SetPinMode>:
{
 80031d2:	b480      	push	{r7}
 80031d4:	b08b      	sub	sp, #44	; 0x2c
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	60b9      	str	r1, [r7, #8]
 80031dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	613b      	str	r3, [r7, #16]
  return result;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2103      	movs	r1, #3
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	401a      	ands	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	fa93 f3a3 	rbit	r3, r3
 800321a:	61fb      	str	r3, [r7, #28]
  return result;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003226:	2320      	movs	r3, #32
 8003228:	e003      	b.n	8003232 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	b2db      	uxtb	r3, r3
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	372c      	adds	r7, #44	; 0x2c
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_GPIO_SetPinOutputType>:
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	43db      	mvns	r3, r3
 8003260:	401a      	ands	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	431a      	orrs	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	605a      	str	r2, [r3, #4]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <LL_GPIO_SetPinSpeed>:
{
 800327c:	b480      	push	{r7}
 800327e:	b08b      	sub	sp, #44	; 0x2c
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa93 f3a3 	rbit	r3, r3
 8003296:	613b      	str	r3, [r7, #16]
  return result;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e003      	b.n	80032ae <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2103      	movs	r1, #3
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	401a      	ands	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	61fb      	str	r3, [r7, #28]
  return result;
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80032d0:	2320      	movs	r3, #32
 80032d2:	e003      	b.n	80032dc <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	fa01 f303 	lsl.w	r3, r1, r3
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	609a      	str	r2, [r3, #8]
}
 80032ea:	bf00      	nop
 80032ec:	372c      	adds	r7, #44	; 0x2c
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <LL_GPIO_SetPinPull>:
{
 80032f6:	b480      	push	{r7}
 80032f8:	b08b      	sub	sp, #44	; 0x2c
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	613b      	str	r3, [r7, #16]
  return result;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2103      	movs	r1, #3
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	fa93 f3a3 	rbit	r3, r3
 800333e:	61fb      	str	r3, [r7, #28]
  return result;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800334a:	2320      	movs	r3, #32
 800334c:	e003      	b.n	8003356 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	431a      	orrs	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	60da      	str	r2, [r3, #12]
}
 8003364:	bf00      	nop
 8003366:	372c      	adds	r7, #44	; 0x2c
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_GPIO_SetAFPin_0_7>:
{
 8003370:	b480      	push	{r7}
 8003372:	b08b      	sub	sp, #44	; 0x2c
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	613b      	str	r3, [r7, #16]
  return result;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e003      	b.n	80033a2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	fab3 f383 	clz	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	210f      	movs	r1, #15
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	401a      	ands	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	fa93 f3a3 	rbit	r3, r3
 80033b8:	61fb      	str	r3, [r7, #28]
  return result;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80033c4:	2320      	movs	r3, #32
 80033c6:	e003      	b.n	80033d0 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	fab3 f383 	clz	r3, r3
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
}
 80033de:	bf00      	nop
 80033e0:	372c      	adds	r7, #44	; 0x2c
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_GPIO_SetAFPin_8_15>:
{
 80033ea:	b480      	push	{r7}
 80033ec:	b08b      	sub	sp, #44	; 0x2c
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	613b      	str	r3, [r7, #16]
  return result;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003412:	2320      	movs	r3, #32
 8003414:	e003      	b.n	800341e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	210f      	movs	r1, #15
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	61fb      	str	r3, [r7, #28]
  return result;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	431a      	orrs	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800345c:	bf00      	nop
 800345e:	372c      	adds	r7, #44	; 0x2c
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b088      	sub	sp, #32
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	60fb      	str	r3, [r7, #12]
  return result;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <LL_GPIO_Init+0x26>
    return 32U;
 800348a:	2320      	movs	r3, #32
 800348c:	e003      	b.n	8003496 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fab3 f383 	clz	r3, r3
 8003494:	b2db      	uxtb	r3, r3
 8003496:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003498:	e048      	b.n	800352c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	2101      	movs	r1, #1
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	fa01 f303 	lsl.w	r3, r1, r3
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03a      	beq.n	8003526 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d003      	beq.n	80034c0 <LL_GPIO_Init+0x58>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d10e      	bne.n	80034de <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	461a      	mov	r2, r3
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fed7 	bl	800327c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6819      	ldr	r1, [r3, #0]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	461a      	mov	r2, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff feb7 	bl	800324c <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	461a      	mov	r2, r3
 80034e4:	69b9      	ldr	r1, [r7, #24]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ff05 	bl	80032f6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d111      	bne.n	8003518 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2bff      	cmp	r3, #255	; 0xff
 80034f8:	d807      	bhi.n	800350a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	461a      	mov	r2, r3
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7ff ff34 	bl	8003370 <LL_GPIO_SetAFPin_0_7>
 8003508:	e006      	b.n	8003518 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	461a      	mov	r2, r3
 8003510:	69b9      	ldr	r1, [r7, #24]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ff69 	bl	80033ea <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	461a      	mov	r2, r3
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f7ff fe56 	bl	80031d2 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3301      	adds	r3, #1
 800352a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	fa22 f303 	lsr.w	r3, r2, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1af      	bne.n	800349a <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3720      	adds	r7, #32
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <LL_LPUART_IsEnabled>:
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <LL_LPUART_IsEnabled+0x18>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <LL_LPUART_IsEnabled+0x1a>
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_LPUART_SetPrescaler>:
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f023 030f 	bic.w	r3, r3, #15
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b292      	uxth	r2, r2
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_LPUART_SetStopBitsLength>:
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	605a      	str	r2, [r3, #4]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_LPUART_SetHWFlowCtrl>:
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	609a      	str	r2, [r3, #8]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <LL_LPUART_SetBaudRate>:
{
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b088      	sub	sp, #32
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	61f8      	str	r0, [r7, #28]
 80035ea:	61b9      	str	r1, [r7, #24]
 80035ec:	617a      	str	r2, [r7, #20]
 80035ee:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d039      	beq.n	800366a <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2200      	movs	r2, #0
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	60fa      	str	r2, [r7, #12]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	b29b      	uxth	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	4b1b      	ldr	r3, [pc, #108]	; (8003674 <LL_LPUART_SetBaudRate+0x94>)
 8003606:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800360a:	b29b      	uxth	r3, r3
 800360c:	2200      	movs	r2, #0
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003616:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800361a:	f7fd faed 	bl	8000bf8 <__aeabi_uldivmod>
 800361e:	4602      	mov	r2, r0
 8003620:	460b      	mov	r3, r1
 8003622:	4610      	mov	r0, r2
 8003624:	4619      	mov	r1, r3
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	020b      	lsls	r3, r1, #8
 8003630:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003634:	0202      	lsls	r2, r0, #8
 8003636:	6939      	ldr	r1, [r7, #16]
 8003638:	0849      	lsrs	r1, r1, #1
 800363a:	2000      	movs	r0, #0
 800363c:	460c      	mov	r4, r1
 800363e:	4605      	mov	r5, r0
 8003640:	eb12 0804 	adds.w	r8, r2, r4
 8003644:	eb43 0905 	adc.w	r9, r3, r5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2200      	movs	r2, #0
 800364c:	469a      	mov	sl, r3
 800364e:	4693      	mov	fp, r2
 8003650:	4652      	mov	r2, sl
 8003652:	465b      	mov	r3, fp
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fd face 	bl	8000bf8 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	60da      	str	r2, [r3, #12]
}
 800366a:	bf00      	nop
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003674:	08006fc4 	.word	0x08006fc4

08003678 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ff5c 	bl	8003544 <LL_LPUART_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d136      	bne.n	8003700 <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <LL_LPUART_Init+0x94>)
 8003698:	4013      	ands	r3, r2
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	6891      	ldr	r1, [r2, #8]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	6912      	ldr	r2, [r2, #16]
 80036a2:	4311      	orrs	r1, r2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	6952      	ldr	r2, [r2, #20]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4619      	mov	r1, r3
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ff6b 	bl	8003592 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	4619      	mov	r1, r3
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7ff ff78 	bl	80035b8 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 80036c8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80036cc:	f000 f8bc 	bl	8003848 <LL_RCC_GetLPUARTClockFreq>
 80036d0:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00d      	beq.n	80036f4 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d009      	beq.n	80036f4 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff ff76 	bl	80035e0 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff35 	bl	800356a <LL_LPUART_SetPrescaler>
  }

  return (status);
 8003700:	7bfb      	ldrb	r3, [r7, #15]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	efffe9f3 	.word	0xefffe9f3

08003710 <LL_RCC_HSI_IsReady>:
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <LL_RCC_HSI_IsReady+0x24>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d101      	bne.n	8003726 <LL_RCC_HSI_IsReady+0x16>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_RCC_HSI_IsReady+0x18>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000

08003738 <LL_RCC_LSE_IsReady>:
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800373c:	4b07      	ldr	r3, [pc, #28]	; (800375c <LL_RCC_LSE_IsReady+0x24>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d101      	bne.n	800374e <LL_RCC_LSE_IsReady+0x16>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <LL_RCC_LSE_IsReady+0x18>
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000

08003760 <LL_RCC_GetSysClkSource>:
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <LL_RCC_GetSysClkSource+0x18>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <LL_RCC_GetAHBPrescaler>:
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <LL_RCC_GetAHBPrescaler+0x18>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000

08003798 <LL_RCC_GetAPB1Prescaler>:
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <LL_RCC_GetLPUARTClockSource>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <LL_RCC_GetLPUARTClockSource+0x20>)
 80037be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4013      	ands	r3, r2
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000

080037d8 <LL_RCC_PLL_GetMainSource>:
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <LL_RCC_PLL_GetMainSource+0x18>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0303 	and.w	r3, r3, #3
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000

080037f4 <LL_RCC_PLL_GetN>:
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80037f8:	4b04      	ldr	r3, [pc, #16]	; (800380c <LL_RCC_PLL_GetN+0x18>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003802:	4618      	mov	r0, r3
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr
 800380c:	40021000 	.word	0x40021000

08003810 <LL_RCC_PLL_GetR>:
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <LL_RCC_PLL_GetR+0x18>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800381c:	4618      	mov	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000

0800382c <LL_RCC_PLL_GetDivider>:
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <LL_RCC_PLL_GetDivider+0x18>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003838:	4618      	mov	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40021000 	.word	0x40021000

08003848 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ffad 	bl	80037b4 <LL_RCC_GetLPUARTClockSource>
 800385a:	4603      	mov	r3, r0
 800385c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003860:	d015      	beq.n	800388e <LL_RCC_GetLPUARTClockFreq+0x46>
 8003862:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003866:	d81b      	bhi.n	80038a0 <LL_RCC_GetLPUARTClockFreq+0x58>
 8003868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386c:	d003      	beq.n	8003876 <LL_RCC_GetLPUARTClockFreq+0x2e>
 800386e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003872:	d004      	beq.n	800387e <LL_RCC_GetLPUARTClockFreq+0x36>
 8003874:	e014      	b.n	80038a0 <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 8003876:	f000 f829 	bl	80038cc <RCC_GetSystemClockFreq>
 800387a:	60f8      	str	r0, [r7, #12]
      break;
 800387c:	e01f      	b.n	80038be <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 800387e:	f7ff ff47 	bl	8003710 <LL_RCC_HSI_IsReady>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <LL_RCC_GetLPUARTClockFreq+0x80>)
 800388a:	60fb      	str	r3, [r7, #12]
      }
      break;
 800388c:	e014      	b.n	80038b8 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 800388e:	f7ff ff53 	bl	8003738 <LL_RCC_LSE_IsReady>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d011      	beq.n	80038bc <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 8003898:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800389e:	e00d      	b.n	80038bc <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80038a0:	f000 f814 	bl	80038cc <RCC_GetSystemClockFreq>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f836 	bl	8003918 <RCC_GetHCLKClockFreq>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 f84a 	bl	8003948 <RCC_GetPCLK1ClockFreq>
 80038b4:	60f8      	str	r0, [r7, #12]
      break;
 80038b6:	e002      	b.n	80038be <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 80038bc:	bf00      	nop
  }

  return lpuart_frequency;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	00f42400 	.word	0x00f42400

080038cc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80038d2:	f7ff ff45 	bl	8003760 <LL_RCC_GetSysClkSource>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d00c      	beq.n	80038f6 <RCC_GetSystemClockFreq+0x2a>
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d80e      	bhi.n	80038fe <RCC_GetSystemClockFreq+0x32>
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d002      	beq.n	80038ea <RCC_GetSystemClockFreq+0x1e>
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d003      	beq.n	80038f0 <RCC_GetSystemClockFreq+0x24>
 80038e8:	e009      	b.n	80038fe <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <RCC_GetSystemClockFreq+0x44>)
 80038ec:	607b      	str	r3, [r7, #4]
      break;
 80038ee:	e009      	b.n	8003904 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <RCC_GetSystemClockFreq+0x48>)
 80038f2:	607b      	str	r3, [r7, #4]
      break;
 80038f4:	e006      	b.n	8003904 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80038f6:	f000 f83d 	bl	8003974 <RCC_PLL_GetFreqDomain_SYS>
 80038fa:	6078      	str	r0, [r7, #4]
      break;
 80038fc:	e002      	b.n	8003904 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 80038fe:	4b04      	ldr	r3, [pc, #16]	; (8003910 <RCC_GetSystemClockFreq+0x44>)
 8003900:	607b      	str	r3, [r7, #4]
      break;
 8003902:	bf00      	nop
  }

  return frequency;
 8003904:	687b      	ldr	r3, [r7, #4]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	00f42400 	.word	0x00f42400
 8003914:	00989680 	.word	0x00989680

08003918 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003920:	f7ff ff2c 	bl	800377c <LL_RCC_GetAHBPrescaler>
 8003924:	4603      	mov	r3, r0
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	4a05      	ldr	r2, [pc, #20]	; (8003944 <RCC_GetHCLKClockFreq+0x2c>)
 800392e:	5cd3      	ldrb	r3, [r2, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	08006f94 	.word	0x08006f94

08003948 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003950:	f7ff ff22 	bl	8003798 <LL_RCC_GetAPB1Prescaler>
 8003954:	4603      	mov	r3, r0
 8003956:	0a1b      	lsrs	r3, r3, #8
 8003958:	4a05      	ldr	r2, [pc, #20]	; (8003970 <RCC_GetPCLK1ClockFreq+0x28>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	08006fa4 	.word	0x08006fa4

08003974 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800397a:	f7ff ff2d 	bl	80037d8 <LL_RCC_PLL_GetMainSource>
 800397e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d003      	beq.n	800398e <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b03      	cmp	r3, #3
 800398a:	d003      	beq.n	8003994 <RCC_PLL_GetFreqDomain_SYS+0x20>
 800398c:	e005      	b.n	800399a <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8003990:	607b      	str	r3, [r7, #4]
      break;
 8003992:	e005      	b.n	80039a0 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003994:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003996:	607b      	str	r3, [r7, #4]
      break;
 8003998:	e002      	b.n	80039a0 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800399c:	607b      	str	r3, [r7, #4]
      break;
 800399e:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80039a0:	f7ff ff28 	bl	80037f4 <LL_RCC_PLL_GetN>
 80039a4:	4602      	mov	r2, r0
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fb03 f402 	mul.w	r4, r3, r2
 80039ac:	f7ff ff3e 	bl	800382c <LL_RCC_PLL_GetDivider>
 80039b0:	4603      	mov	r3, r0
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	3301      	adds	r3, #1
 80039b6:	fbb4 f4f3 	udiv	r4, r4, r3
 80039ba:	f7ff ff29 	bl	8003810 <LL_RCC_PLL_GetR>
 80039be:	4603      	mov	r3, r0
 80039c0:	0e5b      	lsrs	r3, r3, #25
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd90      	pop	{r4, r7, pc}
 80039d2:	bf00      	nop
 80039d4:	00f42400 	.word	0x00f42400
 80039d8:	00989680 	.word	0x00989680

080039dc <LL_SPI_IsEnabled>:
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d101      	bne.n	80039f4 <LL_SPI_IsEnabled+0x18>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <LL_SPI_IsEnabled+0x1a>
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_SPI_SetRxFIFOThreshold>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
 8003a0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	605a      	str	r2, [r3, #4]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_SPI_SetCRCPolynomial>:
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	611a      	str	r2, [r3, #16]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7ff ffc0 	bl	80039dc <LL_SPI_IsEnabled>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d145      	bne.n	8003aee <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a6a:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	6811      	ldr	r1, [r2, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	6852      	ldr	r2, [r2, #4]
 8003a76:	4311      	orrs	r1, r2
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	68d2      	ldr	r2, [r2, #12]
 8003a7c:	4311      	orrs	r1, r2
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	6912      	ldr	r2, [r2, #16]
 8003a82:	4311      	orrs	r1, r2
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	6952      	ldr	r2, [r2, #20]
 8003a88:	4311      	orrs	r1, r2
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	6992      	ldr	r2, [r2, #24]
 8003a8e:	4311      	orrs	r1, r2
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	69d2      	ldr	r2, [r2, #28]
 8003a94:	4311      	orrs	r1, r2
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	6a12      	ldr	r2, [r2, #32]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003aaa:	f023 0304 	bic.w	r3, r3, #4
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	6891      	ldr	r1, [r2, #8]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	6952      	ldr	r2, [r2, #20]
 8003ab6:	0c12      	lsrs	r2, r2, #16
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac8:	d204      	bcs.n	8003ad4 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8003aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ff97 	bl	8003a02 <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003adc:	d105      	bne.n	8003aea <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff ff9f 	bl	8003a28 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <LL_TIM_SetPrescaler>:
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_TIM_SetAutoReload>:
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_TIM_SetRepetitionCounter>:
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_TIM_OC_SetCompareCH1>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_TIM_OC_SetCompareCH2>:
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_TIM_OC_SetCompareCH3>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_TIM_OC_SetCompareCH4>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <LL_TIM_OC_SetCompareCH5>:
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	649a      	str	r2, [r3, #72]	; 0x48
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_TIM_OC_SetCompareCH6>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	f043 0201 	orr.w	r2, r3, #1
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	615a      	str	r2, [r3, #20]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <LL_TIM_Init+0x110>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <LL_TIM_Init+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d00f      	beq.n	8003c64 <LL_TIM_Init+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3c      	ldr	r2, [pc, #240]	; (8003d38 <LL_TIM_Init+0x114>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <LL_TIM_Init+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3b      	ldr	r2, [pc, #236]	; (8003d3c <LL_TIM_Init+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <LL_TIM_Init+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <LL_TIM_Init+0x11c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <LL_TIM_Init+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a39      	ldr	r2, [pc, #228]	; (8003d44 <LL_TIM_Init+0x120>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d106      	bne.n	8003c72 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a2f      	ldr	r2, [pc, #188]	; (8003d34 <LL_TIM_Init+0x110>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01f      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c80:	d01b      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a2c      	ldr	r2, [pc, #176]	; (8003d38 <LL_TIM_Init+0x114>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d017      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2b      	ldr	r2, [pc, #172]	; (8003d3c <LL_TIM_Init+0x118>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <LL_TIM_Init+0x11c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00f      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2a      	ldr	r2, [pc, #168]	; (8003d48 <LL_TIM_Init+0x124>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <LL_TIM_Init+0x128>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d007      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a28      	ldr	r2, [pc, #160]	; (8003d50 <LL_TIM_Init+0x12c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d003      	beq.n	8003cba <LL_TIM_Init+0x96>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <LL_TIM_Init+0x120>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d106      	bne.n	8003cc8 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff23 	bl	8003b20 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff0f 	bl	8003b04 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a12      	ldr	r2, [pc, #72]	; (8003d34 <LL_TIM_Init+0x110>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <LL_TIM_Init+0xf2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a13      	ldr	r2, [pc, #76]	; (8003d40 <LL_TIM_Init+0x11c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00f      	beq.n	8003d16 <LL_TIM_Init+0xf2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a13      	ldr	r2, [pc, #76]	; (8003d48 <LL_TIM_Init+0x124>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00b      	beq.n	8003d16 <LL_TIM_Init+0xf2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a12      	ldr	r2, [pc, #72]	; (8003d4c <LL_TIM_Init+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <LL_TIM_Init+0xf2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <LL_TIM_Init+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <LL_TIM_Init+0xf2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <LL_TIM_Init+0x120>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d105      	bne.n	8003d22 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff0d 	bl	8003b3c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ff6e 	bl	8003c04 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40000400 	.word	0x40000400
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40013400 	.word	0x40013400
 8003d44:	40015000 	.word	0x40015000
 8003d48:	40014000 	.word	0x40014000
 8003d4c:	40014400 	.word	0x40014400
 8003d50:	40014800 	.word	0x40014800

08003d54 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6a:	d045      	beq.n	8003df8 <LL_TIM_OC_Init+0xa4>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d72:	d848      	bhi.n	8003e06 <LL_TIM_OC_Init+0xb2>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7a:	d036      	beq.n	8003dea <LL_TIM_OC_Init+0x96>
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d82:	d840      	bhi.n	8003e06 <LL_TIM_OC_Init+0xb2>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d8a:	d027      	beq.n	8003ddc <LL_TIM_OC_Init+0x88>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d838      	bhi.n	8003e06 <LL_TIM_OC_Init+0xb2>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d9a:	d018      	beq.n	8003dce <LL_TIM_OC_Init+0x7a>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da2:	d830      	bhi.n	8003e06 <LL_TIM_OC_Init+0xb2>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d003      	beq.n	8003db2 <LL_TIM_OC_Init+0x5e>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d007      	beq.n	8003dc0 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8003db0:	e029      	b.n	8003e06 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f82d 	bl	8003e14 <OC1Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbe:	e023      	b.n	8003e08 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f8ac 	bl	8003f20 <OC2Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e01c      	b.n	8003e08 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f92f 	bl	8004034 <OC3Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8003dda:	e015      	b.n	8003e08 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 f9b2 	bl	8004148 <OC4Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	75fb      	strb	r3, [r7, #23]
      break;
 8003de8:	e00e      	b.n	8003e08 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fa35 	bl	800425c <OC5Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]
      break;
 8003df6:	e007      	b.n	8003e08 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fa98 	bl	8004330 <OC6Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	e000      	b.n	8003e08 <LL_TIM_OC_Init+0xb4>
      break;
 8003e06:	bf00      	nop
  }

  return result;
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0303 	bic.w	r3, r3, #3
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	6812      	ldr	r2, [r2, #0]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f023 0202 	bic.w	r2, r3, #2
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0201 	bic.w	r2, r3, #1
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <OC1Config+0xf4>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d013      	beq.n	8003ea2 <OC1Config+0x8e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a23      	ldr	r2, [pc, #140]	; (8003f0c <OC1Config+0xf8>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00f      	beq.n	8003ea2 <OC1Config+0x8e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <OC1Config+0xfc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00b      	beq.n	8003ea2 <OC1Config+0x8e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a21      	ldr	r2, [pc, #132]	; (8003f14 <OC1Config+0x100>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <OC1Config+0x8e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a20      	ldr	r2, [pc, #128]	; (8003f18 <OC1Config+0x104>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d003      	beq.n	8003ea2 <OC1Config+0x8e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <OC1Config+0x108>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d11e      	bne.n	8003ee0 <OC1Config+0xcc>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0208 	bic.w	r2, r3, #8
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f023 0204 	bic.w	r2, r3, #4
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4313      	orrs	r3, r2
 8003ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fe30 	bl	8003b58 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	40014000 	.word	0x40014000
 8003f14:	40014400 	.word	0x40014400
 8003f18:	40014800 	.word	0x40014800
 8003f1c:	40015000 	.word	0x40015000

08003f20 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0210 	bic.w	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	0212      	lsls	r2, r2, #8
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f023 0220 	bic.w	r2, r3, #32
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0210 	bic.w	r2, r3, #16
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	4313      	orrs	r3, r2
 8003f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	4a25      	ldr	r2, [pc, #148]	; (800401c <OC2Config+0xfc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <OC2Config+0x94>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a24      	ldr	r2, [pc, #144]	; (8004020 <OC2Config+0x100>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00f      	beq.n	8003fb4 <OC2Config+0x94>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a23      	ldr	r2, [pc, #140]	; (8004024 <OC2Config+0x104>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00b      	beq.n	8003fb4 <OC2Config+0x94>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a22      	ldr	r2, [pc, #136]	; (8004028 <OC2Config+0x108>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d007      	beq.n	8003fb4 <OC2Config+0x94>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a21      	ldr	r2, [pc, #132]	; (800402c <OC2Config+0x10c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <OC2Config+0x94>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a20      	ldr	r2, [pc, #128]	; (8004030 <OC2Config+0x110>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d11f      	bne.n	8003ff4 <OC2Config+0xd4>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	019b      	lsls	r3, r3, #6
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	019b      	lsls	r3, r3, #6
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7ff fdb4 	bl	8003b74 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40013400 	.word	0x40013400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800
 8004030:	40015000 	.word	0x40015000

08004034 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69db      	ldr	r3, [r3, #28]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800406a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a25      	ldr	r2, [pc, #148]	; (8004130 <OC3Config+0xfc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d013      	beq.n	80040c6 <OC3Config+0x92>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a24      	ldr	r2, [pc, #144]	; (8004134 <OC3Config+0x100>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00f      	beq.n	80040c6 <OC3Config+0x92>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a23      	ldr	r2, [pc, #140]	; (8004138 <OC3Config+0x104>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00b      	beq.n	80040c6 <OC3Config+0x92>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a22      	ldr	r2, [pc, #136]	; (800413c <OC3Config+0x108>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d007      	beq.n	80040c6 <OC3Config+0x92>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <OC3Config+0x10c>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <OC3Config+0x92>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a20      	ldr	r2, [pc, #128]	; (8004144 <OC3Config+0x110>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d11f      	bne.n	8004106 <OC3Config+0xd2>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	029b      	lsls	r3, r3, #10
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	015b      	lsls	r3, r3, #5
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fd39 	bl	8003b90 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40013400 	.word	0x40013400
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800
 8004144:	40015000 	.word	0x40015000

08004148 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b086      	sub	sp, #24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800417e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	0212      	lsls	r2, r2, #8
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	031b      	lsls	r3, r3, #12
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	031b      	lsls	r3, r3, #12
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a25      	ldr	r2, [pc, #148]	; (8004244 <OC4Config+0xfc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <OC4Config+0x94>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a24      	ldr	r2, [pc, #144]	; (8004248 <OC4Config+0x100>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00f      	beq.n	80041dc <OC4Config+0x94>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a23      	ldr	r2, [pc, #140]	; (800424c <OC4Config+0x104>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <OC4Config+0x94>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a22      	ldr	r2, [pc, #136]	; (8004250 <OC4Config+0x108>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <OC4Config+0x94>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a21      	ldr	r2, [pc, #132]	; (8004254 <OC4Config+0x10c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <OC4Config+0x94>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a20      	ldr	r2, [pc, #128]	; (8004258 <OC4Config+0x110>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d11f      	bne.n	800421c <OC4Config+0xd4>
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	039b      	lsls	r3, r3, #14
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	039b      	lsls	r3, r3, #14
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	019b      	lsls	r3, r3, #6
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	01db      	lsls	r3, r3, #7
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fcbc 	bl	8003bac <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800
 8004258:	40015000 	.word	0x40015000

0800425c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800427c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	4313      	orrs	r3, r2
 800428e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a19      	ldr	r2, [pc, #100]	; (8004318 <OC5Config+0xbc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <OC5Config+0x84>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <OC5Config+0xc0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d00f      	beq.n	80042e0 <OC5Config+0x84>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <OC5Config+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d00b      	beq.n	80042e0 <OC5Config+0x84>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <OC5Config+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d007      	beq.n	80042e0 <OC5Config+0x84>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <OC5Config+0xcc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d003      	beq.n	80042e0 <OC5Config+0x84>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a14      	ldr	r2, [pc, #80]	; (800432c <OC5Config+0xd0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d109      	bne.n	80042f4 <OC5Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	021b      	lsls	r3, r3, #8
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff fc61 	bl	8003bc8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00
 800431c:	40013400 	.word	0x40013400
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800
 800432c:	40015000 	.word	0x40015000

08004330 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004358:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	6812      	ldr	r2, [r2, #0]
 8004360:	0212      	lsls	r2, r2, #8
 8004362:	4313      	orrs	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	051b      	lsls	r3, r3, #20
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	051b      	lsls	r3, r3, #20
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a18      	ldr	r2, [pc, #96]	; (80043ec <OC6Config+0xbc>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <OC6Config+0x86>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a17      	ldr	r2, [pc, #92]	; (80043f0 <OC6Config+0xc0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00f      	beq.n	80043b6 <OC6Config+0x86>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a16      	ldr	r2, [pc, #88]	; (80043f4 <OC6Config+0xc4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d00b      	beq.n	80043b6 <OC6Config+0x86>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a15      	ldr	r2, [pc, #84]	; (80043f8 <OC6Config+0xc8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d007      	beq.n	80043b6 <OC6Config+0x86>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a14      	ldr	r2, [pc, #80]	; (80043fc <OC6Config+0xcc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <OC6Config+0x86>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a13      	ldr	r2, [pc, #76]	; (8004400 <OC6Config+0xd0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d109      	bne.n	80043ca <OC6Config+0x9a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	029b      	lsls	r3, r3, #10
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fc06 	bl	8003be8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40013400 	.word	0x40013400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40014400 	.word	0x40014400
 80043fc:	40014800 	.word	0x40014800
 8004400:	40015000 	.word	0x40015000

08004404 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	4a07      	ldr	r2, [pc, #28]	; (8004434 <LL_InitTick+0x30>)
 8004418:	3b01      	subs	r3, #1
 800441a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800441c:	4b05      	ldr	r3, [pc, #20]	; (8004434 <LL_InitTick+0x30>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004422:	4b04      	ldr	r3, [pc, #16]	; (8004434 <LL_InitTick+0x30>)
 8004424:	2205      	movs	r2, #5
 8004426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	e000e010 	.word	0xe000e010

08004438 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004440:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff ffdd 	bl	8004404 <LL_InitTick>
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800445c:	4a04      	ldr	r2, [pc, #16]	; (8004470 <LL_SetSystemCoreClock+0x1c>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000000 	.word	0x20000000

08004474 <__errno>:
 8004474:	4b01      	ldr	r3, [pc, #4]	; (800447c <__errno+0x8>)
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000004 	.word	0x20000004

08004480 <__libc_init_array>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4d0d      	ldr	r5, [pc, #52]	; (80044b8 <__libc_init_array+0x38>)
 8004484:	4c0d      	ldr	r4, [pc, #52]	; (80044bc <__libc_init_array+0x3c>)
 8004486:	1b64      	subs	r4, r4, r5
 8004488:	10a4      	asrs	r4, r4, #2
 800448a:	2600      	movs	r6, #0
 800448c:	42a6      	cmp	r6, r4
 800448e:	d109      	bne.n	80044a4 <__libc_init_array+0x24>
 8004490:	4d0b      	ldr	r5, [pc, #44]	; (80044c0 <__libc_init_array+0x40>)
 8004492:	4c0c      	ldr	r4, [pc, #48]	; (80044c4 <__libc_init_array+0x44>)
 8004494:	f002 fd50 	bl	8006f38 <_init>
 8004498:	1b64      	subs	r4, r4, r5
 800449a:	10a4      	asrs	r4, r4, #2
 800449c:	2600      	movs	r6, #0
 800449e:	42a6      	cmp	r6, r4
 80044a0:	d105      	bne.n	80044ae <__libc_init_array+0x2e>
 80044a2:	bd70      	pop	{r4, r5, r6, pc}
 80044a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044a8:	4798      	blx	r3
 80044aa:	3601      	adds	r6, #1
 80044ac:	e7ee      	b.n	800448c <__libc_init_array+0xc>
 80044ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b2:	4798      	blx	r3
 80044b4:	3601      	adds	r6, #1
 80044b6:	e7f2      	b.n	800449e <__libc_init_array+0x1e>
 80044b8:	080073bc 	.word	0x080073bc
 80044bc:	080073bc 	.word	0x080073bc
 80044c0:	080073bc 	.word	0x080073bc
 80044c4:	080073c0 	.word	0x080073c0

080044c8 <memset>:
 80044c8:	4402      	add	r2, r0
 80044ca:	4603      	mov	r3, r0
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d100      	bne.n	80044d2 <memset+0xa>
 80044d0:	4770      	bx	lr
 80044d2:	f803 1b01 	strb.w	r1, [r3], #1
 80044d6:	e7f9      	b.n	80044cc <memset+0x4>

080044d8 <__cvt>:
 80044d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044dc:	ec55 4b10 	vmov	r4, r5, d0
 80044e0:	2d00      	cmp	r5, #0
 80044e2:	460e      	mov	r6, r1
 80044e4:	4619      	mov	r1, r3
 80044e6:	462b      	mov	r3, r5
 80044e8:	bfbb      	ittet	lt
 80044ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044ee:	461d      	movlt	r5, r3
 80044f0:	2300      	movge	r3, #0
 80044f2:	232d      	movlt	r3, #45	; 0x2d
 80044f4:	700b      	strb	r3, [r1, #0]
 80044f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044fc:	4691      	mov	r9, r2
 80044fe:	f023 0820 	bic.w	r8, r3, #32
 8004502:	bfbc      	itt	lt
 8004504:	4622      	movlt	r2, r4
 8004506:	4614      	movlt	r4, r2
 8004508:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800450c:	d005      	beq.n	800451a <__cvt+0x42>
 800450e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004512:	d100      	bne.n	8004516 <__cvt+0x3e>
 8004514:	3601      	adds	r6, #1
 8004516:	2102      	movs	r1, #2
 8004518:	e000      	b.n	800451c <__cvt+0x44>
 800451a:	2103      	movs	r1, #3
 800451c:	ab03      	add	r3, sp, #12
 800451e:	9301      	str	r3, [sp, #4]
 8004520:	ab02      	add	r3, sp, #8
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	ec45 4b10 	vmov	d0, r4, r5
 8004528:	4653      	mov	r3, sl
 800452a:	4632      	mov	r2, r6
 800452c:	f000 fce4 	bl	8004ef8 <_dtoa_r>
 8004530:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004534:	4607      	mov	r7, r0
 8004536:	d102      	bne.n	800453e <__cvt+0x66>
 8004538:	f019 0f01 	tst.w	r9, #1
 800453c:	d022      	beq.n	8004584 <__cvt+0xac>
 800453e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004542:	eb07 0906 	add.w	r9, r7, r6
 8004546:	d110      	bne.n	800456a <__cvt+0x92>
 8004548:	783b      	ldrb	r3, [r7, #0]
 800454a:	2b30      	cmp	r3, #48	; 0x30
 800454c:	d10a      	bne.n	8004564 <__cvt+0x8c>
 800454e:	2200      	movs	r2, #0
 8004550:	2300      	movs	r3, #0
 8004552:	4620      	mov	r0, r4
 8004554:	4629      	mov	r1, r5
 8004556:	f7fc fadf 	bl	8000b18 <__aeabi_dcmpeq>
 800455a:	b918      	cbnz	r0, 8004564 <__cvt+0x8c>
 800455c:	f1c6 0601 	rsb	r6, r6, #1
 8004560:	f8ca 6000 	str.w	r6, [sl]
 8004564:	f8da 3000 	ldr.w	r3, [sl]
 8004568:	4499      	add	r9, r3
 800456a:	2200      	movs	r2, #0
 800456c:	2300      	movs	r3, #0
 800456e:	4620      	mov	r0, r4
 8004570:	4629      	mov	r1, r5
 8004572:	f7fc fad1 	bl	8000b18 <__aeabi_dcmpeq>
 8004576:	b108      	cbz	r0, 800457c <__cvt+0xa4>
 8004578:	f8cd 900c 	str.w	r9, [sp, #12]
 800457c:	2230      	movs	r2, #48	; 0x30
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	454b      	cmp	r3, r9
 8004582:	d307      	bcc.n	8004594 <__cvt+0xbc>
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004588:	1bdb      	subs	r3, r3, r7
 800458a:	4638      	mov	r0, r7
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	b004      	add	sp, #16
 8004590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004594:	1c59      	adds	r1, r3, #1
 8004596:	9103      	str	r1, [sp, #12]
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	e7f0      	b.n	800457e <__cvt+0xa6>

0800459c <__exponent>:
 800459c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459e:	4603      	mov	r3, r0
 80045a0:	2900      	cmp	r1, #0
 80045a2:	bfb8      	it	lt
 80045a4:	4249      	neglt	r1, r1
 80045a6:	f803 2b02 	strb.w	r2, [r3], #2
 80045aa:	bfb4      	ite	lt
 80045ac:	222d      	movlt	r2, #45	; 0x2d
 80045ae:	222b      	movge	r2, #43	; 0x2b
 80045b0:	2909      	cmp	r1, #9
 80045b2:	7042      	strb	r2, [r0, #1]
 80045b4:	dd2a      	ble.n	800460c <__exponent+0x70>
 80045b6:	f10d 0407 	add.w	r4, sp, #7
 80045ba:	46a4      	mov	ip, r4
 80045bc:	270a      	movs	r7, #10
 80045be:	46a6      	mov	lr, r4
 80045c0:	460a      	mov	r2, r1
 80045c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80045c6:	fb07 1516 	mls	r5, r7, r6, r1
 80045ca:	3530      	adds	r5, #48	; 0x30
 80045cc:	2a63      	cmp	r2, #99	; 0x63
 80045ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80045d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045d6:	4631      	mov	r1, r6
 80045d8:	dcf1      	bgt.n	80045be <__exponent+0x22>
 80045da:	3130      	adds	r1, #48	; 0x30
 80045dc:	f1ae 0502 	sub.w	r5, lr, #2
 80045e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045e4:	1c44      	adds	r4, r0, #1
 80045e6:	4629      	mov	r1, r5
 80045e8:	4561      	cmp	r1, ip
 80045ea:	d30a      	bcc.n	8004602 <__exponent+0x66>
 80045ec:	f10d 0209 	add.w	r2, sp, #9
 80045f0:	eba2 020e 	sub.w	r2, r2, lr
 80045f4:	4565      	cmp	r5, ip
 80045f6:	bf88      	it	hi
 80045f8:	2200      	movhi	r2, #0
 80045fa:	4413      	add	r3, r2
 80045fc:	1a18      	subs	r0, r3, r0
 80045fe:	b003      	add	sp, #12
 8004600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004606:	f804 2f01 	strb.w	r2, [r4, #1]!
 800460a:	e7ed      	b.n	80045e8 <__exponent+0x4c>
 800460c:	2330      	movs	r3, #48	; 0x30
 800460e:	3130      	adds	r1, #48	; 0x30
 8004610:	7083      	strb	r3, [r0, #2]
 8004612:	70c1      	strb	r1, [r0, #3]
 8004614:	1d03      	adds	r3, r0, #4
 8004616:	e7f1      	b.n	80045fc <__exponent+0x60>

08004618 <_printf_float>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	ed2d 8b02 	vpush	{d8}
 8004620:	b08d      	sub	sp, #52	; 0x34
 8004622:	460c      	mov	r4, r1
 8004624:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004628:	4616      	mov	r6, r2
 800462a:	461f      	mov	r7, r3
 800462c:	4605      	mov	r5, r0
 800462e:	f001 fb47 	bl	8005cc0 <_localeconv_r>
 8004632:	f8d0 a000 	ldr.w	sl, [r0]
 8004636:	4650      	mov	r0, sl
 8004638:	f7fb fdf2 	bl	8000220 <strlen>
 800463c:	2300      	movs	r3, #0
 800463e:	930a      	str	r3, [sp, #40]	; 0x28
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	f8d8 3000 	ldr.w	r3, [r8]
 8004648:	f894 b018 	ldrb.w	fp, [r4, #24]
 800464c:	3307      	adds	r3, #7
 800464e:	f023 0307 	bic.w	r3, r3, #7
 8004652:	f103 0208 	add.w	r2, r3, #8
 8004656:	f8c8 2000 	str.w	r2, [r8]
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004662:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800466a:	9307      	str	r3, [sp, #28]
 800466c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004670:	ee08 0a10 	vmov	s16, r0
 8004674:	4b9f      	ldr	r3, [pc, #636]	; (80048f4 <_printf_float+0x2dc>)
 8004676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800467a:	f04f 32ff 	mov.w	r2, #4294967295
 800467e:	f7fc fa7d 	bl	8000b7c <__aeabi_dcmpun>
 8004682:	bb88      	cbnz	r0, 80046e8 <_printf_float+0xd0>
 8004684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004688:	4b9a      	ldr	r3, [pc, #616]	; (80048f4 <_printf_float+0x2dc>)
 800468a:	f04f 32ff 	mov.w	r2, #4294967295
 800468e:	f7fc fa57 	bl	8000b40 <__aeabi_dcmple>
 8004692:	bb48      	cbnz	r0, 80046e8 <_printf_float+0xd0>
 8004694:	2200      	movs	r2, #0
 8004696:	2300      	movs	r3, #0
 8004698:	4640      	mov	r0, r8
 800469a:	4649      	mov	r1, r9
 800469c:	f7fc fa46 	bl	8000b2c <__aeabi_dcmplt>
 80046a0:	b110      	cbz	r0, 80046a8 <_printf_float+0x90>
 80046a2:	232d      	movs	r3, #45	; 0x2d
 80046a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046a8:	4b93      	ldr	r3, [pc, #588]	; (80048f8 <_printf_float+0x2e0>)
 80046aa:	4894      	ldr	r0, [pc, #592]	; (80048fc <_printf_float+0x2e4>)
 80046ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80046b0:	bf94      	ite	ls
 80046b2:	4698      	movls	r8, r3
 80046b4:	4680      	movhi	r8, r0
 80046b6:	2303      	movs	r3, #3
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	9b05      	ldr	r3, [sp, #20]
 80046bc:	f023 0204 	bic.w	r2, r3, #4
 80046c0:	6022      	str	r2, [r4, #0]
 80046c2:	f04f 0900 	mov.w	r9, #0
 80046c6:	9700      	str	r7, [sp, #0]
 80046c8:	4633      	mov	r3, r6
 80046ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80046cc:	4621      	mov	r1, r4
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 f9d8 	bl	8004a84 <_printf_common>
 80046d4:	3001      	adds	r0, #1
 80046d6:	f040 8090 	bne.w	80047fa <_printf_float+0x1e2>
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	b00d      	add	sp, #52	; 0x34
 80046e0:	ecbd 8b02 	vpop	{d8}
 80046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	4640      	mov	r0, r8
 80046ee:	4649      	mov	r1, r9
 80046f0:	f7fc fa44 	bl	8000b7c <__aeabi_dcmpun>
 80046f4:	b140      	cbz	r0, 8004708 <_printf_float+0xf0>
 80046f6:	464b      	mov	r3, r9
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	bfbc      	itt	lt
 80046fc:	232d      	movlt	r3, #45	; 0x2d
 80046fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004702:	487f      	ldr	r0, [pc, #508]	; (8004900 <_printf_float+0x2e8>)
 8004704:	4b7f      	ldr	r3, [pc, #508]	; (8004904 <_printf_float+0x2ec>)
 8004706:	e7d1      	b.n	80046ac <_printf_float+0x94>
 8004708:	6863      	ldr	r3, [r4, #4]
 800470a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800470e:	9206      	str	r2, [sp, #24]
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	d13f      	bne.n	8004794 <_printf_float+0x17c>
 8004714:	2306      	movs	r3, #6
 8004716:	6063      	str	r3, [r4, #4]
 8004718:	9b05      	ldr	r3, [sp, #20]
 800471a:	6861      	ldr	r1, [r4, #4]
 800471c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004720:	2300      	movs	r3, #0
 8004722:	9303      	str	r3, [sp, #12]
 8004724:	ab0a      	add	r3, sp, #40	; 0x28
 8004726:	e9cd b301 	strd	fp, r3, [sp, #4]
 800472a:	ab09      	add	r3, sp, #36	; 0x24
 800472c:	ec49 8b10 	vmov	d0, r8, r9
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	6022      	str	r2, [r4, #0]
 8004734:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004738:	4628      	mov	r0, r5
 800473a:	f7ff fecd 	bl	80044d8 <__cvt>
 800473e:	9b06      	ldr	r3, [sp, #24]
 8004740:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004742:	2b47      	cmp	r3, #71	; 0x47
 8004744:	4680      	mov	r8, r0
 8004746:	d108      	bne.n	800475a <_printf_float+0x142>
 8004748:	1cc8      	adds	r0, r1, #3
 800474a:	db02      	blt.n	8004752 <_printf_float+0x13a>
 800474c:	6863      	ldr	r3, [r4, #4]
 800474e:	4299      	cmp	r1, r3
 8004750:	dd41      	ble.n	80047d6 <_printf_float+0x1be>
 8004752:	f1ab 0b02 	sub.w	fp, fp, #2
 8004756:	fa5f fb8b 	uxtb.w	fp, fp
 800475a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800475e:	d820      	bhi.n	80047a2 <_printf_float+0x18a>
 8004760:	3901      	subs	r1, #1
 8004762:	465a      	mov	r2, fp
 8004764:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004768:	9109      	str	r1, [sp, #36]	; 0x24
 800476a:	f7ff ff17 	bl	800459c <__exponent>
 800476e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004770:	1813      	adds	r3, r2, r0
 8004772:	2a01      	cmp	r2, #1
 8004774:	4681      	mov	r9, r0
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	dc02      	bgt.n	8004780 <_printf_float+0x168>
 800477a:	6822      	ldr	r2, [r4, #0]
 800477c:	07d2      	lsls	r2, r2, #31
 800477e:	d501      	bpl.n	8004784 <_printf_float+0x16c>
 8004780:	3301      	adds	r3, #1
 8004782:	6123      	str	r3, [r4, #16]
 8004784:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004788:	2b00      	cmp	r3, #0
 800478a:	d09c      	beq.n	80046c6 <_printf_float+0xae>
 800478c:	232d      	movs	r3, #45	; 0x2d
 800478e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004792:	e798      	b.n	80046c6 <_printf_float+0xae>
 8004794:	9a06      	ldr	r2, [sp, #24]
 8004796:	2a47      	cmp	r2, #71	; 0x47
 8004798:	d1be      	bne.n	8004718 <_printf_float+0x100>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1bc      	bne.n	8004718 <_printf_float+0x100>
 800479e:	2301      	movs	r3, #1
 80047a0:	e7b9      	b.n	8004716 <_printf_float+0xfe>
 80047a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80047a6:	d118      	bne.n	80047da <_printf_float+0x1c2>
 80047a8:	2900      	cmp	r1, #0
 80047aa:	6863      	ldr	r3, [r4, #4]
 80047ac:	dd0b      	ble.n	80047c6 <_printf_float+0x1ae>
 80047ae:	6121      	str	r1, [r4, #16]
 80047b0:	b913      	cbnz	r3, 80047b8 <_printf_float+0x1a0>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	07d0      	lsls	r0, r2, #31
 80047b6:	d502      	bpl.n	80047be <_printf_float+0x1a6>
 80047b8:	3301      	adds	r3, #1
 80047ba:	440b      	add	r3, r1
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	65a1      	str	r1, [r4, #88]	; 0x58
 80047c0:	f04f 0900 	mov.w	r9, #0
 80047c4:	e7de      	b.n	8004784 <_printf_float+0x16c>
 80047c6:	b913      	cbnz	r3, 80047ce <_printf_float+0x1b6>
 80047c8:	6822      	ldr	r2, [r4, #0]
 80047ca:	07d2      	lsls	r2, r2, #31
 80047cc:	d501      	bpl.n	80047d2 <_printf_float+0x1ba>
 80047ce:	3302      	adds	r3, #2
 80047d0:	e7f4      	b.n	80047bc <_printf_float+0x1a4>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e7f2      	b.n	80047bc <_printf_float+0x1a4>
 80047d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047dc:	4299      	cmp	r1, r3
 80047de:	db05      	blt.n	80047ec <_printf_float+0x1d4>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	6121      	str	r1, [r4, #16]
 80047e4:	07d8      	lsls	r0, r3, #31
 80047e6:	d5ea      	bpl.n	80047be <_printf_float+0x1a6>
 80047e8:	1c4b      	adds	r3, r1, #1
 80047ea:	e7e7      	b.n	80047bc <_printf_float+0x1a4>
 80047ec:	2900      	cmp	r1, #0
 80047ee:	bfd4      	ite	le
 80047f0:	f1c1 0202 	rsble	r2, r1, #2
 80047f4:	2201      	movgt	r2, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	e7e0      	b.n	80047bc <_printf_float+0x1a4>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	055a      	lsls	r2, r3, #21
 80047fe:	d407      	bmi.n	8004810 <_printf_float+0x1f8>
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	4642      	mov	r2, r8
 8004804:	4631      	mov	r1, r6
 8004806:	4628      	mov	r0, r5
 8004808:	47b8      	blx	r7
 800480a:	3001      	adds	r0, #1
 800480c:	d12c      	bne.n	8004868 <_printf_float+0x250>
 800480e:	e764      	b.n	80046da <_printf_float+0xc2>
 8004810:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004814:	f240 80e0 	bls.w	80049d8 <_printf_float+0x3c0>
 8004818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800481c:	2200      	movs	r2, #0
 800481e:	2300      	movs	r3, #0
 8004820:	f7fc f97a 	bl	8000b18 <__aeabi_dcmpeq>
 8004824:	2800      	cmp	r0, #0
 8004826:	d034      	beq.n	8004892 <_printf_float+0x27a>
 8004828:	4a37      	ldr	r2, [pc, #220]	; (8004908 <_printf_float+0x2f0>)
 800482a:	2301      	movs	r3, #1
 800482c:	4631      	mov	r1, r6
 800482e:	4628      	mov	r0, r5
 8004830:	47b8      	blx	r7
 8004832:	3001      	adds	r0, #1
 8004834:	f43f af51 	beq.w	80046da <_printf_float+0xc2>
 8004838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800483c:	429a      	cmp	r2, r3
 800483e:	db02      	blt.n	8004846 <_printf_float+0x22e>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07d8      	lsls	r0, r3, #31
 8004844:	d510      	bpl.n	8004868 <_printf_float+0x250>
 8004846:	ee18 3a10 	vmov	r3, s16
 800484a:	4652      	mov	r2, sl
 800484c:	4631      	mov	r1, r6
 800484e:	4628      	mov	r0, r5
 8004850:	47b8      	blx	r7
 8004852:	3001      	adds	r0, #1
 8004854:	f43f af41 	beq.w	80046da <_printf_float+0xc2>
 8004858:	f04f 0800 	mov.w	r8, #0
 800485c:	f104 091a 	add.w	r9, r4, #26
 8004860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004862:	3b01      	subs	r3, #1
 8004864:	4543      	cmp	r3, r8
 8004866:	dc09      	bgt.n	800487c <_printf_float+0x264>
 8004868:	6823      	ldr	r3, [r4, #0]
 800486a:	079b      	lsls	r3, r3, #30
 800486c:	f100 8105 	bmi.w	8004a7a <_printf_float+0x462>
 8004870:	68e0      	ldr	r0, [r4, #12]
 8004872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004874:	4298      	cmp	r0, r3
 8004876:	bfb8      	it	lt
 8004878:	4618      	movlt	r0, r3
 800487a:	e730      	b.n	80046de <_printf_float+0xc6>
 800487c:	2301      	movs	r3, #1
 800487e:	464a      	mov	r2, r9
 8004880:	4631      	mov	r1, r6
 8004882:	4628      	mov	r0, r5
 8004884:	47b8      	blx	r7
 8004886:	3001      	adds	r0, #1
 8004888:	f43f af27 	beq.w	80046da <_printf_float+0xc2>
 800488c:	f108 0801 	add.w	r8, r8, #1
 8004890:	e7e6      	b.n	8004860 <_printf_float+0x248>
 8004892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	dc39      	bgt.n	800490c <_printf_float+0x2f4>
 8004898:	4a1b      	ldr	r2, [pc, #108]	; (8004908 <_printf_float+0x2f0>)
 800489a:	2301      	movs	r3, #1
 800489c:	4631      	mov	r1, r6
 800489e:	4628      	mov	r0, r5
 80048a0:	47b8      	blx	r7
 80048a2:	3001      	adds	r0, #1
 80048a4:	f43f af19 	beq.w	80046da <_printf_float+0xc2>
 80048a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ac:	4313      	orrs	r3, r2
 80048ae:	d102      	bne.n	80048b6 <_printf_float+0x29e>
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	07d9      	lsls	r1, r3, #31
 80048b4:	d5d8      	bpl.n	8004868 <_printf_float+0x250>
 80048b6:	ee18 3a10 	vmov	r3, s16
 80048ba:	4652      	mov	r2, sl
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f af09 	beq.w	80046da <_printf_float+0xc2>
 80048c8:	f04f 0900 	mov.w	r9, #0
 80048cc:	f104 0a1a 	add.w	sl, r4, #26
 80048d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d2:	425b      	negs	r3, r3
 80048d4:	454b      	cmp	r3, r9
 80048d6:	dc01      	bgt.n	80048dc <_printf_float+0x2c4>
 80048d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048da:	e792      	b.n	8004802 <_printf_float+0x1ea>
 80048dc:	2301      	movs	r3, #1
 80048de:	4652      	mov	r2, sl
 80048e0:	4631      	mov	r1, r6
 80048e2:	4628      	mov	r0, r5
 80048e4:	47b8      	blx	r7
 80048e6:	3001      	adds	r0, #1
 80048e8:	f43f aef7 	beq.w	80046da <_printf_float+0xc2>
 80048ec:	f109 0901 	add.w	r9, r9, #1
 80048f0:	e7ee      	b.n	80048d0 <_printf_float+0x2b8>
 80048f2:	bf00      	nop
 80048f4:	7fefffff 	.word	0x7fefffff
 80048f8:	08006fe0 	.word	0x08006fe0
 80048fc:	08006fe4 	.word	0x08006fe4
 8004900:	08006fec 	.word	0x08006fec
 8004904:	08006fe8 	.word	0x08006fe8
 8004908:	08006ff0 	.word	0x08006ff0
 800490c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800490e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004910:	429a      	cmp	r2, r3
 8004912:	bfa8      	it	ge
 8004914:	461a      	movge	r2, r3
 8004916:	2a00      	cmp	r2, #0
 8004918:	4691      	mov	r9, r2
 800491a:	dc37      	bgt.n	800498c <_printf_float+0x374>
 800491c:	f04f 0b00 	mov.w	fp, #0
 8004920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004924:	f104 021a 	add.w	r2, r4, #26
 8004928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800492a:	9305      	str	r3, [sp, #20]
 800492c:	eba3 0309 	sub.w	r3, r3, r9
 8004930:	455b      	cmp	r3, fp
 8004932:	dc33      	bgt.n	800499c <_printf_float+0x384>
 8004934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004938:	429a      	cmp	r2, r3
 800493a:	db3b      	blt.n	80049b4 <_printf_float+0x39c>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	07da      	lsls	r2, r3, #31
 8004940:	d438      	bmi.n	80049b4 <_printf_float+0x39c>
 8004942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004944:	9a05      	ldr	r2, [sp, #20]
 8004946:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004948:	1a9a      	subs	r2, r3, r2
 800494a:	eba3 0901 	sub.w	r9, r3, r1
 800494e:	4591      	cmp	r9, r2
 8004950:	bfa8      	it	ge
 8004952:	4691      	movge	r9, r2
 8004954:	f1b9 0f00 	cmp.w	r9, #0
 8004958:	dc35      	bgt.n	80049c6 <_printf_float+0x3ae>
 800495a:	f04f 0800 	mov.w	r8, #0
 800495e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004962:	f104 0a1a 	add.w	sl, r4, #26
 8004966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	eba3 0309 	sub.w	r3, r3, r9
 8004970:	4543      	cmp	r3, r8
 8004972:	f77f af79 	ble.w	8004868 <_printf_float+0x250>
 8004976:	2301      	movs	r3, #1
 8004978:	4652      	mov	r2, sl
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	47b8      	blx	r7
 8004980:	3001      	adds	r0, #1
 8004982:	f43f aeaa 	beq.w	80046da <_printf_float+0xc2>
 8004986:	f108 0801 	add.w	r8, r8, #1
 800498a:	e7ec      	b.n	8004966 <_printf_float+0x34e>
 800498c:	4613      	mov	r3, r2
 800498e:	4631      	mov	r1, r6
 8004990:	4642      	mov	r2, r8
 8004992:	4628      	mov	r0, r5
 8004994:	47b8      	blx	r7
 8004996:	3001      	adds	r0, #1
 8004998:	d1c0      	bne.n	800491c <_printf_float+0x304>
 800499a:	e69e      	b.n	80046da <_printf_float+0xc2>
 800499c:	2301      	movs	r3, #1
 800499e:	4631      	mov	r1, r6
 80049a0:	4628      	mov	r0, r5
 80049a2:	9205      	str	r2, [sp, #20]
 80049a4:	47b8      	blx	r7
 80049a6:	3001      	adds	r0, #1
 80049a8:	f43f ae97 	beq.w	80046da <_printf_float+0xc2>
 80049ac:	9a05      	ldr	r2, [sp, #20]
 80049ae:	f10b 0b01 	add.w	fp, fp, #1
 80049b2:	e7b9      	b.n	8004928 <_printf_float+0x310>
 80049b4:	ee18 3a10 	vmov	r3, s16
 80049b8:	4652      	mov	r2, sl
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	d1be      	bne.n	8004942 <_printf_float+0x32a>
 80049c4:	e689      	b.n	80046da <_printf_float+0xc2>
 80049c6:	9a05      	ldr	r2, [sp, #20]
 80049c8:	464b      	mov	r3, r9
 80049ca:	4442      	add	r2, r8
 80049cc:	4631      	mov	r1, r6
 80049ce:	4628      	mov	r0, r5
 80049d0:	47b8      	blx	r7
 80049d2:	3001      	adds	r0, #1
 80049d4:	d1c1      	bne.n	800495a <_printf_float+0x342>
 80049d6:	e680      	b.n	80046da <_printf_float+0xc2>
 80049d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049da:	2a01      	cmp	r2, #1
 80049dc:	dc01      	bgt.n	80049e2 <_printf_float+0x3ca>
 80049de:	07db      	lsls	r3, r3, #31
 80049e0:	d538      	bpl.n	8004a54 <_printf_float+0x43c>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4642      	mov	r2, r8
 80049e6:	4631      	mov	r1, r6
 80049e8:	4628      	mov	r0, r5
 80049ea:	47b8      	blx	r7
 80049ec:	3001      	adds	r0, #1
 80049ee:	f43f ae74 	beq.w	80046da <_printf_float+0xc2>
 80049f2:	ee18 3a10 	vmov	r3, s16
 80049f6:	4652      	mov	r2, sl
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f ae6b 	beq.w	80046da <_printf_float+0xc2>
 8004a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f7fc f884 	bl	8000b18 <__aeabi_dcmpeq>
 8004a10:	b9d8      	cbnz	r0, 8004a4a <_printf_float+0x432>
 8004a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a14:	f108 0201 	add.w	r2, r8, #1
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4631      	mov	r1, r6
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	47b8      	blx	r7
 8004a20:	3001      	adds	r0, #1
 8004a22:	d10e      	bne.n	8004a42 <_printf_float+0x42a>
 8004a24:	e659      	b.n	80046da <_printf_float+0xc2>
 8004a26:	2301      	movs	r3, #1
 8004a28:	4652      	mov	r2, sl
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	47b8      	blx	r7
 8004a30:	3001      	adds	r0, #1
 8004a32:	f43f ae52 	beq.w	80046da <_printf_float+0xc2>
 8004a36:	f108 0801 	add.w	r8, r8, #1
 8004a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4543      	cmp	r3, r8
 8004a40:	dcf1      	bgt.n	8004a26 <_printf_float+0x40e>
 8004a42:	464b      	mov	r3, r9
 8004a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a48:	e6dc      	b.n	8004804 <_printf_float+0x1ec>
 8004a4a:	f04f 0800 	mov.w	r8, #0
 8004a4e:	f104 0a1a 	add.w	sl, r4, #26
 8004a52:	e7f2      	b.n	8004a3a <_printf_float+0x422>
 8004a54:	2301      	movs	r3, #1
 8004a56:	4642      	mov	r2, r8
 8004a58:	e7df      	b.n	8004a1a <_printf_float+0x402>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	464a      	mov	r2, r9
 8004a5e:	4631      	mov	r1, r6
 8004a60:	4628      	mov	r0, r5
 8004a62:	47b8      	blx	r7
 8004a64:	3001      	adds	r0, #1
 8004a66:	f43f ae38 	beq.w	80046da <_printf_float+0xc2>
 8004a6a:	f108 0801 	add.w	r8, r8, #1
 8004a6e:	68e3      	ldr	r3, [r4, #12]
 8004a70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a72:	1a5b      	subs	r3, r3, r1
 8004a74:	4543      	cmp	r3, r8
 8004a76:	dcf0      	bgt.n	8004a5a <_printf_float+0x442>
 8004a78:	e6fa      	b.n	8004870 <_printf_float+0x258>
 8004a7a:	f04f 0800 	mov.w	r8, #0
 8004a7e:	f104 0919 	add.w	r9, r4, #25
 8004a82:	e7f4      	b.n	8004a6e <_printf_float+0x456>

08004a84 <_printf_common>:
 8004a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a88:	4616      	mov	r6, r2
 8004a8a:	4699      	mov	r9, r3
 8004a8c:	688a      	ldr	r2, [r1, #8]
 8004a8e:	690b      	ldr	r3, [r1, #16]
 8004a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bfb8      	it	lt
 8004a98:	4613      	movlt	r3, r2
 8004a9a:	6033      	str	r3, [r6, #0]
 8004a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b10a      	cbz	r2, 8004aaa <_printf_common+0x26>
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	6033      	str	r3, [r6, #0]
 8004aaa:	6823      	ldr	r3, [r4, #0]
 8004aac:	0699      	lsls	r1, r3, #26
 8004aae:	bf42      	ittt	mi
 8004ab0:	6833      	ldrmi	r3, [r6, #0]
 8004ab2:	3302      	addmi	r3, #2
 8004ab4:	6033      	strmi	r3, [r6, #0]
 8004ab6:	6825      	ldr	r5, [r4, #0]
 8004ab8:	f015 0506 	ands.w	r5, r5, #6
 8004abc:	d106      	bne.n	8004acc <_printf_common+0x48>
 8004abe:	f104 0a19 	add.w	sl, r4, #25
 8004ac2:	68e3      	ldr	r3, [r4, #12]
 8004ac4:	6832      	ldr	r2, [r6, #0]
 8004ac6:	1a9b      	subs	r3, r3, r2
 8004ac8:	42ab      	cmp	r3, r5
 8004aca:	dc26      	bgt.n	8004b1a <_printf_common+0x96>
 8004acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ad0:	1e13      	subs	r3, r2, #0
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	bf18      	it	ne
 8004ad6:	2301      	movne	r3, #1
 8004ad8:	0692      	lsls	r2, r2, #26
 8004ada:	d42b      	bmi.n	8004b34 <_printf_common+0xb0>
 8004adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	4638      	mov	r0, r7
 8004ae4:	47c0      	blx	r8
 8004ae6:	3001      	adds	r0, #1
 8004ae8:	d01e      	beq.n	8004b28 <_printf_common+0xa4>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	68e5      	ldr	r5, [r4, #12]
 8004aee:	6832      	ldr	r2, [r6, #0]
 8004af0:	f003 0306 	and.w	r3, r3, #6
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	bf08      	it	eq
 8004af8:	1aad      	subeq	r5, r5, r2
 8004afa:	68a3      	ldr	r3, [r4, #8]
 8004afc:	6922      	ldr	r2, [r4, #16]
 8004afe:	bf0c      	ite	eq
 8004b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b04:	2500      	movne	r5, #0
 8004b06:	4293      	cmp	r3, r2
 8004b08:	bfc4      	itt	gt
 8004b0a:	1a9b      	subgt	r3, r3, r2
 8004b0c:	18ed      	addgt	r5, r5, r3
 8004b0e:	2600      	movs	r6, #0
 8004b10:	341a      	adds	r4, #26
 8004b12:	42b5      	cmp	r5, r6
 8004b14:	d11a      	bne.n	8004b4c <_printf_common+0xc8>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e008      	b.n	8004b2c <_printf_common+0xa8>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	4652      	mov	r2, sl
 8004b1e:	4649      	mov	r1, r9
 8004b20:	4638      	mov	r0, r7
 8004b22:	47c0      	blx	r8
 8004b24:	3001      	adds	r0, #1
 8004b26:	d103      	bne.n	8004b30 <_printf_common+0xac>
 8004b28:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b30:	3501      	adds	r5, #1
 8004b32:	e7c6      	b.n	8004ac2 <_printf_common+0x3e>
 8004b34:	18e1      	adds	r1, r4, r3
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	2030      	movs	r0, #48	; 0x30
 8004b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b3e:	4422      	add	r2, r4
 8004b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b48:	3302      	adds	r3, #2
 8004b4a:	e7c7      	b.n	8004adc <_printf_common+0x58>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	4622      	mov	r2, r4
 8004b50:	4649      	mov	r1, r9
 8004b52:	4638      	mov	r0, r7
 8004b54:	47c0      	blx	r8
 8004b56:	3001      	adds	r0, #1
 8004b58:	d0e6      	beq.n	8004b28 <_printf_common+0xa4>
 8004b5a:	3601      	adds	r6, #1
 8004b5c:	e7d9      	b.n	8004b12 <_printf_common+0x8e>
	...

08004b60 <_printf_i>:
 8004b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b64:	7e0f      	ldrb	r7, [r1, #24]
 8004b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b68:	2f78      	cmp	r7, #120	; 0x78
 8004b6a:	4691      	mov	r9, r2
 8004b6c:	4680      	mov	r8, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	469a      	mov	sl, r3
 8004b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b76:	d807      	bhi.n	8004b88 <_printf_i+0x28>
 8004b78:	2f62      	cmp	r7, #98	; 0x62
 8004b7a:	d80a      	bhi.n	8004b92 <_printf_i+0x32>
 8004b7c:	2f00      	cmp	r7, #0
 8004b7e:	f000 80d8 	beq.w	8004d32 <_printf_i+0x1d2>
 8004b82:	2f58      	cmp	r7, #88	; 0x58
 8004b84:	f000 80a3 	beq.w	8004cce <_printf_i+0x16e>
 8004b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b90:	e03a      	b.n	8004c08 <_printf_i+0xa8>
 8004b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b96:	2b15      	cmp	r3, #21
 8004b98:	d8f6      	bhi.n	8004b88 <_printf_i+0x28>
 8004b9a:	a101      	add	r1, pc, #4	; (adr r1, 8004ba0 <_printf_i+0x40>)
 8004b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004c0d 	.word	0x08004c0d
 8004ba8:	08004b89 	.word	0x08004b89
 8004bac:	08004b89 	.word	0x08004b89
 8004bb0:	08004b89 	.word	0x08004b89
 8004bb4:	08004b89 	.word	0x08004b89
 8004bb8:	08004c0d 	.word	0x08004c0d
 8004bbc:	08004b89 	.word	0x08004b89
 8004bc0:	08004b89 	.word	0x08004b89
 8004bc4:	08004b89 	.word	0x08004b89
 8004bc8:	08004b89 	.word	0x08004b89
 8004bcc:	08004d19 	.word	0x08004d19
 8004bd0:	08004c3d 	.word	0x08004c3d
 8004bd4:	08004cfb 	.word	0x08004cfb
 8004bd8:	08004b89 	.word	0x08004b89
 8004bdc:	08004b89 	.word	0x08004b89
 8004be0:	08004d3b 	.word	0x08004d3b
 8004be4:	08004b89 	.word	0x08004b89
 8004be8:	08004c3d 	.word	0x08004c3d
 8004bec:	08004b89 	.word	0x08004b89
 8004bf0:	08004b89 	.word	0x08004b89
 8004bf4:	08004d03 	.word	0x08004d03
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	1d1a      	adds	r2, r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	602a      	str	r2, [r5, #0]
 8004c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0a3      	b.n	8004d54 <_printf_i+0x1f4>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	6829      	ldr	r1, [r5, #0]
 8004c10:	0606      	lsls	r6, r0, #24
 8004c12:	f101 0304 	add.w	r3, r1, #4
 8004c16:	d50a      	bpl.n	8004c2e <_printf_i+0xce>
 8004c18:	680e      	ldr	r6, [r1, #0]
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	2e00      	cmp	r6, #0
 8004c1e:	da03      	bge.n	8004c28 <_printf_i+0xc8>
 8004c20:	232d      	movs	r3, #45	; 0x2d
 8004c22:	4276      	negs	r6, r6
 8004c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c28:	485e      	ldr	r0, [pc, #376]	; (8004da4 <_printf_i+0x244>)
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	e019      	b.n	8004c62 <_printf_i+0x102>
 8004c2e:	680e      	ldr	r6, [r1, #0]
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c36:	bf18      	it	ne
 8004c38:	b236      	sxthne	r6, r6
 8004c3a:	e7ef      	b.n	8004c1c <_printf_i+0xbc>
 8004c3c:	682b      	ldr	r3, [r5, #0]
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	1d19      	adds	r1, r3, #4
 8004c42:	6029      	str	r1, [r5, #0]
 8004c44:	0601      	lsls	r1, r0, #24
 8004c46:	d501      	bpl.n	8004c4c <_printf_i+0xec>
 8004c48:	681e      	ldr	r6, [r3, #0]
 8004c4a:	e002      	b.n	8004c52 <_printf_i+0xf2>
 8004c4c:	0646      	lsls	r6, r0, #25
 8004c4e:	d5fb      	bpl.n	8004c48 <_printf_i+0xe8>
 8004c50:	881e      	ldrh	r6, [r3, #0]
 8004c52:	4854      	ldr	r0, [pc, #336]	; (8004da4 <_printf_i+0x244>)
 8004c54:	2f6f      	cmp	r7, #111	; 0x6f
 8004c56:	bf0c      	ite	eq
 8004c58:	2308      	moveq	r3, #8
 8004c5a:	230a      	movne	r3, #10
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c62:	6865      	ldr	r5, [r4, #4]
 8004c64:	60a5      	str	r5, [r4, #8]
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	bfa2      	ittt	ge
 8004c6a:	6821      	ldrge	r1, [r4, #0]
 8004c6c:	f021 0104 	bicge.w	r1, r1, #4
 8004c70:	6021      	strge	r1, [r4, #0]
 8004c72:	b90e      	cbnz	r6, 8004c78 <_printf_i+0x118>
 8004c74:	2d00      	cmp	r5, #0
 8004c76:	d04d      	beq.n	8004d14 <_printf_i+0x1b4>
 8004c78:	4615      	mov	r5, r2
 8004c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c82:	5dc7      	ldrb	r7, [r0, r7]
 8004c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c88:	4637      	mov	r7, r6
 8004c8a:	42bb      	cmp	r3, r7
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	d9f4      	bls.n	8004c7a <_printf_i+0x11a>
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d10b      	bne.n	8004cac <_printf_i+0x14c>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	07de      	lsls	r6, r3, #31
 8004c98:	d508      	bpl.n	8004cac <_printf_i+0x14c>
 8004c9a:	6923      	ldr	r3, [r4, #16]
 8004c9c:	6861      	ldr	r1, [r4, #4]
 8004c9e:	4299      	cmp	r1, r3
 8004ca0:	bfde      	ittt	le
 8004ca2:	2330      	movle	r3, #48	; 0x30
 8004ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cac:	1b52      	subs	r2, r2, r5
 8004cae:	6122      	str	r2, [r4, #16]
 8004cb0:	f8cd a000 	str.w	sl, [sp]
 8004cb4:	464b      	mov	r3, r9
 8004cb6:	aa03      	add	r2, sp, #12
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7ff fee2 	bl	8004a84 <_printf_common>
 8004cc0:	3001      	adds	r0, #1
 8004cc2:	d14c      	bne.n	8004d5e <_printf_i+0x1fe>
 8004cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc8:	b004      	add	sp, #16
 8004cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cce:	4835      	ldr	r0, [pc, #212]	; (8004da4 <_printf_i+0x244>)
 8004cd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cd4:	6829      	ldr	r1, [r5, #0]
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cdc:	6029      	str	r1, [r5, #0]
 8004cde:	061d      	lsls	r5, r3, #24
 8004ce0:	d514      	bpl.n	8004d0c <_printf_i+0x1ac>
 8004ce2:	07df      	lsls	r7, r3, #31
 8004ce4:	bf44      	itt	mi
 8004ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8004cea:	6023      	strmi	r3, [r4, #0]
 8004cec:	b91e      	cbnz	r6, 8004cf6 <_printf_i+0x196>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	f023 0320 	bic.w	r3, r3, #32
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	2310      	movs	r3, #16
 8004cf8:	e7b0      	b.n	8004c5c <_printf_i+0xfc>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f043 0320 	orr.w	r3, r3, #32
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	2378      	movs	r3, #120	; 0x78
 8004d04:	4828      	ldr	r0, [pc, #160]	; (8004da8 <_printf_i+0x248>)
 8004d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d0a:	e7e3      	b.n	8004cd4 <_printf_i+0x174>
 8004d0c:	0659      	lsls	r1, r3, #25
 8004d0e:	bf48      	it	mi
 8004d10:	b2b6      	uxthmi	r6, r6
 8004d12:	e7e6      	b.n	8004ce2 <_printf_i+0x182>
 8004d14:	4615      	mov	r5, r2
 8004d16:	e7bb      	b.n	8004c90 <_printf_i+0x130>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	6826      	ldr	r6, [r4, #0]
 8004d1c:	6961      	ldr	r1, [r4, #20]
 8004d1e:	1d18      	adds	r0, r3, #4
 8004d20:	6028      	str	r0, [r5, #0]
 8004d22:	0635      	lsls	r5, r6, #24
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	d501      	bpl.n	8004d2c <_printf_i+0x1cc>
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	e002      	b.n	8004d32 <_printf_i+0x1d2>
 8004d2c:	0670      	lsls	r0, r6, #25
 8004d2e:	d5fb      	bpl.n	8004d28 <_printf_i+0x1c8>
 8004d30:	8019      	strh	r1, [r3, #0]
 8004d32:	2300      	movs	r3, #0
 8004d34:	6123      	str	r3, [r4, #16]
 8004d36:	4615      	mov	r5, r2
 8004d38:	e7ba      	b.n	8004cb0 <_printf_i+0x150>
 8004d3a:	682b      	ldr	r3, [r5, #0]
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	602a      	str	r2, [r5, #0]
 8004d40:	681d      	ldr	r5, [r3, #0]
 8004d42:	6862      	ldr	r2, [r4, #4]
 8004d44:	2100      	movs	r1, #0
 8004d46:	4628      	mov	r0, r5
 8004d48:	f7fb fa72 	bl	8000230 <memchr>
 8004d4c:	b108      	cbz	r0, 8004d52 <_printf_i+0x1f2>
 8004d4e:	1b40      	subs	r0, r0, r5
 8004d50:	6060      	str	r0, [r4, #4]
 8004d52:	6863      	ldr	r3, [r4, #4]
 8004d54:	6123      	str	r3, [r4, #16]
 8004d56:	2300      	movs	r3, #0
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5c:	e7a8      	b.n	8004cb0 <_printf_i+0x150>
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	462a      	mov	r2, r5
 8004d62:	4649      	mov	r1, r9
 8004d64:	4640      	mov	r0, r8
 8004d66:	47d0      	blx	sl
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d0ab      	beq.n	8004cc4 <_printf_i+0x164>
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	079b      	lsls	r3, r3, #30
 8004d70:	d413      	bmi.n	8004d9a <_printf_i+0x23a>
 8004d72:	68e0      	ldr	r0, [r4, #12]
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	4298      	cmp	r0, r3
 8004d78:	bfb8      	it	lt
 8004d7a:	4618      	movlt	r0, r3
 8004d7c:	e7a4      	b.n	8004cc8 <_printf_i+0x168>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4632      	mov	r2, r6
 8004d82:	4649      	mov	r1, r9
 8004d84:	4640      	mov	r0, r8
 8004d86:	47d0      	blx	sl
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d09b      	beq.n	8004cc4 <_printf_i+0x164>
 8004d8c:	3501      	adds	r5, #1
 8004d8e:	68e3      	ldr	r3, [r4, #12]
 8004d90:	9903      	ldr	r1, [sp, #12]
 8004d92:	1a5b      	subs	r3, r3, r1
 8004d94:	42ab      	cmp	r3, r5
 8004d96:	dcf2      	bgt.n	8004d7e <_printf_i+0x21e>
 8004d98:	e7eb      	b.n	8004d72 <_printf_i+0x212>
 8004d9a:	2500      	movs	r5, #0
 8004d9c:	f104 0619 	add.w	r6, r4, #25
 8004da0:	e7f5      	b.n	8004d8e <_printf_i+0x22e>
 8004da2:	bf00      	nop
 8004da4:	08006ff2 	.word	0x08006ff2
 8004da8:	08007003 	.word	0x08007003

08004dac <iprintf>:
 8004dac:	b40f      	push	{r0, r1, r2, r3}
 8004dae:	4b0a      	ldr	r3, [pc, #40]	; (8004dd8 <iprintf+0x2c>)
 8004db0:	b513      	push	{r0, r1, r4, lr}
 8004db2:	681c      	ldr	r4, [r3, #0]
 8004db4:	b124      	cbz	r4, 8004dc0 <iprintf+0x14>
 8004db6:	69a3      	ldr	r3, [r4, #24]
 8004db8:	b913      	cbnz	r3, 8004dc0 <iprintf+0x14>
 8004dba:	4620      	mov	r0, r4
 8004dbc:	f000 fee2 	bl	8005b84 <__sinit>
 8004dc0:	ab05      	add	r3, sp, #20
 8004dc2:	9a04      	ldr	r2, [sp, #16]
 8004dc4:	68a1      	ldr	r1, [r4, #8]
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f001 fc3b 	bl	8006644 <_vfiprintf_r>
 8004dce:	b002      	add	sp, #8
 8004dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd4:	b004      	add	sp, #16
 8004dd6:	4770      	bx	lr
 8004dd8:	20000004 	.word	0x20000004

08004ddc <quorem>:
 8004ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de0:	6903      	ldr	r3, [r0, #16]
 8004de2:	690c      	ldr	r4, [r1, #16]
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	4607      	mov	r7, r0
 8004de8:	f2c0 8081 	blt.w	8004eee <quorem+0x112>
 8004dec:	3c01      	subs	r4, #1
 8004dee:	f101 0814 	add.w	r8, r1, #20
 8004df2:	f100 0514 	add.w	r5, r0, #20
 8004df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e04:	3301      	adds	r3, #1
 8004e06:	429a      	cmp	r2, r3
 8004e08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e10:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e14:	d331      	bcc.n	8004e7a <quorem+0x9e>
 8004e16:	f04f 0e00 	mov.w	lr, #0
 8004e1a:	4640      	mov	r0, r8
 8004e1c:	46ac      	mov	ip, r5
 8004e1e:	46f2      	mov	sl, lr
 8004e20:	f850 2b04 	ldr.w	r2, [r0], #4
 8004e24:	b293      	uxth	r3, r2
 8004e26:	fb06 e303 	mla	r3, r6, r3, lr
 8004e2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	ebaa 0303 	sub.w	r3, sl, r3
 8004e34:	f8dc a000 	ldr.w	sl, [ip]
 8004e38:	0c12      	lsrs	r2, r2, #16
 8004e3a:	fa13 f38a 	uxtah	r3, r3, sl
 8004e3e:	fb06 e202 	mla	r2, r6, r2, lr
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	9b00      	ldr	r3, [sp, #0]
 8004e46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004e50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004e54:	f8bd 3000 	ldrh.w	r3, [sp]
 8004e58:	4581      	cmp	r9, r0
 8004e5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004e5e:	f84c 3b04 	str.w	r3, [ip], #4
 8004e62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004e66:	d2db      	bcs.n	8004e20 <quorem+0x44>
 8004e68:	f855 300b 	ldr.w	r3, [r5, fp]
 8004e6c:	b92b      	cbnz	r3, 8004e7a <quorem+0x9e>
 8004e6e:	9b01      	ldr	r3, [sp, #4]
 8004e70:	3b04      	subs	r3, #4
 8004e72:	429d      	cmp	r5, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	d32e      	bcc.n	8004ed6 <quorem+0xfa>
 8004e78:	613c      	str	r4, [r7, #16]
 8004e7a:	4638      	mov	r0, r7
 8004e7c:	f001 f9c0 	bl	8006200 <__mcmp>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	db24      	blt.n	8004ece <quorem+0xf2>
 8004e84:	3601      	adds	r6, #1
 8004e86:	4628      	mov	r0, r5
 8004e88:	f04f 0c00 	mov.w	ip, #0
 8004e8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004e90:	f8d0 e000 	ldr.w	lr, [r0]
 8004e94:	b293      	uxth	r3, r2
 8004e96:	ebac 0303 	sub.w	r3, ip, r3
 8004e9a:	0c12      	lsrs	r2, r2, #16
 8004e9c:	fa13 f38e 	uxtah	r3, r3, lr
 8004ea0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004ea4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eae:	45c1      	cmp	r9, r8
 8004eb0:	f840 3b04 	str.w	r3, [r0], #4
 8004eb4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004eb8:	d2e8      	bcs.n	8004e8c <quorem+0xb0>
 8004eba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ec2:	b922      	cbnz	r2, 8004ece <quorem+0xf2>
 8004ec4:	3b04      	subs	r3, #4
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	d30a      	bcc.n	8004ee2 <quorem+0x106>
 8004ecc:	613c      	str	r4, [r7, #16]
 8004ece:	4630      	mov	r0, r6
 8004ed0:	b003      	add	sp, #12
 8004ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	3b04      	subs	r3, #4
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	d1cc      	bne.n	8004e78 <quorem+0x9c>
 8004ede:	3c01      	subs	r4, #1
 8004ee0:	e7c7      	b.n	8004e72 <quorem+0x96>
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	3b04      	subs	r3, #4
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	d1f0      	bne.n	8004ecc <quorem+0xf0>
 8004eea:	3c01      	subs	r4, #1
 8004eec:	e7eb      	b.n	8004ec6 <quorem+0xea>
 8004eee:	2000      	movs	r0, #0
 8004ef0:	e7ee      	b.n	8004ed0 <quorem+0xf4>
 8004ef2:	0000      	movs	r0, r0
 8004ef4:	0000      	movs	r0, r0
	...

08004ef8 <_dtoa_r>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	ed2d 8b04 	vpush	{d8-d9}
 8004f00:	ec57 6b10 	vmov	r6, r7, d0
 8004f04:	b093      	sub	sp, #76	; 0x4c
 8004f06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f0c:	9106      	str	r1, [sp, #24]
 8004f0e:	ee10 aa10 	vmov	sl, s0
 8004f12:	4604      	mov	r4, r0
 8004f14:	9209      	str	r2, [sp, #36]	; 0x24
 8004f16:	930c      	str	r3, [sp, #48]	; 0x30
 8004f18:	46bb      	mov	fp, r7
 8004f1a:	b975      	cbnz	r5, 8004f3a <_dtoa_r+0x42>
 8004f1c:	2010      	movs	r0, #16
 8004f1e:	f000 fed7 	bl	8005cd0 <malloc>
 8004f22:	4602      	mov	r2, r0
 8004f24:	6260      	str	r0, [r4, #36]	; 0x24
 8004f26:	b920      	cbnz	r0, 8004f32 <_dtoa_r+0x3a>
 8004f28:	4ba7      	ldr	r3, [pc, #668]	; (80051c8 <_dtoa_r+0x2d0>)
 8004f2a:	21ea      	movs	r1, #234	; 0xea
 8004f2c:	48a7      	ldr	r0, [pc, #668]	; (80051cc <_dtoa_r+0x2d4>)
 8004f2e:	f001 fddf 	bl	8006af0 <__assert_func>
 8004f32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004f36:	6005      	str	r5, [r0, #0]
 8004f38:	60c5      	str	r5, [r0, #12]
 8004f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f3c:	6819      	ldr	r1, [r3, #0]
 8004f3e:	b151      	cbz	r1, 8004f56 <_dtoa_r+0x5e>
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	604a      	str	r2, [r1, #4]
 8004f44:	2301      	movs	r3, #1
 8004f46:	4093      	lsls	r3, r2
 8004f48:	608b      	str	r3, [r1, #8]
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 ff16 	bl	8005d7c <_Bfree>
 8004f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	1e3b      	subs	r3, r7, #0
 8004f58:	bfaa      	itet	ge
 8004f5a:	2300      	movge	r3, #0
 8004f5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004f60:	f8c8 3000 	strge.w	r3, [r8]
 8004f64:	4b9a      	ldr	r3, [pc, #616]	; (80051d0 <_dtoa_r+0x2d8>)
 8004f66:	bfbc      	itt	lt
 8004f68:	2201      	movlt	r2, #1
 8004f6a:	f8c8 2000 	strlt.w	r2, [r8]
 8004f6e:	ea33 030b 	bics.w	r3, r3, fp
 8004f72:	d11b      	bne.n	8004fac <_dtoa_r+0xb4>
 8004f74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f76:	f242 730f 	movw	r3, #9999	; 0x270f
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f80:	4333      	orrs	r3, r6
 8004f82:	f000 8592 	beq.w	8005aaa <_dtoa_r+0xbb2>
 8004f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f88:	b963      	cbnz	r3, 8004fa4 <_dtoa_r+0xac>
 8004f8a:	4b92      	ldr	r3, [pc, #584]	; (80051d4 <_dtoa_r+0x2dc>)
 8004f8c:	e022      	b.n	8004fd4 <_dtoa_r+0xdc>
 8004f8e:	4b92      	ldr	r3, [pc, #584]	; (80051d8 <_dtoa_r+0x2e0>)
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	3308      	adds	r3, #8
 8004f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	9801      	ldr	r0, [sp, #4]
 8004f9a:	b013      	add	sp, #76	; 0x4c
 8004f9c:	ecbd 8b04 	vpop	{d8-d9}
 8004fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fa4:	4b8b      	ldr	r3, [pc, #556]	; (80051d4 <_dtoa_r+0x2dc>)
 8004fa6:	9301      	str	r3, [sp, #4]
 8004fa8:	3303      	adds	r3, #3
 8004faa:	e7f3      	b.n	8004f94 <_dtoa_r+0x9c>
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4650      	mov	r0, sl
 8004fb2:	4659      	mov	r1, fp
 8004fb4:	f7fb fdb0 	bl	8000b18 <__aeabi_dcmpeq>
 8004fb8:	ec4b ab19 	vmov	d9, sl, fp
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	b158      	cbz	r0, 8004fd8 <_dtoa_r+0xe0>
 8004fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	6013      	str	r3, [r2, #0]
 8004fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 856b 	beq.w	8005aa4 <_dtoa_r+0xbac>
 8004fce:	4883      	ldr	r0, [pc, #524]	; (80051dc <_dtoa_r+0x2e4>)
 8004fd0:	6018      	str	r0, [r3, #0]
 8004fd2:	1e43      	subs	r3, r0, #1
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	e7df      	b.n	8004f98 <_dtoa_r+0xa0>
 8004fd8:	ec4b ab10 	vmov	d0, sl, fp
 8004fdc:	aa10      	add	r2, sp, #64	; 0x40
 8004fde:	a911      	add	r1, sp, #68	; 0x44
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 f9b3 	bl	800634c <__d2b>
 8004fe6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004fea:	ee08 0a10 	vmov	s16, r0
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	f000 8084 	beq.w	80050fc <_dtoa_r+0x204>
 8004ff4:	ee19 3a90 	vmov	r3, s19
 8004ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ffc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005000:	4656      	mov	r6, sl
 8005002:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800500a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800500e:	4b74      	ldr	r3, [pc, #464]	; (80051e0 <_dtoa_r+0x2e8>)
 8005010:	2200      	movs	r2, #0
 8005012:	4630      	mov	r0, r6
 8005014:	4639      	mov	r1, r7
 8005016:	f7fb f95f 	bl	80002d8 <__aeabi_dsub>
 800501a:	a365      	add	r3, pc, #404	; (adr r3, 80051b0 <_dtoa_r+0x2b8>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb fb12 	bl	8000648 <__aeabi_dmul>
 8005024:	a364      	add	r3, pc, #400	; (adr r3, 80051b8 <_dtoa_r+0x2c0>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	f7fb f957 	bl	80002dc <__adddf3>
 800502e:	4606      	mov	r6, r0
 8005030:	4628      	mov	r0, r5
 8005032:	460f      	mov	r7, r1
 8005034:	f7fb fa9e 	bl	8000574 <__aeabi_i2d>
 8005038:	a361      	add	r3, pc, #388	; (adr r3, 80051c0 <_dtoa_r+0x2c8>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb fb03 	bl	8000648 <__aeabi_dmul>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4630      	mov	r0, r6
 8005048:	4639      	mov	r1, r7
 800504a:	f7fb f947 	bl	80002dc <__adddf3>
 800504e:	4606      	mov	r6, r0
 8005050:	460f      	mov	r7, r1
 8005052:	f7fb fda9 	bl	8000ba8 <__aeabi_d2iz>
 8005056:	2200      	movs	r2, #0
 8005058:	9000      	str	r0, [sp, #0]
 800505a:	2300      	movs	r3, #0
 800505c:	4630      	mov	r0, r6
 800505e:	4639      	mov	r1, r7
 8005060:	f7fb fd64 	bl	8000b2c <__aeabi_dcmplt>
 8005064:	b150      	cbz	r0, 800507c <_dtoa_r+0x184>
 8005066:	9800      	ldr	r0, [sp, #0]
 8005068:	f7fb fa84 	bl	8000574 <__aeabi_i2d>
 800506c:	4632      	mov	r2, r6
 800506e:	463b      	mov	r3, r7
 8005070:	f7fb fd52 	bl	8000b18 <__aeabi_dcmpeq>
 8005074:	b910      	cbnz	r0, 800507c <_dtoa_r+0x184>
 8005076:	9b00      	ldr	r3, [sp, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	9b00      	ldr	r3, [sp, #0]
 800507e:	2b16      	cmp	r3, #22
 8005080:	d85a      	bhi.n	8005138 <_dtoa_r+0x240>
 8005082:	9a00      	ldr	r2, [sp, #0]
 8005084:	4b57      	ldr	r3, [pc, #348]	; (80051e4 <_dtoa_r+0x2ec>)
 8005086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	ec51 0b19 	vmov	r0, r1, d9
 8005092:	f7fb fd4b 	bl	8000b2c <__aeabi_dcmplt>
 8005096:	2800      	cmp	r0, #0
 8005098:	d050      	beq.n	800513c <_dtoa_r+0x244>
 800509a:	9b00      	ldr	r3, [sp, #0]
 800509c:	3b01      	subs	r3, #1
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2300      	movs	r3, #0
 80050a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050a6:	1b5d      	subs	r5, r3, r5
 80050a8:	1e6b      	subs	r3, r5, #1
 80050aa:	9305      	str	r3, [sp, #20]
 80050ac:	bf45      	ittet	mi
 80050ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80050b2:	9304      	strmi	r3, [sp, #16]
 80050b4:	2300      	movpl	r3, #0
 80050b6:	2300      	movmi	r3, #0
 80050b8:	bf4c      	ite	mi
 80050ba:	9305      	strmi	r3, [sp, #20]
 80050bc:	9304      	strpl	r3, [sp, #16]
 80050be:	9b00      	ldr	r3, [sp, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	db3d      	blt.n	8005140 <_dtoa_r+0x248>
 80050c4:	9b05      	ldr	r3, [sp, #20]
 80050c6:	9a00      	ldr	r2, [sp, #0]
 80050c8:	920a      	str	r2, [sp, #40]	; 0x28
 80050ca:	4413      	add	r3, r2
 80050cc:	9305      	str	r3, [sp, #20]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9307      	str	r3, [sp, #28]
 80050d2:	9b06      	ldr	r3, [sp, #24]
 80050d4:	2b09      	cmp	r3, #9
 80050d6:	f200 8089 	bhi.w	80051ec <_dtoa_r+0x2f4>
 80050da:	2b05      	cmp	r3, #5
 80050dc:	bfc4      	itt	gt
 80050de:	3b04      	subgt	r3, #4
 80050e0:	9306      	strgt	r3, [sp, #24]
 80050e2:	9b06      	ldr	r3, [sp, #24]
 80050e4:	f1a3 0302 	sub.w	r3, r3, #2
 80050e8:	bfcc      	ite	gt
 80050ea:	2500      	movgt	r5, #0
 80050ec:	2501      	movle	r5, #1
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	f200 8087 	bhi.w	8005202 <_dtoa_r+0x30a>
 80050f4:	e8df f003 	tbb	[pc, r3]
 80050f8:	59383a2d 	.word	0x59383a2d
 80050fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005100:	441d      	add	r5, r3
 8005102:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005106:	2b20      	cmp	r3, #32
 8005108:	bfc1      	itttt	gt
 800510a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800510e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005112:	fa0b f303 	lslgt.w	r3, fp, r3
 8005116:	fa26 f000 	lsrgt.w	r0, r6, r0
 800511a:	bfda      	itte	le
 800511c:	f1c3 0320 	rsble	r3, r3, #32
 8005120:	fa06 f003 	lslle.w	r0, r6, r3
 8005124:	4318      	orrgt	r0, r3
 8005126:	f7fb fa15 	bl	8000554 <__aeabi_ui2d>
 800512a:	2301      	movs	r3, #1
 800512c:	4606      	mov	r6, r0
 800512e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005132:	3d01      	subs	r5, #1
 8005134:	930e      	str	r3, [sp, #56]	; 0x38
 8005136:	e76a      	b.n	800500e <_dtoa_r+0x116>
 8005138:	2301      	movs	r3, #1
 800513a:	e7b2      	b.n	80050a2 <_dtoa_r+0x1aa>
 800513c:	900b      	str	r0, [sp, #44]	; 0x2c
 800513e:	e7b1      	b.n	80050a4 <_dtoa_r+0x1ac>
 8005140:	9b04      	ldr	r3, [sp, #16]
 8005142:	9a00      	ldr	r2, [sp, #0]
 8005144:	1a9b      	subs	r3, r3, r2
 8005146:	9304      	str	r3, [sp, #16]
 8005148:	4253      	negs	r3, r2
 800514a:	9307      	str	r3, [sp, #28]
 800514c:	2300      	movs	r3, #0
 800514e:	930a      	str	r3, [sp, #40]	; 0x28
 8005150:	e7bf      	b.n	80050d2 <_dtoa_r+0x1da>
 8005152:	2300      	movs	r3, #0
 8005154:	9308      	str	r3, [sp, #32]
 8005156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	dc55      	bgt.n	8005208 <_dtoa_r+0x310>
 800515c:	2301      	movs	r3, #1
 800515e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005162:	461a      	mov	r2, r3
 8005164:	9209      	str	r2, [sp, #36]	; 0x24
 8005166:	e00c      	b.n	8005182 <_dtoa_r+0x28a>
 8005168:	2301      	movs	r3, #1
 800516a:	e7f3      	b.n	8005154 <_dtoa_r+0x25c>
 800516c:	2300      	movs	r3, #0
 800516e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005170:	9308      	str	r3, [sp, #32]
 8005172:	9b00      	ldr	r3, [sp, #0]
 8005174:	4413      	add	r3, r2
 8005176:	9302      	str	r3, [sp, #8]
 8005178:	3301      	adds	r3, #1
 800517a:	2b01      	cmp	r3, #1
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	bfb8      	it	lt
 8005180:	2301      	movlt	r3, #1
 8005182:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005184:	2200      	movs	r2, #0
 8005186:	6042      	str	r2, [r0, #4]
 8005188:	2204      	movs	r2, #4
 800518a:	f102 0614 	add.w	r6, r2, #20
 800518e:	429e      	cmp	r6, r3
 8005190:	6841      	ldr	r1, [r0, #4]
 8005192:	d93d      	bls.n	8005210 <_dtoa_r+0x318>
 8005194:	4620      	mov	r0, r4
 8005196:	f000 fdb1 	bl	8005cfc <_Balloc>
 800519a:	9001      	str	r0, [sp, #4]
 800519c:	2800      	cmp	r0, #0
 800519e:	d13b      	bne.n	8005218 <_dtoa_r+0x320>
 80051a0:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <_dtoa_r+0x2f0>)
 80051a2:	4602      	mov	r2, r0
 80051a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80051a8:	e6c0      	b.n	8004f2c <_dtoa_r+0x34>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e7df      	b.n	800516e <_dtoa_r+0x276>
 80051ae:	bf00      	nop
 80051b0:	636f4361 	.word	0x636f4361
 80051b4:	3fd287a7 	.word	0x3fd287a7
 80051b8:	8b60c8b3 	.word	0x8b60c8b3
 80051bc:	3fc68a28 	.word	0x3fc68a28
 80051c0:	509f79fb 	.word	0x509f79fb
 80051c4:	3fd34413 	.word	0x3fd34413
 80051c8:	08007021 	.word	0x08007021
 80051cc:	08007038 	.word	0x08007038
 80051d0:	7ff00000 	.word	0x7ff00000
 80051d4:	0800701d 	.word	0x0800701d
 80051d8:	08007014 	.word	0x08007014
 80051dc:	08006ff1 	.word	0x08006ff1
 80051e0:	3ff80000 	.word	0x3ff80000
 80051e4:	08007188 	.word	0x08007188
 80051e8:	08007093 	.word	0x08007093
 80051ec:	2501      	movs	r5, #1
 80051ee:	2300      	movs	r3, #0
 80051f0:	9306      	str	r3, [sp, #24]
 80051f2:	9508      	str	r5, [sp, #32]
 80051f4:	f04f 33ff 	mov.w	r3, #4294967295
 80051f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2312      	movs	r3, #18
 8005200:	e7b0      	b.n	8005164 <_dtoa_r+0x26c>
 8005202:	2301      	movs	r3, #1
 8005204:	9308      	str	r3, [sp, #32]
 8005206:	e7f5      	b.n	80051f4 <_dtoa_r+0x2fc>
 8005208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800520e:	e7b8      	b.n	8005182 <_dtoa_r+0x28a>
 8005210:	3101      	adds	r1, #1
 8005212:	6041      	str	r1, [r0, #4]
 8005214:	0052      	lsls	r2, r2, #1
 8005216:	e7b8      	b.n	800518a <_dtoa_r+0x292>
 8005218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800521a:	9a01      	ldr	r2, [sp, #4]
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	9b03      	ldr	r3, [sp, #12]
 8005220:	2b0e      	cmp	r3, #14
 8005222:	f200 809d 	bhi.w	8005360 <_dtoa_r+0x468>
 8005226:	2d00      	cmp	r5, #0
 8005228:	f000 809a 	beq.w	8005360 <_dtoa_r+0x468>
 800522c:	9b00      	ldr	r3, [sp, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	dd32      	ble.n	8005298 <_dtoa_r+0x3a0>
 8005232:	4ab7      	ldr	r2, [pc, #732]	; (8005510 <_dtoa_r+0x618>)
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800523c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005240:	9b00      	ldr	r3, [sp, #0]
 8005242:	05d8      	lsls	r0, r3, #23
 8005244:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005248:	d516      	bpl.n	8005278 <_dtoa_r+0x380>
 800524a:	4bb2      	ldr	r3, [pc, #712]	; (8005514 <_dtoa_r+0x61c>)
 800524c:	ec51 0b19 	vmov	r0, r1, d9
 8005250:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005254:	f7fb fb22 	bl	800089c <__aeabi_ddiv>
 8005258:	f007 070f 	and.w	r7, r7, #15
 800525c:	4682      	mov	sl, r0
 800525e:	468b      	mov	fp, r1
 8005260:	2503      	movs	r5, #3
 8005262:	4eac      	ldr	r6, [pc, #688]	; (8005514 <_dtoa_r+0x61c>)
 8005264:	b957      	cbnz	r7, 800527c <_dtoa_r+0x384>
 8005266:	4642      	mov	r2, r8
 8005268:	464b      	mov	r3, r9
 800526a:	4650      	mov	r0, sl
 800526c:	4659      	mov	r1, fp
 800526e:	f7fb fb15 	bl	800089c <__aeabi_ddiv>
 8005272:	4682      	mov	sl, r0
 8005274:	468b      	mov	fp, r1
 8005276:	e028      	b.n	80052ca <_dtoa_r+0x3d2>
 8005278:	2502      	movs	r5, #2
 800527a:	e7f2      	b.n	8005262 <_dtoa_r+0x36a>
 800527c:	07f9      	lsls	r1, r7, #31
 800527e:	d508      	bpl.n	8005292 <_dtoa_r+0x39a>
 8005280:	4640      	mov	r0, r8
 8005282:	4649      	mov	r1, r9
 8005284:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005288:	f7fb f9de 	bl	8000648 <__aeabi_dmul>
 800528c:	3501      	adds	r5, #1
 800528e:	4680      	mov	r8, r0
 8005290:	4689      	mov	r9, r1
 8005292:	107f      	asrs	r7, r7, #1
 8005294:	3608      	adds	r6, #8
 8005296:	e7e5      	b.n	8005264 <_dtoa_r+0x36c>
 8005298:	f000 809b 	beq.w	80053d2 <_dtoa_r+0x4da>
 800529c:	9b00      	ldr	r3, [sp, #0]
 800529e:	4f9d      	ldr	r7, [pc, #628]	; (8005514 <_dtoa_r+0x61c>)
 80052a0:	425e      	negs	r6, r3
 80052a2:	4b9b      	ldr	r3, [pc, #620]	; (8005510 <_dtoa_r+0x618>)
 80052a4:	f006 020f 	and.w	r2, r6, #15
 80052a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	ec51 0b19 	vmov	r0, r1, d9
 80052b4:	f7fb f9c8 	bl	8000648 <__aeabi_dmul>
 80052b8:	1136      	asrs	r6, r6, #4
 80052ba:	4682      	mov	sl, r0
 80052bc:	468b      	mov	fp, r1
 80052be:	2300      	movs	r3, #0
 80052c0:	2502      	movs	r5, #2
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	d17a      	bne.n	80053bc <_dtoa_r+0x4c4>
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1d3      	bne.n	8005272 <_dtoa_r+0x37a>
 80052ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8082 	beq.w	80053d6 <_dtoa_r+0x4de>
 80052d2:	4b91      	ldr	r3, [pc, #580]	; (8005518 <_dtoa_r+0x620>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	4650      	mov	r0, sl
 80052d8:	4659      	mov	r1, fp
 80052da:	f7fb fc27 	bl	8000b2c <__aeabi_dcmplt>
 80052de:	2800      	cmp	r0, #0
 80052e0:	d079      	beq.n	80053d6 <_dtoa_r+0x4de>
 80052e2:	9b03      	ldr	r3, [sp, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d076      	beq.n	80053d6 <_dtoa_r+0x4de>
 80052e8:	9b02      	ldr	r3, [sp, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dd36      	ble.n	800535c <_dtoa_r+0x464>
 80052ee:	9b00      	ldr	r3, [sp, #0]
 80052f0:	4650      	mov	r0, sl
 80052f2:	4659      	mov	r1, fp
 80052f4:	1e5f      	subs	r7, r3, #1
 80052f6:	2200      	movs	r2, #0
 80052f8:	4b88      	ldr	r3, [pc, #544]	; (800551c <_dtoa_r+0x624>)
 80052fa:	f7fb f9a5 	bl	8000648 <__aeabi_dmul>
 80052fe:	9e02      	ldr	r6, [sp, #8]
 8005300:	4682      	mov	sl, r0
 8005302:	468b      	mov	fp, r1
 8005304:	3501      	adds	r5, #1
 8005306:	4628      	mov	r0, r5
 8005308:	f7fb f934 	bl	8000574 <__aeabi_i2d>
 800530c:	4652      	mov	r2, sl
 800530e:	465b      	mov	r3, fp
 8005310:	f7fb f99a 	bl	8000648 <__aeabi_dmul>
 8005314:	4b82      	ldr	r3, [pc, #520]	; (8005520 <_dtoa_r+0x628>)
 8005316:	2200      	movs	r2, #0
 8005318:	f7fa ffe0 	bl	80002dc <__adddf3>
 800531c:	46d0      	mov	r8, sl
 800531e:	46d9      	mov	r9, fp
 8005320:	4682      	mov	sl, r0
 8005322:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005326:	2e00      	cmp	r6, #0
 8005328:	d158      	bne.n	80053dc <_dtoa_r+0x4e4>
 800532a:	4b7e      	ldr	r3, [pc, #504]	; (8005524 <_dtoa_r+0x62c>)
 800532c:	2200      	movs	r2, #0
 800532e:	4640      	mov	r0, r8
 8005330:	4649      	mov	r1, r9
 8005332:	f7fa ffd1 	bl	80002d8 <__aeabi_dsub>
 8005336:	4652      	mov	r2, sl
 8005338:	465b      	mov	r3, fp
 800533a:	4680      	mov	r8, r0
 800533c:	4689      	mov	r9, r1
 800533e:	f7fb fc13 	bl	8000b68 <__aeabi_dcmpgt>
 8005342:	2800      	cmp	r0, #0
 8005344:	f040 8295 	bne.w	8005872 <_dtoa_r+0x97a>
 8005348:	4652      	mov	r2, sl
 800534a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f7fb fbeb 	bl	8000b2c <__aeabi_dcmplt>
 8005356:	2800      	cmp	r0, #0
 8005358:	f040 8289 	bne.w	800586e <_dtoa_r+0x976>
 800535c:	ec5b ab19 	vmov	sl, fp, d9
 8005360:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005362:	2b00      	cmp	r3, #0
 8005364:	f2c0 8148 	blt.w	80055f8 <_dtoa_r+0x700>
 8005368:	9a00      	ldr	r2, [sp, #0]
 800536a:	2a0e      	cmp	r2, #14
 800536c:	f300 8144 	bgt.w	80055f8 <_dtoa_r+0x700>
 8005370:	4b67      	ldr	r3, [pc, #412]	; (8005510 <_dtoa_r+0x618>)
 8005372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005376:	e9d3 8900 	ldrd	r8, r9, [r3]
 800537a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	f280 80d5 	bge.w	800552c <_dtoa_r+0x634>
 8005382:	9b03      	ldr	r3, [sp, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	f300 80d1 	bgt.w	800552c <_dtoa_r+0x634>
 800538a:	f040 826f 	bne.w	800586c <_dtoa_r+0x974>
 800538e:	4b65      	ldr	r3, [pc, #404]	; (8005524 <_dtoa_r+0x62c>)
 8005390:	2200      	movs	r2, #0
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	f7fb f957 	bl	8000648 <__aeabi_dmul>
 800539a:	4652      	mov	r2, sl
 800539c:	465b      	mov	r3, fp
 800539e:	f7fb fbd9 	bl	8000b54 <__aeabi_dcmpge>
 80053a2:	9e03      	ldr	r6, [sp, #12]
 80053a4:	4637      	mov	r7, r6
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f040 8245 	bne.w	8005836 <_dtoa_r+0x93e>
 80053ac:	9d01      	ldr	r5, [sp, #4]
 80053ae:	2331      	movs	r3, #49	; 0x31
 80053b0:	f805 3b01 	strb.w	r3, [r5], #1
 80053b4:	9b00      	ldr	r3, [sp, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	e240      	b.n	800583e <_dtoa_r+0x946>
 80053bc:	07f2      	lsls	r2, r6, #31
 80053be:	d505      	bpl.n	80053cc <_dtoa_r+0x4d4>
 80053c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c4:	f7fb f940 	bl	8000648 <__aeabi_dmul>
 80053c8:	3501      	adds	r5, #1
 80053ca:	2301      	movs	r3, #1
 80053cc:	1076      	asrs	r6, r6, #1
 80053ce:	3708      	adds	r7, #8
 80053d0:	e777      	b.n	80052c2 <_dtoa_r+0x3ca>
 80053d2:	2502      	movs	r5, #2
 80053d4:	e779      	b.n	80052ca <_dtoa_r+0x3d2>
 80053d6:	9f00      	ldr	r7, [sp, #0]
 80053d8:	9e03      	ldr	r6, [sp, #12]
 80053da:	e794      	b.n	8005306 <_dtoa_r+0x40e>
 80053dc:	9901      	ldr	r1, [sp, #4]
 80053de:	4b4c      	ldr	r3, [pc, #304]	; (8005510 <_dtoa_r+0x618>)
 80053e0:	4431      	add	r1, r6
 80053e2:	910d      	str	r1, [sp, #52]	; 0x34
 80053e4:	9908      	ldr	r1, [sp, #32]
 80053e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80053ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80053ee:	2900      	cmp	r1, #0
 80053f0:	d043      	beq.n	800547a <_dtoa_r+0x582>
 80053f2:	494d      	ldr	r1, [pc, #308]	; (8005528 <_dtoa_r+0x630>)
 80053f4:	2000      	movs	r0, #0
 80053f6:	f7fb fa51 	bl	800089c <__aeabi_ddiv>
 80053fa:	4652      	mov	r2, sl
 80053fc:	465b      	mov	r3, fp
 80053fe:	f7fa ff6b 	bl	80002d8 <__aeabi_dsub>
 8005402:	9d01      	ldr	r5, [sp, #4]
 8005404:	4682      	mov	sl, r0
 8005406:	468b      	mov	fp, r1
 8005408:	4649      	mov	r1, r9
 800540a:	4640      	mov	r0, r8
 800540c:	f7fb fbcc 	bl	8000ba8 <__aeabi_d2iz>
 8005410:	4606      	mov	r6, r0
 8005412:	f7fb f8af 	bl	8000574 <__aeabi_i2d>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4640      	mov	r0, r8
 800541c:	4649      	mov	r1, r9
 800541e:	f7fa ff5b 	bl	80002d8 <__aeabi_dsub>
 8005422:	3630      	adds	r6, #48	; 0x30
 8005424:	f805 6b01 	strb.w	r6, [r5], #1
 8005428:	4652      	mov	r2, sl
 800542a:	465b      	mov	r3, fp
 800542c:	4680      	mov	r8, r0
 800542e:	4689      	mov	r9, r1
 8005430:	f7fb fb7c 	bl	8000b2c <__aeabi_dcmplt>
 8005434:	2800      	cmp	r0, #0
 8005436:	d163      	bne.n	8005500 <_dtoa_r+0x608>
 8005438:	4642      	mov	r2, r8
 800543a:	464b      	mov	r3, r9
 800543c:	4936      	ldr	r1, [pc, #216]	; (8005518 <_dtoa_r+0x620>)
 800543e:	2000      	movs	r0, #0
 8005440:	f7fa ff4a 	bl	80002d8 <__aeabi_dsub>
 8005444:	4652      	mov	r2, sl
 8005446:	465b      	mov	r3, fp
 8005448:	f7fb fb70 	bl	8000b2c <__aeabi_dcmplt>
 800544c:	2800      	cmp	r0, #0
 800544e:	f040 80b5 	bne.w	80055bc <_dtoa_r+0x6c4>
 8005452:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005454:	429d      	cmp	r5, r3
 8005456:	d081      	beq.n	800535c <_dtoa_r+0x464>
 8005458:	4b30      	ldr	r3, [pc, #192]	; (800551c <_dtoa_r+0x624>)
 800545a:	2200      	movs	r2, #0
 800545c:	4650      	mov	r0, sl
 800545e:	4659      	mov	r1, fp
 8005460:	f7fb f8f2 	bl	8000648 <__aeabi_dmul>
 8005464:	4b2d      	ldr	r3, [pc, #180]	; (800551c <_dtoa_r+0x624>)
 8005466:	4682      	mov	sl, r0
 8005468:	468b      	mov	fp, r1
 800546a:	4640      	mov	r0, r8
 800546c:	4649      	mov	r1, r9
 800546e:	2200      	movs	r2, #0
 8005470:	f7fb f8ea 	bl	8000648 <__aeabi_dmul>
 8005474:	4680      	mov	r8, r0
 8005476:	4689      	mov	r9, r1
 8005478:	e7c6      	b.n	8005408 <_dtoa_r+0x510>
 800547a:	4650      	mov	r0, sl
 800547c:	4659      	mov	r1, fp
 800547e:	f7fb f8e3 	bl	8000648 <__aeabi_dmul>
 8005482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005484:	9d01      	ldr	r5, [sp, #4]
 8005486:	930f      	str	r3, [sp, #60]	; 0x3c
 8005488:	4682      	mov	sl, r0
 800548a:	468b      	mov	fp, r1
 800548c:	4649      	mov	r1, r9
 800548e:	4640      	mov	r0, r8
 8005490:	f7fb fb8a 	bl	8000ba8 <__aeabi_d2iz>
 8005494:	4606      	mov	r6, r0
 8005496:	f7fb f86d 	bl	8000574 <__aeabi_i2d>
 800549a:	3630      	adds	r6, #48	; 0x30
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fa ff18 	bl	80002d8 <__aeabi_dsub>
 80054a8:	f805 6b01 	strb.w	r6, [r5], #1
 80054ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ae:	429d      	cmp	r5, r3
 80054b0:	4680      	mov	r8, r0
 80054b2:	4689      	mov	r9, r1
 80054b4:	f04f 0200 	mov.w	r2, #0
 80054b8:	d124      	bne.n	8005504 <_dtoa_r+0x60c>
 80054ba:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <_dtoa_r+0x630>)
 80054bc:	4650      	mov	r0, sl
 80054be:	4659      	mov	r1, fp
 80054c0:	f7fa ff0c 	bl	80002dc <__adddf3>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4640      	mov	r0, r8
 80054ca:	4649      	mov	r1, r9
 80054cc:	f7fb fb4c 	bl	8000b68 <__aeabi_dcmpgt>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d173      	bne.n	80055bc <_dtoa_r+0x6c4>
 80054d4:	4652      	mov	r2, sl
 80054d6:	465b      	mov	r3, fp
 80054d8:	4913      	ldr	r1, [pc, #76]	; (8005528 <_dtoa_r+0x630>)
 80054da:	2000      	movs	r0, #0
 80054dc:	f7fa fefc 	bl	80002d8 <__aeabi_dsub>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4640      	mov	r0, r8
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7fb fb20 	bl	8000b2c <__aeabi_dcmplt>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	f43f af35 	beq.w	800535c <_dtoa_r+0x464>
 80054f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80054f4:	1e6b      	subs	r3, r5, #1
 80054f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80054f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80054fc:	2b30      	cmp	r3, #48	; 0x30
 80054fe:	d0f8      	beq.n	80054f2 <_dtoa_r+0x5fa>
 8005500:	9700      	str	r7, [sp, #0]
 8005502:	e049      	b.n	8005598 <_dtoa_r+0x6a0>
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <_dtoa_r+0x624>)
 8005506:	f7fb f89f 	bl	8000648 <__aeabi_dmul>
 800550a:	4680      	mov	r8, r0
 800550c:	4689      	mov	r9, r1
 800550e:	e7bd      	b.n	800548c <_dtoa_r+0x594>
 8005510:	08007188 	.word	0x08007188
 8005514:	08007160 	.word	0x08007160
 8005518:	3ff00000 	.word	0x3ff00000
 800551c:	40240000 	.word	0x40240000
 8005520:	401c0000 	.word	0x401c0000
 8005524:	40140000 	.word	0x40140000
 8005528:	3fe00000 	.word	0x3fe00000
 800552c:	9d01      	ldr	r5, [sp, #4]
 800552e:	4656      	mov	r6, sl
 8005530:	465f      	mov	r7, fp
 8005532:	4642      	mov	r2, r8
 8005534:	464b      	mov	r3, r9
 8005536:	4630      	mov	r0, r6
 8005538:	4639      	mov	r1, r7
 800553a:	f7fb f9af 	bl	800089c <__aeabi_ddiv>
 800553e:	f7fb fb33 	bl	8000ba8 <__aeabi_d2iz>
 8005542:	4682      	mov	sl, r0
 8005544:	f7fb f816 	bl	8000574 <__aeabi_i2d>
 8005548:	4642      	mov	r2, r8
 800554a:	464b      	mov	r3, r9
 800554c:	f7fb f87c 	bl	8000648 <__aeabi_dmul>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800555c:	f7fa febc 	bl	80002d8 <__aeabi_dsub>
 8005560:	f805 6b01 	strb.w	r6, [r5], #1
 8005564:	9e01      	ldr	r6, [sp, #4]
 8005566:	9f03      	ldr	r7, [sp, #12]
 8005568:	1bae      	subs	r6, r5, r6
 800556a:	42b7      	cmp	r7, r6
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	d135      	bne.n	80055de <_dtoa_r+0x6e6>
 8005572:	f7fa feb3 	bl	80002dc <__adddf3>
 8005576:	4642      	mov	r2, r8
 8005578:	464b      	mov	r3, r9
 800557a:	4606      	mov	r6, r0
 800557c:	460f      	mov	r7, r1
 800557e:	f7fb faf3 	bl	8000b68 <__aeabi_dcmpgt>
 8005582:	b9d0      	cbnz	r0, 80055ba <_dtoa_r+0x6c2>
 8005584:	4642      	mov	r2, r8
 8005586:	464b      	mov	r3, r9
 8005588:	4630      	mov	r0, r6
 800558a:	4639      	mov	r1, r7
 800558c:	f7fb fac4 	bl	8000b18 <__aeabi_dcmpeq>
 8005590:	b110      	cbz	r0, 8005598 <_dtoa_r+0x6a0>
 8005592:	f01a 0f01 	tst.w	sl, #1
 8005596:	d110      	bne.n	80055ba <_dtoa_r+0x6c2>
 8005598:	4620      	mov	r0, r4
 800559a:	ee18 1a10 	vmov	r1, s16
 800559e:	f000 fbed 	bl	8005d7c <_Bfree>
 80055a2:	2300      	movs	r3, #0
 80055a4:	9800      	ldr	r0, [sp, #0]
 80055a6:	702b      	strb	r3, [r5, #0]
 80055a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055aa:	3001      	adds	r0, #1
 80055ac:	6018      	str	r0, [r3, #0]
 80055ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f43f acf1 	beq.w	8004f98 <_dtoa_r+0xa0>
 80055b6:	601d      	str	r5, [r3, #0]
 80055b8:	e4ee      	b.n	8004f98 <_dtoa_r+0xa0>
 80055ba:	9f00      	ldr	r7, [sp, #0]
 80055bc:	462b      	mov	r3, r5
 80055be:	461d      	mov	r5, r3
 80055c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055c4:	2a39      	cmp	r2, #57	; 0x39
 80055c6:	d106      	bne.n	80055d6 <_dtoa_r+0x6de>
 80055c8:	9a01      	ldr	r2, [sp, #4]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d1f7      	bne.n	80055be <_dtoa_r+0x6c6>
 80055ce:	9901      	ldr	r1, [sp, #4]
 80055d0:	2230      	movs	r2, #48	; 0x30
 80055d2:	3701      	adds	r7, #1
 80055d4:	700a      	strb	r2, [r1, #0]
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	3201      	adds	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e790      	b.n	8005500 <_dtoa_r+0x608>
 80055de:	4ba6      	ldr	r3, [pc, #664]	; (8005878 <_dtoa_r+0x980>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	f7fb f831 	bl	8000648 <__aeabi_dmul>
 80055e6:	2200      	movs	r2, #0
 80055e8:	2300      	movs	r3, #0
 80055ea:	4606      	mov	r6, r0
 80055ec:	460f      	mov	r7, r1
 80055ee:	f7fb fa93 	bl	8000b18 <__aeabi_dcmpeq>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d09d      	beq.n	8005532 <_dtoa_r+0x63a>
 80055f6:	e7cf      	b.n	8005598 <_dtoa_r+0x6a0>
 80055f8:	9a08      	ldr	r2, [sp, #32]
 80055fa:	2a00      	cmp	r2, #0
 80055fc:	f000 80d7 	beq.w	80057ae <_dtoa_r+0x8b6>
 8005600:	9a06      	ldr	r2, [sp, #24]
 8005602:	2a01      	cmp	r2, #1
 8005604:	f300 80ba 	bgt.w	800577c <_dtoa_r+0x884>
 8005608:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800560a:	2a00      	cmp	r2, #0
 800560c:	f000 80b2 	beq.w	8005774 <_dtoa_r+0x87c>
 8005610:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005614:	9e07      	ldr	r6, [sp, #28]
 8005616:	9d04      	ldr	r5, [sp, #16]
 8005618:	9a04      	ldr	r2, [sp, #16]
 800561a:	441a      	add	r2, r3
 800561c:	9204      	str	r2, [sp, #16]
 800561e:	9a05      	ldr	r2, [sp, #20]
 8005620:	2101      	movs	r1, #1
 8005622:	441a      	add	r2, r3
 8005624:	4620      	mov	r0, r4
 8005626:	9205      	str	r2, [sp, #20]
 8005628:	f000 fc60 	bl	8005eec <__i2b>
 800562c:	4607      	mov	r7, r0
 800562e:	2d00      	cmp	r5, #0
 8005630:	dd0c      	ble.n	800564c <_dtoa_r+0x754>
 8005632:	9b05      	ldr	r3, [sp, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	dd09      	ble.n	800564c <_dtoa_r+0x754>
 8005638:	42ab      	cmp	r3, r5
 800563a:	9a04      	ldr	r2, [sp, #16]
 800563c:	bfa8      	it	ge
 800563e:	462b      	movge	r3, r5
 8005640:	1ad2      	subs	r2, r2, r3
 8005642:	9204      	str	r2, [sp, #16]
 8005644:	9a05      	ldr	r2, [sp, #20]
 8005646:	1aed      	subs	r5, r5, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	9305      	str	r3, [sp, #20]
 800564c:	9b07      	ldr	r3, [sp, #28]
 800564e:	b31b      	cbz	r3, 8005698 <_dtoa_r+0x7a0>
 8005650:	9b08      	ldr	r3, [sp, #32]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 80af 	beq.w	80057b6 <_dtoa_r+0x8be>
 8005658:	2e00      	cmp	r6, #0
 800565a:	dd13      	ble.n	8005684 <_dtoa_r+0x78c>
 800565c:	4639      	mov	r1, r7
 800565e:	4632      	mov	r2, r6
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fd03 	bl	800606c <__pow5mult>
 8005666:	ee18 2a10 	vmov	r2, s16
 800566a:	4601      	mov	r1, r0
 800566c:	4607      	mov	r7, r0
 800566e:	4620      	mov	r0, r4
 8005670:	f000 fc52 	bl	8005f18 <__multiply>
 8005674:	ee18 1a10 	vmov	r1, s16
 8005678:	4680      	mov	r8, r0
 800567a:	4620      	mov	r0, r4
 800567c:	f000 fb7e 	bl	8005d7c <_Bfree>
 8005680:	ee08 8a10 	vmov	s16, r8
 8005684:	9b07      	ldr	r3, [sp, #28]
 8005686:	1b9a      	subs	r2, r3, r6
 8005688:	d006      	beq.n	8005698 <_dtoa_r+0x7a0>
 800568a:	ee18 1a10 	vmov	r1, s16
 800568e:	4620      	mov	r0, r4
 8005690:	f000 fcec 	bl	800606c <__pow5mult>
 8005694:	ee08 0a10 	vmov	s16, r0
 8005698:	2101      	movs	r1, #1
 800569a:	4620      	mov	r0, r4
 800569c:	f000 fc26 	bl	8005eec <__i2b>
 80056a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	4606      	mov	r6, r0
 80056a6:	f340 8088 	ble.w	80057ba <_dtoa_r+0x8c2>
 80056aa:	461a      	mov	r2, r3
 80056ac:	4601      	mov	r1, r0
 80056ae:	4620      	mov	r0, r4
 80056b0:	f000 fcdc 	bl	800606c <__pow5mult>
 80056b4:	9b06      	ldr	r3, [sp, #24]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	4606      	mov	r6, r0
 80056ba:	f340 8081 	ble.w	80057c0 <_dtoa_r+0x8c8>
 80056be:	f04f 0800 	mov.w	r8, #0
 80056c2:	6933      	ldr	r3, [r6, #16]
 80056c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80056c8:	6918      	ldr	r0, [r3, #16]
 80056ca:	f000 fbbf 	bl	8005e4c <__hi0bits>
 80056ce:	f1c0 0020 	rsb	r0, r0, #32
 80056d2:	9b05      	ldr	r3, [sp, #20]
 80056d4:	4418      	add	r0, r3
 80056d6:	f010 001f 	ands.w	r0, r0, #31
 80056da:	f000 8092 	beq.w	8005802 <_dtoa_r+0x90a>
 80056de:	f1c0 0320 	rsb	r3, r0, #32
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	f340 808a 	ble.w	80057fc <_dtoa_r+0x904>
 80056e8:	f1c0 001c 	rsb	r0, r0, #28
 80056ec:	9b04      	ldr	r3, [sp, #16]
 80056ee:	4403      	add	r3, r0
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	9b05      	ldr	r3, [sp, #20]
 80056f4:	4403      	add	r3, r0
 80056f6:	4405      	add	r5, r0
 80056f8:	9305      	str	r3, [sp, #20]
 80056fa:	9b04      	ldr	r3, [sp, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dd07      	ble.n	8005710 <_dtoa_r+0x818>
 8005700:	ee18 1a10 	vmov	r1, s16
 8005704:	461a      	mov	r2, r3
 8005706:	4620      	mov	r0, r4
 8005708:	f000 fd0a 	bl	8006120 <__lshift>
 800570c:	ee08 0a10 	vmov	s16, r0
 8005710:	9b05      	ldr	r3, [sp, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd05      	ble.n	8005722 <_dtoa_r+0x82a>
 8005716:	4631      	mov	r1, r6
 8005718:	461a      	mov	r2, r3
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fd00 	bl	8006120 <__lshift>
 8005720:	4606      	mov	r6, r0
 8005722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d06e      	beq.n	8005806 <_dtoa_r+0x90e>
 8005728:	ee18 0a10 	vmov	r0, s16
 800572c:	4631      	mov	r1, r6
 800572e:	f000 fd67 	bl	8006200 <__mcmp>
 8005732:	2800      	cmp	r0, #0
 8005734:	da67      	bge.n	8005806 <_dtoa_r+0x90e>
 8005736:	9b00      	ldr	r3, [sp, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	ee18 1a10 	vmov	r1, s16
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	220a      	movs	r2, #10
 8005742:	2300      	movs	r3, #0
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fb3b 	bl	8005dc0 <__multadd>
 800574a:	9b08      	ldr	r3, [sp, #32]
 800574c:	ee08 0a10 	vmov	s16, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 81b1 	beq.w	8005ab8 <_dtoa_r+0xbc0>
 8005756:	2300      	movs	r3, #0
 8005758:	4639      	mov	r1, r7
 800575a:	220a      	movs	r2, #10
 800575c:	4620      	mov	r0, r4
 800575e:	f000 fb2f 	bl	8005dc0 <__multadd>
 8005762:	9b02      	ldr	r3, [sp, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	4607      	mov	r7, r0
 8005768:	f300 808e 	bgt.w	8005888 <_dtoa_r+0x990>
 800576c:	9b06      	ldr	r3, [sp, #24]
 800576e:	2b02      	cmp	r3, #2
 8005770:	dc51      	bgt.n	8005816 <_dtoa_r+0x91e>
 8005772:	e089      	b.n	8005888 <_dtoa_r+0x990>
 8005774:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005776:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800577a:	e74b      	b.n	8005614 <_dtoa_r+0x71c>
 800577c:	9b03      	ldr	r3, [sp, #12]
 800577e:	1e5e      	subs	r6, r3, #1
 8005780:	9b07      	ldr	r3, [sp, #28]
 8005782:	42b3      	cmp	r3, r6
 8005784:	bfbf      	itttt	lt
 8005786:	9b07      	ldrlt	r3, [sp, #28]
 8005788:	9607      	strlt	r6, [sp, #28]
 800578a:	1af2      	sublt	r2, r6, r3
 800578c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800578e:	bfb6      	itet	lt
 8005790:	189b      	addlt	r3, r3, r2
 8005792:	1b9e      	subge	r6, r3, r6
 8005794:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	bfb8      	it	lt
 800579a:	2600      	movlt	r6, #0
 800579c:	2b00      	cmp	r3, #0
 800579e:	bfb7      	itett	lt
 80057a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80057a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80057a8:	1a9d      	sublt	r5, r3, r2
 80057aa:	2300      	movlt	r3, #0
 80057ac:	e734      	b.n	8005618 <_dtoa_r+0x720>
 80057ae:	9e07      	ldr	r6, [sp, #28]
 80057b0:	9d04      	ldr	r5, [sp, #16]
 80057b2:	9f08      	ldr	r7, [sp, #32]
 80057b4:	e73b      	b.n	800562e <_dtoa_r+0x736>
 80057b6:	9a07      	ldr	r2, [sp, #28]
 80057b8:	e767      	b.n	800568a <_dtoa_r+0x792>
 80057ba:	9b06      	ldr	r3, [sp, #24]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	dc18      	bgt.n	80057f2 <_dtoa_r+0x8fa>
 80057c0:	f1ba 0f00 	cmp.w	sl, #0
 80057c4:	d115      	bne.n	80057f2 <_dtoa_r+0x8fa>
 80057c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057ca:	b993      	cbnz	r3, 80057f2 <_dtoa_r+0x8fa>
 80057cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80057d0:	0d1b      	lsrs	r3, r3, #20
 80057d2:	051b      	lsls	r3, r3, #20
 80057d4:	b183      	cbz	r3, 80057f8 <_dtoa_r+0x900>
 80057d6:	9b04      	ldr	r3, [sp, #16]
 80057d8:	3301      	adds	r3, #1
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	9b05      	ldr	r3, [sp, #20]
 80057de:	3301      	adds	r3, #1
 80057e0:	9305      	str	r3, [sp, #20]
 80057e2:	f04f 0801 	mov.w	r8, #1
 80057e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f47f af6a 	bne.w	80056c2 <_dtoa_r+0x7ca>
 80057ee:	2001      	movs	r0, #1
 80057f0:	e76f      	b.n	80056d2 <_dtoa_r+0x7da>
 80057f2:	f04f 0800 	mov.w	r8, #0
 80057f6:	e7f6      	b.n	80057e6 <_dtoa_r+0x8ee>
 80057f8:	4698      	mov	r8, r3
 80057fa:	e7f4      	b.n	80057e6 <_dtoa_r+0x8ee>
 80057fc:	f43f af7d 	beq.w	80056fa <_dtoa_r+0x802>
 8005800:	4618      	mov	r0, r3
 8005802:	301c      	adds	r0, #28
 8005804:	e772      	b.n	80056ec <_dtoa_r+0x7f4>
 8005806:	9b03      	ldr	r3, [sp, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dc37      	bgt.n	800587c <_dtoa_r+0x984>
 800580c:	9b06      	ldr	r3, [sp, #24]
 800580e:	2b02      	cmp	r3, #2
 8005810:	dd34      	ble.n	800587c <_dtoa_r+0x984>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	9302      	str	r3, [sp, #8]
 8005816:	9b02      	ldr	r3, [sp, #8]
 8005818:	b96b      	cbnz	r3, 8005836 <_dtoa_r+0x93e>
 800581a:	4631      	mov	r1, r6
 800581c:	2205      	movs	r2, #5
 800581e:	4620      	mov	r0, r4
 8005820:	f000 face 	bl	8005dc0 <__multadd>
 8005824:	4601      	mov	r1, r0
 8005826:	4606      	mov	r6, r0
 8005828:	ee18 0a10 	vmov	r0, s16
 800582c:	f000 fce8 	bl	8006200 <__mcmp>
 8005830:	2800      	cmp	r0, #0
 8005832:	f73f adbb 	bgt.w	80053ac <_dtoa_r+0x4b4>
 8005836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005838:	9d01      	ldr	r5, [sp, #4]
 800583a:	43db      	mvns	r3, r3
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	f04f 0800 	mov.w	r8, #0
 8005842:	4631      	mov	r1, r6
 8005844:	4620      	mov	r0, r4
 8005846:	f000 fa99 	bl	8005d7c <_Bfree>
 800584a:	2f00      	cmp	r7, #0
 800584c:	f43f aea4 	beq.w	8005598 <_dtoa_r+0x6a0>
 8005850:	f1b8 0f00 	cmp.w	r8, #0
 8005854:	d005      	beq.n	8005862 <_dtoa_r+0x96a>
 8005856:	45b8      	cmp	r8, r7
 8005858:	d003      	beq.n	8005862 <_dtoa_r+0x96a>
 800585a:	4641      	mov	r1, r8
 800585c:	4620      	mov	r0, r4
 800585e:	f000 fa8d 	bl	8005d7c <_Bfree>
 8005862:	4639      	mov	r1, r7
 8005864:	4620      	mov	r0, r4
 8005866:	f000 fa89 	bl	8005d7c <_Bfree>
 800586a:	e695      	b.n	8005598 <_dtoa_r+0x6a0>
 800586c:	2600      	movs	r6, #0
 800586e:	4637      	mov	r7, r6
 8005870:	e7e1      	b.n	8005836 <_dtoa_r+0x93e>
 8005872:	9700      	str	r7, [sp, #0]
 8005874:	4637      	mov	r7, r6
 8005876:	e599      	b.n	80053ac <_dtoa_r+0x4b4>
 8005878:	40240000 	.word	0x40240000
 800587c:	9b08      	ldr	r3, [sp, #32]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 80ca 	beq.w	8005a18 <_dtoa_r+0xb20>
 8005884:	9b03      	ldr	r3, [sp, #12]
 8005886:	9302      	str	r3, [sp, #8]
 8005888:	2d00      	cmp	r5, #0
 800588a:	dd05      	ble.n	8005898 <_dtoa_r+0x9a0>
 800588c:	4639      	mov	r1, r7
 800588e:	462a      	mov	r2, r5
 8005890:	4620      	mov	r0, r4
 8005892:	f000 fc45 	bl	8006120 <__lshift>
 8005896:	4607      	mov	r7, r0
 8005898:	f1b8 0f00 	cmp.w	r8, #0
 800589c:	d05b      	beq.n	8005956 <_dtoa_r+0xa5e>
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4620      	mov	r0, r4
 80058a2:	f000 fa2b 	bl	8005cfc <_Balloc>
 80058a6:	4605      	mov	r5, r0
 80058a8:	b928      	cbnz	r0, 80058b6 <_dtoa_r+0x9be>
 80058aa:	4b87      	ldr	r3, [pc, #540]	; (8005ac8 <_dtoa_r+0xbd0>)
 80058ac:	4602      	mov	r2, r0
 80058ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80058b2:	f7ff bb3b 	b.w	8004f2c <_dtoa_r+0x34>
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	3202      	adds	r2, #2
 80058ba:	0092      	lsls	r2, r2, #2
 80058bc:	f107 010c 	add.w	r1, r7, #12
 80058c0:	300c      	adds	r0, #12
 80058c2:	f000 fa0d 	bl	8005ce0 <memcpy>
 80058c6:	2201      	movs	r2, #1
 80058c8:	4629      	mov	r1, r5
 80058ca:	4620      	mov	r0, r4
 80058cc:	f000 fc28 	bl	8006120 <__lshift>
 80058d0:	9b01      	ldr	r3, [sp, #4]
 80058d2:	f103 0901 	add.w	r9, r3, #1
 80058d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80058da:	4413      	add	r3, r2
 80058dc:	9305      	str	r3, [sp, #20]
 80058de:	f00a 0301 	and.w	r3, sl, #1
 80058e2:	46b8      	mov	r8, r7
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	4607      	mov	r7, r0
 80058e8:	4631      	mov	r1, r6
 80058ea:	ee18 0a10 	vmov	r0, s16
 80058ee:	f7ff fa75 	bl	8004ddc <quorem>
 80058f2:	4641      	mov	r1, r8
 80058f4:	9002      	str	r0, [sp, #8]
 80058f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80058fa:	ee18 0a10 	vmov	r0, s16
 80058fe:	f000 fc7f 	bl	8006200 <__mcmp>
 8005902:	463a      	mov	r2, r7
 8005904:	9003      	str	r0, [sp, #12]
 8005906:	4631      	mov	r1, r6
 8005908:	4620      	mov	r0, r4
 800590a:	f000 fc95 	bl	8006238 <__mdiff>
 800590e:	68c2      	ldr	r2, [r0, #12]
 8005910:	f109 3bff 	add.w	fp, r9, #4294967295
 8005914:	4605      	mov	r5, r0
 8005916:	bb02      	cbnz	r2, 800595a <_dtoa_r+0xa62>
 8005918:	4601      	mov	r1, r0
 800591a:	ee18 0a10 	vmov	r0, s16
 800591e:	f000 fc6f 	bl	8006200 <__mcmp>
 8005922:	4602      	mov	r2, r0
 8005924:	4629      	mov	r1, r5
 8005926:	4620      	mov	r0, r4
 8005928:	9207      	str	r2, [sp, #28]
 800592a:	f000 fa27 	bl	8005d7c <_Bfree>
 800592e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005932:	ea43 0102 	orr.w	r1, r3, r2
 8005936:	9b04      	ldr	r3, [sp, #16]
 8005938:	430b      	orrs	r3, r1
 800593a:	464d      	mov	r5, r9
 800593c:	d10f      	bne.n	800595e <_dtoa_r+0xa66>
 800593e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005942:	d02a      	beq.n	800599a <_dtoa_r+0xaa2>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	dd02      	ble.n	8005950 <_dtoa_r+0xa58>
 800594a:	9b02      	ldr	r3, [sp, #8]
 800594c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005950:	f88b a000 	strb.w	sl, [fp]
 8005954:	e775      	b.n	8005842 <_dtoa_r+0x94a>
 8005956:	4638      	mov	r0, r7
 8005958:	e7ba      	b.n	80058d0 <_dtoa_r+0x9d8>
 800595a:	2201      	movs	r2, #1
 800595c:	e7e2      	b.n	8005924 <_dtoa_r+0xa2c>
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	db04      	blt.n	800596e <_dtoa_r+0xa76>
 8005964:	9906      	ldr	r1, [sp, #24]
 8005966:	430b      	orrs	r3, r1
 8005968:	9904      	ldr	r1, [sp, #16]
 800596a:	430b      	orrs	r3, r1
 800596c:	d122      	bne.n	80059b4 <_dtoa_r+0xabc>
 800596e:	2a00      	cmp	r2, #0
 8005970:	ddee      	ble.n	8005950 <_dtoa_r+0xa58>
 8005972:	ee18 1a10 	vmov	r1, s16
 8005976:	2201      	movs	r2, #1
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fbd1 	bl	8006120 <__lshift>
 800597e:	4631      	mov	r1, r6
 8005980:	ee08 0a10 	vmov	s16, r0
 8005984:	f000 fc3c 	bl	8006200 <__mcmp>
 8005988:	2800      	cmp	r0, #0
 800598a:	dc03      	bgt.n	8005994 <_dtoa_r+0xa9c>
 800598c:	d1e0      	bne.n	8005950 <_dtoa_r+0xa58>
 800598e:	f01a 0f01 	tst.w	sl, #1
 8005992:	d0dd      	beq.n	8005950 <_dtoa_r+0xa58>
 8005994:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005998:	d1d7      	bne.n	800594a <_dtoa_r+0xa52>
 800599a:	2339      	movs	r3, #57	; 0x39
 800599c:	f88b 3000 	strb.w	r3, [fp]
 80059a0:	462b      	mov	r3, r5
 80059a2:	461d      	mov	r5, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80059aa:	2a39      	cmp	r2, #57	; 0x39
 80059ac:	d071      	beq.n	8005a92 <_dtoa_r+0xb9a>
 80059ae:	3201      	adds	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e746      	b.n	8005842 <_dtoa_r+0x94a>
 80059b4:	2a00      	cmp	r2, #0
 80059b6:	dd07      	ble.n	80059c8 <_dtoa_r+0xad0>
 80059b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059bc:	d0ed      	beq.n	800599a <_dtoa_r+0xaa2>
 80059be:	f10a 0301 	add.w	r3, sl, #1
 80059c2:	f88b 3000 	strb.w	r3, [fp]
 80059c6:	e73c      	b.n	8005842 <_dtoa_r+0x94a>
 80059c8:	9b05      	ldr	r3, [sp, #20]
 80059ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80059ce:	4599      	cmp	r9, r3
 80059d0:	d047      	beq.n	8005a62 <_dtoa_r+0xb6a>
 80059d2:	ee18 1a10 	vmov	r1, s16
 80059d6:	2300      	movs	r3, #0
 80059d8:	220a      	movs	r2, #10
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 f9f0 	bl	8005dc0 <__multadd>
 80059e0:	45b8      	cmp	r8, r7
 80059e2:	ee08 0a10 	vmov	s16, r0
 80059e6:	f04f 0300 	mov.w	r3, #0
 80059ea:	f04f 020a 	mov.w	r2, #10
 80059ee:	4641      	mov	r1, r8
 80059f0:	4620      	mov	r0, r4
 80059f2:	d106      	bne.n	8005a02 <_dtoa_r+0xb0a>
 80059f4:	f000 f9e4 	bl	8005dc0 <__multadd>
 80059f8:	4680      	mov	r8, r0
 80059fa:	4607      	mov	r7, r0
 80059fc:	f109 0901 	add.w	r9, r9, #1
 8005a00:	e772      	b.n	80058e8 <_dtoa_r+0x9f0>
 8005a02:	f000 f9dd 	bl	8005dc0 <__multadd>
 8005a06:	4639      	mov	r1, r7
 8005a08:	4680      	mov	r8, r0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	220a      	movs	r2, #10
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f000 f9d6 	bl	8005dc0 <__multadd>
 8005a14:	4607      	mov	r7, r0
 8005a16:	e7f1      	b.n	80059fc <_dtoa_r+0xb04>
 8005a18:	9b03      	ldr	r3, [sp, #12]
 8005a1a:	9302      	str	r3, [sp, #8]
 8005a1c:	9d01      	ldr	r5, [sp, #4]
 8005a1e:	ee18 0a10 	vmov	r0, s16
 8005a22:	4631      	mov	r1, r6
 8005a24:	f7ff f9da 	bl	8004ddc <quorem>
 8005a28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005a2c:	9b01      	ldr	r3, [sp, #4]
 8005a2e:	f805 ab01 	strb.w	sl, [r5], #1
 8005a32:	1aea      	subs	r2, r5, r3
 8005a34:	9b02      	ldr	r3, [sp, #8]
 8005a36:	4293      	cmp	r3, r2
 8005a38:	dd09      	ble.n	8005a4e <_dtoa_r+0xb56>
 8005a3a:	ee18 1a10 	vmov	r1, s16
 8005a3e:	2300      	movs	r3, #0
 8005a40:	220a      	movs	r2, #10
 8005a42:	4620      	mov	r0, r4
 8005a44:	f000 f9bc 	bl	8005dc0 <__multadd>
 8005a48:	ee08 0a10 	vmov	s16, r0
 8005a4c:	e7e7      	b.n	8005a1e <_dtoa_r+0xb26>
 8005a4e:	9b02      	ldr	r3, [sp, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bfc8      	it	gt
 8005a54:	461d      	movgt	r5, r3
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	bfd8      	it	le
 8005a5a:	2501      	movle	r5, #1
 8005a5c:	441d      	add	r5, r3
 8005a5e:	f04f 0800 	mov.w	r8, #0
 8005a62:	ee18 1a10 	vmov	r1, s16
 8005a66:	2201      	movs	r2, #1
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f000 fb59 	bl	8006120 <__lshift>
 8005a6e:	4631      	mov	r1, r6
 8005a70:	ee08 0a10 	vmov	s16, r0
 8005a74:	f000 fbc4 	bl	8006200 <__mcmp>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	dc91      	bgt.n	80059a0 <_dtoa_r+0xaa8>
 8005a7c:	d102      	bne.n	8005a84 <_dtoa_r+0xb8c>
 8005a7e:	f01a 0f01 	tst.w	sl, #1
 8005a82:	d18d      	bne.n	80059a0 <_dtoa_r+0xaa8>
 8005a84:	462b      	mov	r3, r5
 8005a86:	461d      	mov	r5, r3
 8005a88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a8c:	2a30      	cmp	r2, #48	; 0x30
 8005a8e:	d0fa      	beq.n	8005a86 <_dtoa_r+0xb8e>
 8005a90:	e6d7      	b.n	8005842 <_dtoa_r+0x94a>
 8005a92:	9a01      	ldr	r2, [sp, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d184      	bne.n	80059a2 <_dtoa_r+0xaaa>
 8005a98:	9b00      	ldr	r3, [sp, #0]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	9300      	str	r3, [sp, #0]
 8005a9e:	2331      	movs	r3, #49	; 0x31
 8005aa0:	7013      	strb	r3, [r2, #0]
 8005aa2:	e6ce      	b.n	8005842 <_dtoa_r+0x94a>
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <_dtoa_r+0xbd4>)
 8005aa6:	f7ff ba95 	b.w	8004fd4 <_dtoa_r+0xdc>
 8005aaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f47f aa6e 	bne.w	8004f8e <_dtoa_r+0x96>
 8005ab2:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <_dtoa_r+0xbd8>)
 8005ab4:	f7ff ba8e 	b.w	8004fd4 <_dtoa_r+0xdc>
 8005ab8:	9b02      	ldr	r3, [sp, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	dcae      	bgt.n	8005a1c <_dtoa_r+0xb24>
 8005abe:	9b06      	ldr	r3, [sp, #24]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	f73f aea8 	bgt.w	8005816 <_dtoa_r+0x91e>
 8005ac6:	e7a9      	b.n	8005a1c <_dtoa_r+0xb24>
 8005ac8:	08007093 	.word	0x08007093
 8005acc:	08006ff0 	.word	0x08006ff0
 8005ad0:	08007014 	.word	0x08007014

08005ad4 <std>:
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	b510      	push	{r4, lr}
 8005ad8:	4604      	mov	r4, r0
 8005ada:	e9c0 3300 	strd	r3, r3, [r0]
 8005ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ae2:	6083      	str	r3, [r0, #8]
 8005ae4:	8181      	strh	r1, [r0, #12]
 8005ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ae8:	81c2      	strh	r2, [r0, #14]
 8005aea:	6183      	str	r3, [r0, #24]
 8005aec:	4619      	mov	r1, r3
 8005aee:	2208      	movs	r2, #8
 8005af0:	305c      	adds	r0, #92	; 0x5c
 8005af2:	f7fe fce9 	bl	80044c8 <memset>
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <std+0x38>)
 8005af8:	6263      	str	r3, [r4, #36]	; 0x24
 8005afa:	4b05      	ldr	r3, [pc, #20]	; (8005b10 <std+0x3c>)
 8005afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005afe:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <std+0x40>)
 8005b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b02:	4b05      	ldr	r3, [pc, #20]	; (8005b18 <std+0x44>)
 8005b04:	6224      	str	r4, [r4, #32]
 8005b06:	6323      	str	r3, [r4, #48]	; 0x30
 8005b08:	bd10      	pop	{r4, pc}
 8005b0a:	bf00      	nop
 8005b0c:	080068c5 	.word	0x080068c5
 8005b10:	080068e7 	.word	0x080068e7
 8005b14:	0800691f 	.word	0x0800691f
 8005b18:	08006943 	.word	0x08006943

08005b1c <_cleanup_r>:
 8005b1c:	4901      	ldr	r1, [pc, #4]	; (8005b24 <_cleanup_r+0x8>)
 8005b1e:	f000 b8af 	b.w	8005c80 <_fwalk_reent>
 8005b22:	bf00      	nop
 8005b24:	08006c59 	.word	0x08006c59

08005b28 <__sfmoreglue>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	2268      	movs	r2, #104	; 0x68
 8005b2c:	1e4d      	subs	r5, r1, #1
 8005b2e:	4355      	muls	r5, r2
 8005b30:	460e      	mov	r6, r1
 8005b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b36:	f000 fce7 	bl	8006508 <_malloc_r>
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	b140      	cbz	r0, 8005b50 <__sfmoreglue+0x28>
 8005b3e:	2100      	movs	r1, #0
 8005b40:	e9c0 1600 	strd	r1, r6, [r0]
 8005b44:	300c      	adds	r0, #12
 8005b46:	60a0      	str	r0, [r4, #8]
 8005b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b4c:	f7fe fcbc 	bl	80044c8 <memset>
 8005b50:	4620      	mov	r0, r4
 8005b52:	bd70      	pop	{r4, r5, r6, pc}

08005b54 <__sfp_lock_acquire>:
 8005b54:	4801      	ldr	r0, [pc, #4]	; (8005b5c <__sfp_lock_acquire+0x8>)
 8005b56:	f000 b8b8 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005b5a:	bf00      	nop
 8005b5c:	20000201 	.word	0x20000201

08005b60 <__sfp_lock_release>:
 8005b60:	4801      	ldr	r0, [pc, #4]	; (8005b68 <__sfp_lock_release+0x8>)
 8005b62:	f000 b8b3 	b.w	8005ccc <__retarget_lock_release_recursive>
 8005b66:	bf00      	nop
 8005b68:	20000201 	.word	0x20000201

08005b6c <__sinit_lock_acquire>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	; (8005b74 <__sinit_lock_acquire+0x8>)
 8005b6e:	f000 b8ac 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8005b72:	bf00      	nop
 8005b74:	20000202 	.word	0x20000202

08005b78 <__sinit_lock_release>:
 8005b78:	4801      	ldr	r0, [pc, #4]	; (8005b80 <__sinit_lock_release+0x8>)
 8005b7a:	f000 b8a7 	b.w	8005ccc <__retarget_lock_release_recursive>
 8005b7e:	bf00      	nop
 8005b80:	20000202 	.word	0x20000202

08005b84 <__sinit>:
 8005b84:	b510      	push	{r4, lr}
 8005b86:	4604      	mov	r4, r0
 8005b88:	f7ff fff0 	bl	8005b6c <__sinit_lock_acquire>
 8005b8c:	69a3      	ldr	r3, [r4, #24]
 8005b8e:	b11b      	cbz	r3, 8005b98 <__sinit+0x14>
 8005b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b94:	f7ff bff0 	b.w	8005b78 <__sinit_lock_release>
 8005b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <__sinit+0x68>)
 8005ba0:	4a13      	ldr	r2, [pc, #76]	; (8005bf0 <__sinit+0x6c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	bf04      	itt	eq
 8005baa:	2301      	moveq	r3, #1
 8005bac:	61a3      	streq	r3, [r4, #24]
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 f820 	bl	8005bf4 <__sfp>
 8005bb4:	6060      	str	r0, [r4, #4]
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f000 f81c 	bl	8005bf4 <__sfp>
 8005bbc:	60a0      	str	r0, [r4, #8]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 f818 	bl	8005bf4 <__sfp>
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	60e0      	str	r0, [r4, #12]
 8005bc8:	2104      	movs	r1, #4
 8005bca:	6860      	ldr	r0, [r4, #4]
 8005bcc:	f7ff ff82 	bl	8005ad4 <std>
 8005bd0:	68a0      	ldr	r0, [r4, #8]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	2109      	movs	r1, #9
 8005bd6:	f7ff ff7d 	bl	8005ad4 <std>
 8005bda:	68e0      	ldr	r0, [r4, #12]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	2112      	movs	r1, #18
 8005be0:	f7ff ff78 	bl	8005ad4 <std>
 8005be4:	2301      	movs	r3, #1
 8005be6:	61a3      	str	r3, [r4, #24]
 8005be8:	e7d2      	b.n	8005b90 <__sinit+0xc>
 8005bea:	bf00      	nop
 8005bec:	08006fdc 	.word	0x08006fdc
 8005bf0:	08005b1d 	.word	0x08005b1d

08005bf4 <__sfp>:
 8005bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf6:	4607      	mov	r7, r0
 8005bf8:	f7ff ffac 	bl	8005b54 <__sfp_lock_acquire>
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <__sfp+0x84>)
 8005bfe:	681e      	ldr	r6, [r3, #0]
 8005c00:	69b3      	ldr	r3, [r6, #24]
 8005c02:	b913      	cbnz	r3, 8005c0a <__sfp+0x16>
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff ffbd 	bl	8005b84 <__sinit>
 8005c0a:	3648      	adds	r6, #72	; 0x48
 8005c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	d503      	bpl.n	8005c1c <__sfp+0x28>
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	b30b      	cbz	r3, 8005c5c <__sfp+0x68>
 8005c18:	6836      	ldr	r6, [r6, #0]
 8005c1a:	e7f7      	b.n	8005c0c <__sfp+0x18>
 8005c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c20:	b9d5      	cbnz	r5, 8005c58 <__sfp+0x64>
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <__sfp+0x88>)
 8005c24:	60e3      	str	r3, [r4, #12]
 8005c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8005c2c:	f000 f84c 	bl	8005cc8 <__retarget_lock_init_recursive>
 8005c30:	f7ff ff96 	bl	8005b60 <__sfp_lock_release>
 8005c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c3c:	6025      	str	r5, [r4, #0]
 8005c3e:	61a5      	str	r5, [r4, #24]
 8005c40:	2208      	movs	r2, #8
 8005c42:	4629      	mov	r1, r5
 8005c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c48:	f7fe fc3e 	bl	80044c8 <memset>
 8005c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c54:	4620      	mov	r0, r4
 8005c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c58:	3468      	adds	r4, #104	; 0x68
 8005c5a:	e7d9      	b.n	8005c10 <__sfp+0x1c>
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f7ff ff62 	bl	8005b28 <__sfmoreglue>
 8005c64:	4604      	mov	r4, r0
 8005c66:	6030      	str	r0, [r6, #0]
 8005c68:	2800      	cmp	r0, #0
 8005c6a:	d1d5      	bne.n	8005c18 <__sfp+0x24>
 8005c6c:	f7ff ff78 	bl	8005b60 <__sfp_lock_release>
 8005c70:	230c      	movs	r3, #12
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	e7ee      	b.n	8005c54 <__sfp+0x60>
 8005c76:	bf00      	nop
 8005c78:	08006fdc 	.word	0x08006fdc
 8005c7c:	ffff0001 	.word	0xffff0001

08005c80 <_fwalk_reent>:
 8005c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c84:	4606      	mov	r6, r0
 8005c86:	4688      	mov	r8, r1
 8005c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c8c:	2700      	movs	r7, #0
 8005c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c92:	f1b9 0901 	subs.w	r9, r9, #1
 8005c96:	d505      	bpl.n	8005ca4 <_fwalk_reent+0x24>
 8005c98:	6824      	ldr	r4, [r4, #0]
 8005c9a:	2c00      	cmp	r4, #0
 8005c9c:	d1f7      	bne.n	8005c8e <_fwalk_reent+0xe>
 8005c9e:	4638      	mov	r0, r7
 8005ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ca4:	89ab      	ldrh	r3, [r5, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d907      	bls.n	8005cba <_fwalk_reent+0x3a>
 8005caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	d003      	beq.n	8005cba <_fwalk_reent+0x3a>
 8005cb2:	4629      	mov	r1, r5
 8005cb4:	4630      	mov	r0, r6
 8005cb6:	47c0      	blx	r8
 8005cb8:	4307      	orrs	r7, r0
 8005cba:	3568      	adds	r5, #104	; 0x68
 8005cbc:	e7e9      	b.n	8005c92 <_fwalk_reent+0x12>
	...

08005cc0 <_localeconv_r>:
 8005cc0:	4800      	ldr	r0, [pc, #0]	; (8005cc4 <_localeconv_r+0x4>)
 8005cc2:	4770      	bx	lr
 8005cc4:	20000158 	.word	0x20000158

08005cc8 <__retarget_lock_init_recursive>:
 8005cc8:	4770      	bx	lr

08005cca <__retarget_lock_acquire_recursive>:
 8005cca:	4770      	bx	lr

08005ccc <__retarget_lock_release_recursive>:
 8005ccc:	4770      	bx	lr
	...

08005cd0 <malloc>:
 8005cd0:	4b02      	ldr	r3, [pc, #8]	; (8005cdc <malloc+0xc>)
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	6818      	ldr	r0, [r3, #0]
 8005cd6:	f000 bc17 	b.w	8006508 <_malloc_r>
 8005cda:	bf00      	nop
 8005cdc:	20000004 	.word	0x20000004

08005ce0 <memcpy>:
 8005ce0:	440a      	add	r2, r1
 8005ce2:	4291      	cmp	r1, r2
 8005ce4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ce8:	d100      	bne.n	8005cec <memcpy+0xc>
 8005cea:	4770      	bx	lr
 8005cec:	b510      	push	{r4, lr}
 8005cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cf6:	4291      	cmp	r1, r2
 8005cf8:	d1f9      	bne.n	8005cee <memcpy+0xe>
 8005cfa:	bd10      	pop	{r4, pc}

08005cfc <_Balloc>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	b976      	cbnz	r6, 8005d24 <_Balloc+0x28>
 8005d06:	2010      	movs	r0, #16
 8005d08:	f7ff ffe2 	bl	8005cd0 <malloc>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6260      	str	r0, [r4, #36]	; 0x24
 8005d10:	b920      	cbnz	r0, 8005d1c <_Balloc+0x20>
 8005d12:	4b18      	ldr	r3, [pc, #96]	; (8005d74 <_Balloc+0x78>)
 8005d14:	4818      	ldr	r0, [pc, #96]	; (8005d78 <_Balloc+0x7c>)
 8005d16:	2166      	movs	r1, #102	; 0x66
 8005d18:	f000 feea 	bl	8006af0 <__assert_func>
 8005d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d20:	6006      	str	r6, [r0, #0]
 8005d22:	60c6      	str	r6, [r0, #12]
 8005d24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005d26:	68f3      	ldr	r3, [r6, #12]
 8005d28:	b183      	cbz	r3, 8005d4c <_Balloc+0x50>
 8005d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d32:	b9b8      	cbnz	r0, 8005d64 <_Balloc+0x68>
 8005d34:	2101      	movs	r1, #1
 8005d36:	fa01 f605 	lsl.w	r6, r1, r5
 8005d3a:	1d72      	adds	r2, r6, #5
 8005d3c:	0092      	lsls	r2, r2, #2
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 fb60 	bl	8006404 <_calloc_r>
 8005d44:	b160      	cbz	r0, 8005d60 <_Balloc+0x64>
 8005d46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d4a:	e00e      	b.n	8005d6a <_Balloc+0x6e>
 8005d4c:	2221      	movs	r2, #33	; 0x21
 8005d4e:	2104      	movs	r1, #4
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fb57 	bl	8006404 <_calloc_r>
 8005d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d58:	60f0      	str	r0, [r6, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e4      	bne.n	8005d2a <_Balloc+0x2e>
 8005d60:	2000      	movs	r0, #0
 8005d62:	bd70      	pop	{r4, r5, r6, pc}
 8005d64:	6802      	ldr	r2, [r0, #0]
 8005d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d70:	e7f7      	b.n	8005d62 <_Balloc+0x66>
 8005d72:	bf00      	nop
 8005d74:	08007021 	.word	0x08007021
 8005d78:	08007104 	.word	0x08007104

08005d7c <_Bfree>:
 8005d7c:	b570      	push	{r4, r5, r6, lr}
 8005d7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005d80:	4605      	mov	r5, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	b976      	cbnz	r6, 8005da4 <_Bfree+0x28>
 8005d86:	2010      	movs	r0, #16
 8005d88:	f7ff ffa2 	bl	8005cd0 <malloc>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6268      	str	r0, [r5, #36]	; 0x24
 8005d90:	b920      	cbnz	r0, 8005d9c <_Bfree+0x20>
 8005d92:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <_Bfree+0x3c>)
 8005d94:	4809      	ldr	r0, [pc, #36]	; (8005dbc <_Bfree+0x40>)
 8005d96:	218a      	movs	r1, #138	; 0x8a
 8005d98:	f000 feaa 	bl	8006af0 <__assert_func>
 8005d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005da0:	6006      	str	r6, [r0, #0]
 8005da2:	60c6      	str	r6, [r0, #12]
 8005da4:	b13c      	cbz	r4, 8005db6 <_Bfree+0x3a>
 8005da6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005da8:	6862      	ldr	r2, [r4, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005db0:	6021      	str	r1, [r4, #0]
 8005db2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
 8005db8:	08007021 	.word	0x08007021
 8005dbc:	08007104 	.word	0x08007104

08005dc0 <__multadd>:
 8005dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc4:	690d      	ldr	r5, [r1, #16]
 8005dc6:	4607      	mov	r7, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	461e      	mov	r6, r3
 8005dcc:	f101 0c14 	add.w	ip, r1, #20
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f8dc 3000 	ldr.w	r3, [ip]
 8005dd6:	b299      	uxth	r1, r3
 8005dd8:	fb02 6101 	mla	r1, r2, r1, r6
 8005ddc:	0c1e      	lsrs	r6, r3, #16
 8005dde:	0c0b      	lsrs	r3, r1, #16
 8005de0:	fb02 3306 	mla	r3, r2, r6, r3
 8005de4:	b289      	uxth	r1, r1
 8005de6:	3001      	adds	r0, #1
 8005de8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dec:	4285      	cmp	r5, r0
 8005dee:	f84c 1b04 	str.w	r1, [ip], #4
 8005df2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005df6:	dcec      	bgt.n	8005dd2 <__multadd+0x12>
 8005df8:	b30e      	cbz	r6, 8005e3e <__multadd+0x7e>
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	42ab      	cmp	r3, r5
 8005dfe:	dc19      	bgt.n	8005e34 <__multadd+0x74>
 8005e00:	6861      	ldr	r1, [r4, #4]
 8005e02:	4638      	mov	r0, r7
 8005e04:	3101      	adds	r1, #1
 8005e06:	f7ff ff79 	bl	8005cfc <_Balloc>
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	b928      	cbnz	r0, 8005e1a <__multadd+0x5a>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <__multadd+0x84>)
 8005e12:	480d      	ldr	r0, [pc, #52]	; (8005e48 <__multadd+0x88>)
 8005e14:	21b5      	movs	r1, #181	; 0xb5
 8005e16:	f000 fe6b 	bl	8006af0 <__assert_func>
 8005e1a:	6922      	ldr	r2, [r4, #16]
 8005e1c:	3202      	adds	r2, #2
 8005e1e:	f104 010c 	add.w	r1, r4, #12
 8005e22:	0092      	lsls	r2, r2, #2
 8005e24:	300c      	adds	r0, #12
 8005e26:	f7ff ff5b 	bl	8005ce0 <memcpy>
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	f7ff ffa5 	bl	8005d7c <_Bfree>
 8005e32:	4644      	mov	r4, r8
 8005e34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e38:	3501      	adds	r5, #1
 8005e3a:	615e      	str	r6, [r3, #20]
 8005e3c:	6125      	str	r5, [r4, #16]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e44:	08007093 	.word	0x08007093
 8005e48:	08007104 	.word	0x08007104

08005e4c <__hi0bits>:
 8005e4c:	0c03      	lsrs	r3, r0, #16
 8005e4e:	041b      	lsls	r3, r3, #16
 8005e50:	b9d3      	cbnz	r3, 8005e88 <__hi0bits+0x3c>
 8005e52:	0400      	lsls	r0, r0, #16
 8005e54:	2310      	movs	r3, #16
 8005e56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005e5a:	bf04      	itt	eq
 8005e5c:	0200      	lsleq	r0, r0, #8
 8005e5e:	3308      	addeq	r3, #8
 8005e60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005e64:	bf04      	itt	eq
 8005e66:	0100      	lsleq	r0, r0, #4
 8005e68:	3304      	addeq	r3, #4
 8005e6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005e6e:	bf04      	itt	eq
 8005e70:	0080      	lsleq	r0, r0, #2
 8005e72:	3302      	addeq	r3, #2
 8005e74:	2800      	cmp	r0, #0
 8005e76:	db05      	blt.n	8005e84 <__hi0bits+0x38>
 8005e78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005e7c:	f103 0301 	add.w	r3, r3, #1
 8005e80:	bf08      	it	eq
 8005e82:	2320      	moveq	r3, #32
 8005e84:	4618      	mov	r0, r3
 8005e86:	4770      	bx	lr
 8005e88:	2300      	movs	r3, #0
 8005e8a:	e7e4      	b.n	8005e56 <__hi0bits+0xa>

08005e8c <__lo0bits>:
 8005e8c:	6803      	ldr	r3, [r0, #0]
 8005e8e:	f013 0207 	ands.w	r2, r3, #7
 8005e92:	4601      	mov	r1, r0
 8005e94:	d00b      	beq.n	8005eae <__lo0bits+0x22>
 8005e96:	07da      	lsls	r2, r3, #31
 8005e98:	d423      	bmi.n	8005ee2 <__lo0bits+0x56>
 8005e9a:	0798      	lsls	r0, r3, #30
 8005e9c:	bf49      	itett	mi
 8005e9e:	085b      	lsrmi	r3, r3, #1
 8005ea0:	089b      	lsrpl	r3, r3, #2
 8005ea2:	2001      	movmi	r0, #1
 8005ea4:	600b      	strmi	r3, [r1, #0]
 8005ea6:	bf5c      	itt	pl
 8005ea8:	600b      	strpl	r3, [r1, #0]
 8005eaa:	2002      	movpl	r0, #2
 8005eac:	4770      	bx	lr
 8005eae:	b298      	uxth	r0, r3
 8005eb0:	b9a8      	cbnz	r0, 8005ede <__lo0bits+0x52>
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	2010      	movs	r0, #16
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	b90a      	cbnz	r2, 8005ebe <__lo0bits+0x32>
 8005eba:	3008      	adds	r0, #8
 8005ebc:	0a1b      	lsrs	r3, r3, #8
 8005ebe:	071a      	lsls	r2, r3, #28
 8005ec0:	bf04      	itt	eq
 8005ec2:	091b      	lsreq	r3, r3, #4
 8005ec4:	3004      	addeq	r0, #4
 8005ec6:	079a      	lsls	r2, r3, #30
 8005ec8:	bf04      	itt	eq
 8005eca:	089b      	lsreq	r3, r3, #2
 8005ecc:	3002      	addeq	r0, #2
 8005ece:	07da      	lsls	r2, r3, #31
 8005ed0:	d403      	bmi.n	8005eda <__lo0bits+0x4e>
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	f100 0001 	add.w	r0, r0, #1
 8005ed8:	d005      	beq.n	8005ee6 <__lo0bits+0x5a>
 8005eda:	600b      	str	r3, [r1, #0]
 8005edc:	4770      	bx	lr
 8005ede:	4610      	mov	r0, r2
 8005ee0:	e7e9      	b.n	8005eb6 <__lo0bits+0x2a>
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	4770      	bx	lr
 8005ee6:	2020      	movs	r0, #32
 8005ee8:	4770      	bx	lr
	...

08005eec <__i2b>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	460c      	mov	r4, r1
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	f7ff ff03 	bl	8005cfc <_Balloc>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	b928      	cbnz	r0, 8005f06 <__i2b+0x1a>
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <__i2b+0x24>)
 8005efc:	4805      	ldr	r0, [pc, #20]	; (8005f14 <__i2b+0x28>)
 8005efe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f02:	f000 fdf5 	bl	8006af0 <__assert_func>
 8005f06:	2301      	movs	r3, #1
 8005f08:	6144      	str	r4, [r0, #20]
 8005f0a:	6103      	str	r3, [r0, #16]
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	bf00      	nop
 8005f10:	08007093 	.word	0x08007093
 8005f14:	08007104 	.word	0x08007104

08005f18 <__multiply>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4691      	mov	r9, r2
 8005f1e:	690a      	ldr	r2, [r1, #16]
 8005f20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	bfb8      	it	lt
 8005f28:	460b      	movlt	r3, r1
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	bfbc      	itt	lt
 8005f2e:	464c      	movlt	r4, r9
 8005f30:	4699      	movlt	r9, r3
 8005f32:	6927      	ldr	r7, [r4, #16]
 8005f34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f38:	68a3      	ldr	r3, [r4, #8]
 8005f3a:	6861      	ldr	r1, [r4, #4]
 8005f3c:	eb07 060a 	add.w	r6, r7, sl
 8005f40:	42b3      	cmp	r3, r6
 8005f42:	b085      	sub	sp, #20
 8005f44:	bfb8      	it	lt
 8005f46:	3101      	addlt	r1, #1
 8005f48:	f7ff fed8 	bl	8005cfc <_Balloc>
 8005f4c:	b930      	cbnz	r0, 8005f5c <__multiply+0x44>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b44      	ldr	r3, [pc, #272]	; (8006064 <__multiply+0x14c>)
 8005f52:	4845      	ldr	r0, [pc, #276]	; (8006068 <__multiply+0x150>)
 8005f54:	f240 115d 	movw	r1, #349	; 0x15d
 8005f58:	f000 fdca 	bl	8006af0 <__assert_func>
 8005f5c:	f100 0514 	add.w	r5, r0, #20
 8005f60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f64:	462b      	mov	r3, r5
 8005f66:	2200      	movs	r2, #0
 8005f68:	4543      	cmp	r3, r8
 8005f6a:	d321      	bcc.n	8005fb0 <__multiply+0x98>
 8005f6c:	f104 0314 	add.w	r3, r4, #20
 8005f70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f74:	f109 0314 	add.w	r3, r9, #20
 8005f78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f7c:	9202      	str	r2, [sp, #8]
 8005f7e:	1b3a      	subs	r2, r7, r4
 8005f80:	3a15      	subs	r2, #21
 8005f82:	f022 0203 	bic.w	r2, r2, #3
 8005f86:	3204      	adds	r2, #4
 8005f88:	f104 0115 	add.w	r1, r4, #21
 8005f8c:	428f      	cmp	r7, r1
 8005f8e:	bf38      	it	cc
 8005f90:	2204      	movcc	r2, #4
 8005f92:	9201      	str	r2, [sp, #4]
 8005f94:	9a02      	ldr	r2, [sp, #8]
 8005f96:	9303      	str	r3, [sp, #12]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d80c      	bhi.n	8005fb6 <__multiply+0x9e>
 8005f9c:	2e00      	cmp	r6, #0
 8005f9e:	dd03      	ble.n	8005fa8 <__multiply+0x90>
 8005fa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d05a      	beq.n	800605e <__multiply+0x146>
 8005fa8:	6106      	str	r6, [r0, #16]
 8005faa:	b005      	add	sp, #20
 8005fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb0:	f843 2b04 	str.w	r2, [r3], #4
 8005fb4:	e7d8      	b.n	8005f68 <__multiply+0x50>
 8005fb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fba:	f1ba 0f00 	cmp.w	sl, #0
 8005fbe:	d024      	beq.n	800600a <__multiply+0xf2>
 8005fc0:	f104 0e14 	add.w	lr, r4, #20
 8005fc4:	46a9      	mov	r9, r5
 8005fc6:	f04f 0c00 	mov.w	ip, #0
 8005fca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fce:	f8d9 1000 	ldr.w	r1, [r9]
 8005fd2:	fa1f fb82 	uxth.w	fp, r2
 8005fd6:	b289      	uxth	r1, r1
 8005fd8:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005fe0:	f8d9 2000 	ldr.w	r2, [r9]
 8005fe4:	4461      	add	r1, ip
 8005fe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fea:	fb0a c20b 	mla	r2, sl, fp, ip
 8005fee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005ff2:	b289      	uxth	r1, r1
 8005ff4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ff8:	4577      	cmp	r7, lr
 8005ffa:	f849 1b04 	str.w	r1, [r9], #4
 8005ffe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006002:	d8e2      	bhi.n	8005fca <__multiply+0xb2>
 8006004:	9a01      	ldr	r2, [sp, #4]
 8006006:	f845 c002 	str.w	ip, [r5, r2]
 800600a:	9a03      	ldr	r2, [sp, #12]
 800600c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006010:	3304      	adds	r3, #4
 8006012:	f1b9 0f00 	cmp.w	r9, #0
 8006016:	d020      	beq.n	800605a <__multiply+0x142>
 8006018:	6829      	ldr	r1, [r5, #0]
 800601a:	f104 0c14 	add.w	ip, r4, #20
 800601e:	46ae      	mov	lr, r5
 8006020:	f04f 0a00 	mov.w	sl, #0
 8006024:	f8bc b000 	ldrh.w	fp, [ip]
 8006028:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800602c:	fb09 220b 	mla	r2, r9, fp, r2
 8006030:	4492      	add	sl, r2
 8006032:	b289      	uxth	r1, r1
 8006034:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006038:	f84e 1b04 	str.w	r1, [lr], #4
 800603c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006040:	f8be 1000 	ldrh.w	r1, [lr]
 8006044:	0c12      	lsrs	r2, r2, #16
 8006046:	fb09 1102 	mla	r1, r9, r2, r1
 800604a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800604e:	4567      	cmp	r7, ip
 8006050:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006054:	d8e6      	bhi.n	8006024 <__multiply+0x10c>
 8006056:	9a01      	ldr	r2, [sp, #4]
 8006058:	50a9      	str	r1, [r5, r2]
 800605a:	3504      	adds	r5, #4
 800605c:	e79a      	b.n	8005f94 <__multiply+0x7c>
 800605e:	3e01      	subs	r6, #1
 8006060:	e79c      	b.n	8005f9c <__multiply+0x84>
 8006062:	bf00      	nop
 8006064:	08007093 	.word	0x08007093
 8006068:	08007104 	.word	0x08007104

0800606c <__pow5mult>:
 800606c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006070:	4615      	mov	r5, r2
 8006072:	f012 0203 	ands.w	r2, r2, #3
 8006076:	4606      	mov	r6, r0
 8006078:	460f      	mov	r7, r1
 800607a:	d007      	beq.n	800608c <__pow5mult+0x20>
 800607c:	4c25      	ldr	r4, [pc, #148]	; (8006114 <__pow5mult+0xa8>)
 800607e:	3a01      	subs	r2, #1
 8006080:	2300      	movs	r3, #0
 8006082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006086:	f7ff fe9b 	bl	8005dc0 <__multadd>
 800608a:	4607      	mov	r7, r0
 800608c:	10ad      	asrs	r5, r5, #2
 800608e:	d03d      	beq.n	800610c <__pow5mult+0xa0>
 8006090:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006092:	b97c      	cbnz	r4, 80060b4 <__pow5mult+0x48>
 8006094:	2010      	movs	r0, #16
 8006096:	f7ff fe1b 	bl	8005cd0 <malloc>
 800609a:	4602      	mov	r2, r0
 800609c:	6270      	str	r0, [r6, #36]	; 0x24
 800609e:	b928      	cbnz	r0, 80060ac <__pow5mult+0x40>
 80060a0:	4b1d      	ldr	r3, [pc, #116]	; (8006118 <__pow5mult+0xac>)
 80060a2:	481e      	ldr	r0, [pc, #120]	; (800611c <__pow5mult+0xb0>)
 80060a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80060a8:	f000 fd22 	bl	8006af0 <__assert_func>
 80060ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060b0:	6004      	str	r4, [r0, #0]
 80060b2:	60c4      	str	r4, [r0, #12]
 80060b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060bc:	b94c      	cbnz	r4, 80060d2 <__pow5mult+0x66>
 80060be:	f240 2171 	movw	r1, #625	; 0x271
 80060c2:	4630      	mov	r0, r6
 80060c4:	f7ff ff12 	bl	8005eec <__i2b>
 80060c8:	2300      	movs	r3, #0
 80060ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80060ce:	4604      	mov	r4, r0
 80060d0:	6003      	str	r3, [r0, #0]
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	07eb      	lsls	r3, r5, #31
 80060d8:	d50a      	bpl.n	80060f0 <__pow5mult+0x84>
 80060da:	4639      	mov	r1, r7
 80060dc:	4622      	mov	r2, r4
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff ff1a 	bl	8005f18 <__multiply>
 80060e4:	4639      	mov	r1, r7
 80060e6:	4680      	mov	r8, r0
 80060e8:	4630      	mov	r0, r6
 80060ea:	f7ff fe47 	bl	8005d7c <_Bfree>
 80060ee:	4647      	mov	r7, r8
 80060f0:	106d      	asrs	r5, r5, #1
 80060f2:	d00b      	beq.n	800610c <__pow5mult+0xa0>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	b938      	cbnz	r0, 8006108 <__pow5mult+0x9c>
 80060f8:	4622      	mov	r2, r4
 80060fa:	4621      	mov	r1, r4
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff ff0b 	bl	8005f18 <__multiply>
 8006102:	6020      	str	r0, [r4, #0]
 8006104:	f8c0 9000 	str.w	r9, [r0]
 8006108:	4604      	mov	r4, r0
 800610a:	e7e4      	b.n	80060d6 <__pow5mult+0x6a>
 800610c:	4638      	mov	r0, r7
 800610e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006112:	bf00      	nop
 8006114:	08007250 	.word	0x08007250
 8006118:	08007021 	.word	0x08007021
 800611c:	08007104 	.word	0x08007104

08006120 <__lshift>:
 8006120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006124:	460c      	mov	r4, r1
 8006126:	6849      	ldr	r1, [r1, #4]
 8006128:	6923      	ldr	r3, [r4, #16]
 800612a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	4607      	mov	r7, r0
 8006132:	4691      	mov	r9, r2
 8006134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006138:	f108 0601 	add.w	r6, r8, #1
 800613c:	42b3      	cmp	r3, r6
 800613e:	db0b      	blt.n	8006158 <__lshift+0x38>
 8006140:	4638      	mov	r0, r7
 8006142:	f7ff fddb 	bl	8005cfc <_Balloc>
 8006146:	4605      	mov	r5, r0
 8006148:	b948      	cbnz	r0, 800615e <__lshift+0x3e>
 800614a:	4602      	mov	r2, r0
 800614c:	4b2a      	ldr	r3, [pc, #168]	; (80061f8 <__lshift+0xd8>)
 800614e:	482b      	ldr	r0, [pc, #172]	; (80061fc <__lshift+0xdc>)
 8006150:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006154:	f000 fccc 	bl	8006af0 <__assert_func>
 8006158:	3101      	adds	r1, #1
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	e7ee      	b.n	800613c <__lshift+0x1c>
 800615e:	2300      	movs	r3, #0
 8006160:	f100 0114 	add.w	r1, r0, #20
 8006164:	f100 0210 	add.w	r2, r0, #16
 8006168:	4618      	mov	r0, r3
 800616a:	4553      	cmp	r3, sl
 800616c:	db37      	blt.n	80061de <__lshift+0xbe>
 800616e:	6920      	ldr	r0, [r4, #16]
 8006170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006174:	f104 0314 	add.w	r3, r4, #20
 8006178:	f019 091f 	ands.w	r9, r9, #31
 800617c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006180:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006184:	d02f      	beq.n	80061e6 <__lshift+0xc6>
 8006186:	f1c9 0e20 	rsb	lr, r9, #32
 800618a:	468a      	mov	sl, r1
 800618c:	f04f 0c00 	mov.w	ip, #0
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	fa02 f209 	lsl.w	r2, r2, r9
 8006196:	ea42 020c 	orr.w	r2, r2, ip
 800619a:	f84a 2b04 	str.w	r2, [sl], #4
 800619e:	f853 2b04 	ldr.w	r2, [r3], #4
 80061a2:	4298      	cmp	r0, r3
 80061a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80061a8:	d8f2      	bhi.n	8006190 <__lshift+0x70>
 80061aa:	1b03      	subs	r3, r0, r4
 80061ac:	3b15      	subs	r3, #21
 80061ae:	f023 0303 	bic.w	r3, r3, #3
 80061b2:	3304      	adds	r3, #4
 80061b4:	f104 0215 	add.w	r2, r4, #21
 80061b8:	4290      	cmp	r0, r2
 80061ba:	bf38      	it	cc
 80061bc:	2304      	movcc	r3, #4
 80061be:	f841 c003 	str.w	ip, [r1, r3]
 80061c2:	f1bc 0f00 	cmp.w	ip, #0
 80061c6:	d001      	beq.n	80061cc <__lshift+0xac>
 80061c8:	f108 0602 	add.w	r6, r8, #2
 80061cc:	3e01      	subs	r6, #1
 80061ce:	4638      	mov	r0, r7
 80061d0:	612e      	str	r6, [r5, #16]
 80061d2:	4621      	mov	r1, r4
 80061d4:	f7ff fdd2 	bl	8005d7c <_Bfree>
 80061d8:	4628      	mov	r0, r5
 80061da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061de:	f842 0f04 	str.w	r0, [r2, #4]!
 80061e2:	3301      	adds	r3, #1
 80061e4:	e7c1      	b.n	800616a <__lshift+0x4a>
 80061e6:	3904      	subs	r1, #4
 80061e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80061f0:	4298      	cmp	r0, r3
 80061f2:	d8f9      	bhi.n	80061e8 <__lshift+0xc8>
 80061f4:	e7ea      	b.n	80061cc <__lshift+0xac>
 80061f6:	bf00      	nop
 80061f8:	08007093 	.word	0x08007093
 80061fc:	08007104 	.word	0x08007104

08006200 <__mcmp>:
 8006200:	b530      	push	{r4, r5, lr}
 8006202:	6902      	ldr	r2, [r0, #16]
 8006204:	690c      	ldr	r4, [r1, #16]
 8006206:	1b12      	subs	r2, r2, r4
 8006208:	d10e      	bne.n	8006228 <__mcmp+0x28>
 800620a:	f100 0314 	add.w	r3, r0, #20
 800620e:	3114      	adds	r1, #20
 8006210:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006214:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006218:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800621c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006220:	42a5      	cmp	r5, r4
 8006222:	d003      	beq.n	800622c <__mcmp+0x2c>
 8006224:	d305      	bcc.n	8006232 <__mcmp+0x32>
 8006226:	2201      	movs	r2, #1
 8006228:	4610      	mov	r0, r2
 800622a:	bd30      	pop	{r4, r5, pc}
 800622c:	4283      	cmp	r3, r0
 800622e:	d3f3      	bcc.n	8006218 <__mcmp+0x18>
 8006230:	e7fa      	b.n	8006228 <__mcmp+0x28>
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	e7f7      	b.n	8006228 <__mcmp+0x28>

08006238 <__mdiff>:
 8006238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	460c      	mov	r4, r1
 800623e:	4606      	mov	r6, r0
 8006240:	4611      	mov	r1, r2
 8006242:	4620      	mov	r0, r4
 8006244:	4690      	mov	r8, r2
 8006246:	f7ff ffdb 	bl	8006200 <__mcmp>
 800624a:	1e05      	subs	r5, r0, #0
 800624c:	d110      	bne.n	8006270 <__mdiff+0x38>
 800624e:	4629      	mov	r1, r5
 8006250:	4630      	mov	r0, r6
 8006252:	f7ff fd53 	bl	8005cfc <_Balloc>
 8006256:	b930      	cbnz	r0, 8006266 <__mdiff+0x2e>
 8006258:	4b3a      	ldr	r3, [pc, #232]	; (8006344 <__mdiff+0x10c>)
 800625a:	4602      	mov	r2, r0
 800625c:	f240 2132 	movw	r1, #562	; 0x232
 8006260:	4839      	ldr	r0, [pc, #228]	; (8006348 <__mdiff+0x110>)
 8006262:	f000 fc45 	bl	8006af0 <__assert_func>
 8006266:	2301      	movs	r3, #1
 8006268:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800626c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006270:	bfa4      	itt	ge
 8006272:	4643      	movge	r3, r8
 8006274:	46a0      	movge	r8, r4
 8006276:	4630      	mov	r0, r6
 8006278:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800627c:	bfa6      	itte	ge
 800627e:	461c      	movge	r4, r3
 8006280:	2500      	movge	r5, #0
 8006282:	2501      	movlt	r5, #1
 8006284:	f7ff fd3a 	bl	8005cfc <_Balloc>
 8006288:	b920      	cbnz	r0, 8006294 <__mdiff+0x5c>
 800628a:	4b2e      	ldr	r3, [pc, #184]	; (8006344 <__mdiff+0x10c>)
 800628c:	4602      	mov	r2, r0
 800628e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006292:	e7e5      	b.n	8006260 <__mdiff+0x28>
 8006294:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006298:	6926      	ldr	r6, [r4, #16]
 800629a:	60c5      	str	r5, [r0, #12]
 800629c:	f104 0914 	add.w	r9, r4, #20
 80062a0:	f108 0514 	add.w	r5, r8, #20
 80062a4:	f100 0e14 	add.w	lr, r0, #20
 80062a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80062ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062b0:	f108 0210 	add.w	r2, r8, #16
 80062b4:	46f2      	mov	sl, lr
 80062b6:	2100      	movs	r1, #0
 80062b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80062bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80062c0:	fa1f f883 	uxth.w	r8, r3
 80062c4:	fa11 f18b 	uxtah	r1, r1, fp
 80062c8:	0c1b      	lsrs	r3, r3, #16
 80062ca:	eba1 0808 	sub.w	r8, r1, r8
 80062ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80062d6:	fa1f f888 	uxth.w	r8, r8
 80062da:	1419      	asrs	r1, r3, #16
 80062dc:	454e      	cmp	r6, r9
 80062de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80062e2:	f84a 3b04 	str.w	r3, [sl], #4
 80062e6:	d8e7      	bhi.n	80062b8 <__mdiff+0x80>
 80062e8:	1b33      	subs	r3, r6, r4
 80062ea:	3b15      	subs	r3, #21
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	3304      	adds	r3, #4
 80062f2:	3415      	adds	r4, #21
 80062f4:	42a6      	cmp	r6, r4
 80062f6:	bf38      	it	cc
 80062f8:	2304      	movcc	r3, #4
 80062fa:	441d      	add	r5, r3
 80062fc:	4473      	add	r3, lr
 80062fe:	469e      	mov	lr, r3
 8006300:	462e      	mov	r6, r5
 8006302:	4566      	cmp	r6, ip
 8006304:	d30e      	bcc.n	8006324 <__mdiff+0xec>
 8006306:	f10c 0203 	add.w	r2, ip, #3
 800630a:	1b52      	subs	r2, r2, r5
 800630c:	f022 0203 	bic.w	r2, r2, #3
 8006310:	3d03      	subs	r5, #3
 8006312:	45ac      	cmp	ip, r5
 8006314:	bf38      	it	cc
 8006316:	2200      	movcc	r2, #0
 8006318:	441a      	add	r2, r3
 800631a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800631e:	b17b      	cbz	r3, 8006340 <__mdiff+0x108>
 8006320:	6107      	str	r7, [r0, #16]
 8006322:	e7a3      	b.n	800626c <__mdiff+0x34>
 8006324:	f856 8b04 	ldr.w	r8, [r6], #4
 8006328:	fa11 f288 	uxtah	r2, r1, r8
 800632c:	1414      	asrs	r4, r2, #16
 800632e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006332:	b292      	uxth	r2, r2
 8006334:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006338:	f84e 2b04 	str.w	r2, [lr], #4
 800633c:	1421      	asrs	r1, r4, #16
 800633e:	e7e0      	b.n	8006302 <__mdiff+0xca>
 8006340:	3f01      	subs	r7, #1
 8006342:	e7ea      	b.n	800631a <__mdiff+0xe2>
 8006344:	08007093 	.word	0x08007093
 8006348:	08007104 	.word	0x08007104

0800634c <__d2b>:
 800634c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006350:	4689      	mov	r9, r1
 8006352:	2101      	movs	r1, #1
 8006354:	ec57 6b10 	vmov	r6, r7, d0
 8006358:	4690      	mov	r8, r2
 800635a:	f7ff fccf 	bl	8005cfc <_Balloc>
 800635e:	4604      	mov	r4, r0
 8006360:	b930      	cbnz	r0, 8006370 <__d2b+0x24>
 8006362:	4602      	mov	r2, r0
 8006364:	4b25      	ldr	r3, [pc, #148]	; (80063fc <__d2b+0xb0>)
 8006366:	4826      	ldr	r0, [pc, #152]	; (8006400 <__d2b+0xb4>)
 8006368:	f240 310a 	movw	r1, #778	; 0x30a
 800636c:	f000 fbc0 	bl	8006af0 <__assert_func>
 8006370:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006374:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006378:	bb35      	cbnz	r5, 80063c8 <__d2b+0x7c>
 800637a:	2e00      	cmp	r6, #0
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	d028      	beq.n	80063d2 <__d2b+0x86>
 8006380:	4668      	mov	r0, sp
 8006382:	9600      	str	r6, [sp, #0]
 8006384:	f7ff fd82 	bl	8005e8c <__lo0bits>
 8006388:	9900      	ldr	r1, [sp, #0]
 800638a:	b300      	cbz	r0, 80063ce <__d2b+0x82>
 800638c:	9a01      	ldr	r2, [sp, #4]
 800638e:	f1c0 0320 	rsb	r3, r0, #32
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	430b      	orrs	r3, r1
 8006398:	40c2      	lsrs	r2, r0
 800639a:	6163      	str	r3, [r4, #20]
 800639c:	9201      	str	r2, [sp, #4]
 800639e:	9b01      	ldr	r3, [sp, #4]
 80063a0:	61a3      	str	r3, [r4, #24]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bf14      	ite	ne
 80063a6:	2202      	movne	r2, #2
 80063a8:	2201      	moveq	r2, #1
 80063aa:	6122      	str	r2, [r4, #16]
 80063ac:	b1d5      	cbz	r5, 80063e4 <__d2b+0x98>
 80063ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80063b2:	4405      	add	r5, r0
 80063b4:	f8c9 5000 	str.w	r5, [r9]
 80063b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063bc:	f8c8 0000 	str.w	r0, [r8]
 80063c0:	4620      	mov	r0, r4
 80063c2:	b003      	add	sp, #12
 80063c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063cc:	e7d5      	b.n	800637a <__d2b+0x2e>
 80063ce:	6161      	str	r1, [r4, #20]
 80063d0:	e7e5      	b.n	800639e <__d2b+0x52>
 80063d2:	a801      	add	r0, sp, #4
 80063d4:	f7ff fd5a 	bl	8005e8c <__lo0bits>
 80063d8:	9b01      	ldr	r3, [sp, #4]
 80063da:	6163      	str	r3, [r4, #20]
 80063dc:	2201      	movs	r2, #1
 80063de:	6122      	str	r2, [r4, #16]
 80063e0:	3020      	adds	r0, #32
 80063e2:	e7e3      	b.n	80063ac <__d2b+0x60>
 80063e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063ec:	f8c9 0000 	str.w	r0, [r9]
 80063f0:	6918      	ldr	r0, [r3, #16]
 80063f2:	f7ff fd2b 	bl	8005e4c <__hi0bits>
 80063f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80063fa:	e7df      	b.n	80063bc <__d2b+0x70>
 80063fc:	08007093 	.word	0x08007093
 8006400:	08007104 	.word	0x08007104

08006404 <_calloc_r>:
 8006404:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006406:	fba1 2402 	umull	r2, r4, r1, r2
 800640a:	b94c      	cbnz	r4, 8006420 <_calloc_r+0x1c>
 800640c:	4611      	mov	r1, r2
 800640e:	9201      	str	r2, [sp, #4]
 8006410:	f000 f87a 	bl	8006508 <_malloc_r>
 8006414:	9a01      	ldr	r2, [sp, #4]
 8006416:	4605      	mov	r5, r0
 8006418:	b930      	cbnz	r0, 8006428 <_calloc_r+0x24>
 800641a:	4628      	mov	r0, r5
 800641c:	b003      	add	sp, #12
 800641e:	bd30      	pop	{r4, r5, pc}
 8006420:	220c      	movs	r2, #12
 8006422:	6002      	str	r2, [r0, #0]
 8006424:	2500      	movs	r5, #0
 8006426:	e7f8      	b.n	800641a <_calloc_r+0x16>
 8006428:	4621      	mov	r1, r4
 800642a:	f7fe f84d 	bl	80044c8 <memset>
 800642e:	e7f4      	b.n	800641a <_calloc_r+0x16>

08006430 <_free_r>:
 8006430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006432:	2900      	cmp	r1, #0
 8006434:	d044      	beq.n	80064c0 <_free_r+0x90>
 8006436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800643a:	9001      	str	r0, [sp, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f1a1 0404 	sub.w	r4, r1, #4
 8006442:	bfb8      	it	lt
 8006444:	18e4      	addlt	r4, r4, r3
 8006446:	f000 fcdf 	bl	8006e08 <__malloc_lock>
 800644a:	4a1e      	ldr	r2, [pc, #120]	; (80064c4 <_free_r+0x94>)
 800644c:	9801      	ldr	r0, [sp, #4]
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	b933      	cbnz	r3, 8006460 <_free_r+0x30>
 8006452:	6063      	str	r3, [r4, #4]
 8006454:	6014      	str	r4, [r2, #0]
 8006456:	b003      	add	sp, #12
 8006458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800645c:	f000 bcda 	b.w	8006e14 <__malloc_unlock>
 8006460:	42a3      	cmp	r3, r4
 8006462:	d908      	bls.n	8006476 <_free_r+0x46>
 8006464:	6825      	ldr	r5, [r4, #0]
 8006466:	1961      	adds	r1, r4, r5
 8006468:	428b      	cmp	r3, r1
 800646a:	bf01      	itttt	eq
 800646c:	6819      	ldreq	r1, [r3, #0]
 800646e:	685b      	ldreq	r3, [r3, #4]
 8006470:	1949      	addeq	r1, r1, r5
 8006472:	6021      	streq	r1, [r4, #0]
 8006474:	e7ed      	b.n	8006452 <_free_r+0x22>
 8006476:	461a      	mov	r2, r3
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	b10b      	cbz	r3, 8006480 <_free_r+0x50>
 800647c:	42a3      	cmp	r3, r4
 800647e:	d9fa      	bls.n	8006476 <_free_r+0x46>
 8006480:	6811      	ldr	r1, [r2, #0]
 8006482:	1855      	adds	r5, r2, r1
 8006484:	42a5      	cmp	r5, r4
 8006486:	d10b      	bne.n	80064a0 <_free_r+0x70>
 8006488:	6824      	ldr	r4, [r4, #0]
 800648a:	4421      	add	r1, r4
 800648c:	1854      	adds	r4, r2, r1
 800648e:	42a3      	cmp	r3, r4
 8006490:	6011      	str	r1, [r2, #0]
 8006492:	d1e0      	bne.n	8006456 <_free_r+0x26>
 8006494:	681c      	ldr	r4, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	6053      	str	r3, [r2, #4]
 800649a:	4421      	add	r1, r4
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	e7da      	b.n	8006456 <_free_r+0x26>
 80064a0:	d902      	bls.n	80064a8 <_free_r+0x78>
 80064a2:	230c      	movs	r3, #12
 80064a4:	6003      	str	r3, [r0, #0]
 80064a6:	e7d6      	b.n	8006456 <_free_r+0x26>
 80064a8:	6825      	ldr	r5, [r4, #0]
 80064aa:	1961      	adds	r1, r4, r5
 80064ac:	428b      	cmp	r3, r1
 80064ae:	bf04      	itt	eq
 80064b0:	6819      	ldreq	r1, [r3, #0]
 80064b2:	685b      	ldreq	r3, [r3, #4]
 80064b4:	6063      	str	r3, [r4, #4]
 80064b6:	bf04      	itt	eq
 80064b8:	1949      	addeq	r1, r1, r5
 80064ba:	6021      	streq	r1, [r4, #0]
 80064bc:	6054      	str	r4, [r2, #4]
 80064be:	e7ca      	b.n	8006456 <_free_r+0x26>
 80064c0:	b003      	add	sp, #12
 80064c2:	bd30      	pop	{r4, r5, pc}
 80064c4:	20000204 	.word	0x20000204

080064c8 <sbrk_aligned>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	4e0e      	ldr	r6, [pc, #56]	; (8006504 <sbrk_aligned+0x3c>)
 80064cc:	460c      	mov	r4, r1
 80064ce:	6831      	ldr	r1, [r6, #0]
 80064d0:	4605      	mov	r5, r0
 80064d2:	b911      	cbnz	r1, 80064da <sbrk_aligned+0x12>
 80064d4:	f000 f9e6 	bl	80068a4 <_sbrk_r>
 80064d8:	6030      	str	r0, [r6, #0]
 80064da:	4621      	mov	r1, r4
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 f9e1 	bl	80068a4 <_sbrk_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d00a      	beq.n	80064fc <sbrk_aligned+0x34>
 80064e6:	1cc4      	adds	r4, r0, #3
 80064e8:	f024 0403 	bic.w	r4, r4, #3
 80064ec:	42a0      	cmp	r0, r4
 80064ee:	d007      	beq.n	8006500 <sbrk_aligned+0x38>
 80064f0:	1a21      	subs	r1, r4, r0
 80064f2:	4628      	mov	r0, r5
 80064f4:	f000 f9d6 	bl	80068a4 <_sbrk_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	d101      	bne.n	8006500 <sbrk_aligned+0x38>
 80064fc:	f04f 34ff 	mov.w	r4, #4294967295
 8006500:	4620      	mov	r0, r4
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	20000208 	.word	0x20000208

08006508 <_malloc_r>:
 8006508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650c:	1ccd      	adds	r5, r1, #3
 800650e:	f025 0503 	bic.w	r5, r5, #3
 8006512:	3508      	adds	r5, #8
 8006514:	2d0c      	cmp	r5, #12
 8006516:	bf38      	it	cc
 8006518:	250c      	movcc	r5, #12
 800651a:	2d00      	cmp	r5, #0
 800651c:	4607      	mov	r7, r0
 800651e:	db01      	blt.n	8006524 <_malloc_r+0x1c>
 8006520:	42a9      	cmp	r1, r5
 8006522:	d905      	bls.n	8006530 <_malloc_r+0x28>
 8006524:	230c      	movs	r3, #12
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	2600      	movs	r6, #0
 800652a:	4630      	mov	r0, r6
 800652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006530:	4e2e      	ldr	r6, [pc, #184]	; (80065ec <_malloc_r+0xe4>)
 8006532:	f000 fc69 	bl	8006e08 <__malloc_lock>
 8006536:	6833      	ldr	r3, [r6, #0]
 8006538:	461c      	mov	r4, r3
 800653a:	bb34      	cbnz	r4, 800658a <_malloc_r+0x82>
 800653c:	4629      	mov	r1, r5
 800653e:	4638      	mov	r0, r7
 8006540:	f7ff ffc2 	bl	80064c8 <sbrk_aligned>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	4604      	mov	r4, r0
 8006548:	d14d      	bne.n	80065e6 <_malloc_r+0xde>
 800654a:	6834      	ldr	r4, [r6, #0]
 800654c:	4626      	mov	r6, r4
 800654e:	2e00      	cmp	r6, #0
 8006550:	d140      	bne.n	80065d4 <_malloc_r+0xcc>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	4631      	mov	r1, r6
 8006556:	4638      	mov	r0, r7
 8006558:	eb04 0803 	add.w	r8, r4, r3
 800655c:	f000 f9a2 	bl	80068a4 <_sbrk_r>
 8006560:	4580      	cmp	r8, r0
 8006562:	d13a      	bne.n	80065da <_malloc_r+0xd2>
 8006564:	6821      	ldr	r1, [r4, #0]
 8006566:	3503      	adds	r5, #3
 8006568:	1a6d      	subs	r5, r5, r1
 800656a:	f025 0503 	bic.w	r5, r5, #3
 800656e:	3508      	adds	r5, #8
 8006570:	2d0c      	cmp	r5, #12
 8006572:	bf38      	it	cc
 8006574:	250c      	movcc	r5, #12
 8006576:	4629      	mov	r1, r5
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff ffa5 	bl	80064c8 <sbrk_aligned>
 800657e:	3001      	adds	r0, #1
 8006580:	d02b      	beq.n	80065da <_malloc_r+0xd2>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	442b      	add	r3, r5
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	e00e      	b.n	80065a8 <_malloc_r+0xa0>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	1b52      	subs	r2, r2, r5
 800658e:	d41e      	bmi.n	80065ce <_malloc_r+0xc6>
 8006590:	2a0b      	cmp	r2, #11
 8006592:	d916      	bls.n	80065c2 <_malloc_r+0xba>
 8006594:	1961      	adds	r1, r4, r5
 8006596:	42a3      	cmp	r3, r4
 8006598:	6025      	str	r5, [r4, #0]
 800659a:	bf18      	it	ne
 800659c:	6059      	strne	r1, [r3, #4]
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	bf08      	it	eq
 80065a2:	6031      	streq	r1, [r6, #0]
 80065a4:	5162      	str	r2, [r4, r5]
 80065a6:	604b      	str	r3, [r1, #4]
 80065a8:	4638      	mov	r0, r7
 80065aa:	f104 060b 	add.w	r6, r4, #11
 80065ae:	f000 fc31 	bl	8006e14 <__malloc_unlock>
 80065b2:	f026 0607 	bic.w	r6, r6, #7
 80065b6:	1d23      	adds	r3, r4, #4
 80065b8:	1af2      	subs	r2, r6, r3
 80065ba:	d0b6      	beq.n	800652a <_malloc_r+0x22>
 80065bc:	1b9b      	subs	r3, r3, r6
 80065be:	50a3      	str	r3, [r4, r2]
 80065c0:	e7b3      	b.n	800652a <_malloc_r+0x22>
 80065c2:	6862      	ldr	r2, [r4, #4]
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	bf0c      	ite	eq
 80065c8:	6032      	streq	r2, [r6, #0]
 80065ca:	605a      	strne	r2, [r3, #4]
 80065cc:	e7ec      	b.n	80065a8 <_malloc_r+0xa0>
 80065ce:	4623      	mov	r3, r4
 80065d0:	6864      	ldr	r4, [r4, #4]
 80065d2:	e7b2      	b.n	800653a <_malloc_r+0x32>
 80065d4:	4634      	mov	r4, r6
 80065d6:	6876      	ldr	r6, [r6, #4]
 80065d8:	e7b9      	b.n	800654e <_malloc_r+0x46>
 80065da:	230c      	movs	r3, #12
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	4638      	mov	r0, r7
 80065e0:	f000 fc18 	bl	8006e14 <__malloc_unlock>
 80065e4:	e7a1      	b.n	800652a <_malloc_r+0x22>
 80065e6:	6025      	str	r5, [r4, #0]
 80065e8:	e7de      	b.n	80065a8 <_malloc_r+0xa0>
 80065ea:	bf00      	nop
 80065ec:	20000204 	.word	0x20000204

080065f0 <__sfputc_r>:
 80065f0:	6893      	ldr	r3, [r2, #8]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	b410      	push	{r4}
 80065f8:	6093      	str	r3, [r2, #8]
 80065fa:	da08      	bge.n	800660e <__sfputc_r+0x1e>
 80065fc:	6994      	ldr	r4, [r2, #24]
 80065fe:	42a3      	cmp	r3, r4
 8006600:	db01      	blt.n	8006606 <__sfputc_r+0x16>
 8006602:	290a      	cmp	r1, #10
 8006604:	d103      	bne.n	800660e <__sfputc_r+0x1e>
 8006606:	f85d 4b04 	ldr.w	r4, [sp], #4
 800660a:	f000 b99f 	b.w	800694c <__swbuf_r>
 800660e:	6813      	ldr	r3, [r2, #0]
 8006610:	1c58      	adds	r0, r3, #1
 8006612:	6010      	str	r0, [r2, #0]
 8006614:	7019      	strb	r1, [r3, #0]
 8006616:	4608      	mov	r0, r1
 8006618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800661c:	4770      	bx	lr

0800661e <__sfputs_r>:
 800661e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006620:	4606      	mov	r6, r0
 8006622:	460f      	mov	r7, r1
 8006624:	4614      	mov	r4, r2
 8006626:	18d5      	adds	r5, r2, r3
 8006628:	42ac      	cmp	r4, r5
 800662a:	d101      	bne.n	8006630 <__sfputs_r+0x12>
 800662c:	2000      	movs	r0, #0
 800662e:	e007      	b.n	8006640 <__sfputs_r+0x22>
 8006630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006634:	463a      	mov	r2, r7
 8006636:	4630      	mov	r0, r6
 8006638:	f7ff ffda 	bl	80065f0 <__sfputc_r>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d1f3      	bne.n	8006628 <__sfputs_r+0xa>
 8006640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006644 <_vfiprintf_r>:
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	460d      	mov	r5, r1
 800664a:	b09d      	sub	sp, #116	; 0x74
 800664c:	4614      	mov	r4, r2
 800664e:	4698      	mov	r8, r3
 8006650:	4606      	mov	r6, r0
 8006652:	b118      	cbz	r0, 800665c <_vfiprintf_r+0x18>
 8006654:	6983      	ldr	r3, [r0, #24]
 8006656:	b90b      	cbnz	r3, 800665c <_vfiprintf_r+0x18>
 8006658:	f7ff fa94 	bl	8005b84 <__sinit>
 800665c:	4b89      	ldr	r3, [pc, #548]	; (8006884 <_vfiprintf_r+0x240>)
 800665e:	429d      	cmp	r5, r3
 8006660:	d11b      	bne.n	800669a <_vfiprintf_r+0x56>
 8006662:	6875      	ldr	r5, [r6, #4]
 8006664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006666:	07d9      	lsls	r1, r3, #31
 8006668:	d405      	bmi.n	8006676 <_vfiprintf_r+0x32>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	059a      	lsls	r2, r3, #22
 800666e:	d402      	bmi.n	8006676 <_vfiprintf_r+0x32>
 8006670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006672:	f7ff fb2a 	bl	8005cca <__retarget_lock_acquire_recursive>
 8006676:	89ab      	ldrh	r3, [r5, #12]
 8006678:	071b      	lsls	r3, r3, #28
 800667a:	d501      	bpl.n	8006680 <_vfiprintf_r+0x3c>
 800667c:	692b      	ldr	r3, [r5, #16]
 800667e:	b9eb      	cbnz	r3, 80066bc <_vfiprintf_r+0x78>
 8006680:	4629      	mov	r1, r5
 8006682:	4630      	mov	r0, r6
 8006684:	f000 f9c6 	bl	8006a14 <__swsetup_r>
 8006688:	b1c0      	cbz	r0, 80066bc <_vfiprintf_r+0x78>
 800668a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800668c:	07dc      	lsls	r4, r3, #31
 800668e:	d50e      	bpl.n	80066ae <_vfiprintf_r+0x6a>
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	b01d      	add	sp, #116	; 0x74
 8006696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669a:	4b7b      	ldr	r3, [pc, #492]	; (8006888 <_vfiprintf_r+0x244>)
 800669c:	429d      	cmp	r5, r3
 800669e:	d101      	bne.n	80066a4 <_vfiprintf_r+0x60>
 80066a0:	68b5      	ldr	r5, [r6, #8]
 80066a2:	e7df      	b.n	8006664 <_vfiprintf_r+0x20>
 80066a4:	4b79      	ldr	r3, [pc, #484]	; (800688c <_vfiprintf_r+0x248>)
 80066a6:	429d      	cmp	r5, r3
 80066a8:	bf08      	it	eq
 80066aa:	68f5      	ldreq	r5, [r6, #12]
 80066ac:	e7da      	b.n	8006664 <_vfiprintf_r+0x20>
 80066ae:	89ab      	ldrh	r3, [r5, #12]
 80066b0:	0598      	lsls	r0, r3, #22
 80066b2:	d4ed      	bmi.n	8006690 <_vfiprintf_r+0x4c>
 80066b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066b6:	f7ff fb09 	bl	8005ccc <__retarget_lock_release_recursive>
 80066ba:	e7e9      	b.n	8006690 <_vfiprintf_r+0x4c>
 80066bc:	2300      	movs	r3, #0
 80066be:	9309      	str	r3, [sp, #36]	; 0x24
 80066c0:	2320      	movs	r3, #32
 80066c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80066ca:	2330      	movs	r3, #48	; 0x30
 80066cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006890 <_vfiprintf_r+0x24c>
 80066d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066d4:	f04f 0901 	mov.w	r9, #1
 80066d8:	4623      	mov	r3, r4
 80066da:	469a      	mov	sl, r3
 80066dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066e0:	b10a      	cbz	r2, 80066e6 <_vfiprintf_r+0xa2>
 80066e2:	2a25      	cmp	r2, #37	; 0x25
 80066e4:	d1f9      	bne.n	80066da <_vfiprintf_r+0x96>
 80066e6:	ebba 0b04 	subs.w	fp, sl, r4
 80066ea:	d00b      	beq.n	8006704 <_vfiprintf_r+0xc0>
 80066ec:	465b      	mov	r3, fp
 80066ee:	4622      	mov	r2, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff ff93 	bl	800661e <__sfputs_r>
 80066f8:	3001      	adds	r0, #1
 80066fa:	f000 80aa 	beq.w	8006852 <_vfiprintf_r+0x20e>
 80066fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006700:	445a      	add	r2, fp
 8006702:	9209      	str	r2, [sp, #36]	; 0x24
 8006704:	f89a 3000 	ldrb.w	r3, [sl]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80a2 	beq.w	8006852 <_vfiprintf_r+0x20e>
 800670e:	2300      	movs	r3, #0
 8006710:	f04f 32ff 	mov.w	r2, #4294967295
 8006714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006718:	f10a 0a01 	add.w	sl, sl, #1
 800671c:	9304      	str	r3, [sp, #16]
 800671e:	9307      	str	r3, [sp, #28]
 8006720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006724:	931a      	str	r3, [sp, #104]	; 0x68
 8006726:	4654      	mov	r4, sl
 8006728:	2205      	movs	r2, #5
 800672a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800672e:	4858      	ldr	r0, [pc, #352]	; (8006890 <_vfiprintf_r+0x24c>)
 8006730:	f7f9 fd7e 	bl	8000230 <memchr>
 8006734:	9a04      	ldr	r2, [sp, #16]
 8006736:	b9d8      	cbnz	r0, 8006770 <_vfiprintf_r+0x12c>
 8006738:	06d1      	lsls	r1, r2, #27
 800673a:	bf44      	itt	mi
 800673c:	2320      	movmi	r3, #32
 800673e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006742:	0713      	lsls	r3, r2, #28
 8006744:	bf44      	itt	mi
 8006746:	232b      	movmi	r3, #43	; 0x2b
 8006748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800674c:	f89a 3000 	ldrb.w	r3, [sl]
 8006750:	2b2a      	cmp	r3, #42	; 0x2a
 8006752:	d015      	beq.n	8006780 <_vfiprintf_r+0x13c>
 8006754:	9a07      	ldr	r2, [sp, #28]
 8006756:	4654      	mov	r4, sl
 8006758:	2000      	movs	r0, #0
 800675a:	f04f 0c0a 	mov.w	ip, #10
 800675e:	4621      	mov	r1, r4
 8006760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006764:	3b30      	subs	r3, #48	; 0x30
 8006766:	2b09      	cmp	r3, #9
 8006768:	d94e      	bls.n	8006808 <_vfiprintf_r+0x1c4>
 800676a:	b1b0      	cbz	r0, 800679a <_vfiprintf_r+0x156>
 800676c:	9207      	str	r2, [sp, #28]
 800676e:	e014      	b.n	800679a <_vfiprintf_r+0x156>
 8006770:	eba0 0308 	sub.w	r3, r0, r8
 8006774:	fa09 f303 	lsl.w	r3, r9, r3
 8006778:	4313      	orrs	r3, r2
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	46a2      	mov	sl, r4
 800677e:	e7d2      	b.n	8006726 <_vfiprintf_r+0xe2>
 8006780:	9b03      	ldr	r3, [sp, #12]
 8006782:	1d19      	adds	r1, r3, #4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	9103      	str	r1, [sp, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	bfbb      	ittet	lt
 800678c:	425b      	neglt	r3, r3
 800678e:	f042 0202 	orrlt.w	r2, r2, #2
 8006792:	9307      	strge	r3, [sp, #28]
 8006794:	9307      	strlt	r3, [sp, #28]
 8006796:	bfb8      	it	lt
 8006798:	9204      	strlt	r2, [sp, #16]
 800679a:	7823      	ldrb	r3, [r4, #0]
 800679c:	2b2e      	cmp	r3, #46	; 0x2e
 800679e:	d10c      	bne.n	80067ba <_vfiprintf_r+0x176>
 80067a0:	7863      	ldrb	r3, [r4, #1]
 80067a2:	2b2a      	cmp	r3, #42	; 0x2a
 80067a4:	d135      	bne.n	8006812 <_vfiprintf_r+0x1ce>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	1d1a      	adds	r2, r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	9203      	str	r2, [sp, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfb8      	it	lt
 80067b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80067b6:	3402      	adds	r4, #2
 80067b8:	9305      	str	r3, [sp, #20]
 80067ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068a0 <_vfiprintf_r+0x25c>
 80067be:	7821      	ldrb	r1, [r4, #0]
 80067c0:	2203      	movs	r2, #3
 80067c2:	4650      	mov	r0, sl
 80067c4:	f7f9 fd34 	bl	8000230 <memchr>
 80067c8:	b140      	cbz	r0, 80067dc <_vfiprintf_r+0x198>
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	eba0 000a 	sub.w	r0, r0, sl
 80067d0:	fa03 f000 	lsl.w	r0, r3, r0
 80067d4:	9b04      	ldr	r3, [sp, #16]
 80067d6:	4303      	orrs	r3, r0
 80067d8:	3401      	adds	r4, #1
 80067da:	9304      	str	r3, [sp, #16]
 80067dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e0:	482c      	ldr	r0, [pc, #176]	; (8006894 <_vfiprintf_r+0x250>)
 80067e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067e6:	2206      	movs	r2, #6
 80067e8:	f7f9 fd22 	bl	8000230 <memchr>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d03f      	beq.n	8006870 <_vfiprintf_r+0x22c>
 80067f0:	4b29      	ldr	r3, [pc, #164]	; (8006898 <_vfiprintf_r+0x254>)
 80067f2:	bb1b      	cbnz	r3, 800683c <_vfiprintf_r+0x1f8>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	3307      	adds	r3, #7
 80067f8:	f023 0307 	bic.w	r3, r3, #7
 80067fc:	3308      	adds	r3, #8
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006802:	443b      	add	r3, r7
 8006804:	9309      	str	r3, [sp, #36]	; 0x24
 8006806:	e767      	b.n	80066d8 <_vfiprintf_r+0x94>
 8006808:	fb0c 3202 	mla	r2, ip, r2, r3
 800680c:	460c      	mov	r4, r1
 800680e:	2001      	movs	r0, #1
 8006810:	e7a5      	b.n	800675e <_vfiprintf_r+0x11a>
 8006812:	2300      	movs	r3, #0
 8006814:	3401      	adds	r4, #1
 8006816:	9305      	str	r3, [sp, #20]
 8006818:	4619      	mov	r1, r3
 800681a:	f04f 0c0a 	mov.w	ip, #10
 800681e:	4620      	mov	r0, r4
 8006820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006824:	3a30      	subs	r2, #48	; 0x30
 8006826:	2a09      	cmp	r2, #9
 8006828:	d903      	bls.n	8006832 <_vfiprintf_r+0x1ee>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0c5      	beq.n	80067ba <_vfiprintf_r+0x176>
 800682e:	9105      	str	r1, [sp, #20]
 8006830:	e7c3      	b.n	80067ba <_vfiprintf_r+0x176>
 8006832:	fb0c 2101 	mla	r1, ip, r1, r2
 8006836:	4604      	mov	r4, r0
 8006838:	2301      	movs	r3, #1
 800683a:	e7f0      	b.n	800681e <_vfiprintf_r+0x1da>
 800683c:	ab03      	add	r3, sp, #12
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	462a      	mov	r2, r5
 8006842:	4b16      	ldr	r3, [pc, #88]	; (800689c <_vfiprintf_r+0x258>)
 8006844:	a904      	add	r1, sp, #16
 8006846:	4630      	mov	r0, r6
 8006848:	f7fd fee6 	bl	8004618 <_printf_float>
 800684c:	4607      	mov	r7, r0
 800684e:	1c78      	adds	r0, r7, #1
 8006850:	d1d6      	bne.n	8006800 <_vfiprintf_r+0x1bc>
 8006852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006854:	07d9      	lsls	r1, r3, #31
 8006856:	d405      	bmi.n	8006864 <_vfiprintf_r+0x220>
 8006858:	89ab      	ldrh	r3, [r5, #12]
 800685a:	059a      	lsls	r2, r3, #22
 800685c:	d402      	bmi.n	8006864 <_vfiprintf_r+0x220>
 800685e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006860:	f7ff fa34 	bl	8005ccc <__retarget_lock_release_recursive>
 8006864:	89ab      	ldrh	r3, [r5, #12]
 8006866:	065b      	lsls	r3, r3, #25
 8006868:	f53f af12 	bmi.w	8006690 <_vfiprintf_r+0x4c>
 800686c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800686e:	e711      	b.n	8006694 <_vfiprintf_r+0x50>
 8006870:	ab03      	add	r3, sp, #12
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	462a      	mov	r2, r5
 8006876:	4b09      	ldr	r3, [pc, #36]	; (800689c <_vfiprintf_r+0x258>)
 8006878:	a904      	add	r1, sp, #16
 800687a:	4630      	mov	r0, r6
 800687c:	f7fe f970 	bl	8004b60 <_printf_i>
 8006880:	e7e4      	b.n	800684c <_vfiprintf_r+0x208>
 8006882:	bf00      	nop
 8006884:	080070c4 	.word	0x080070c4
 8006888:	080070e4 	.word	0x080070e4
 800688c:	080070a4 	.word	0x080070a4
 8006890:	0800725c 	.word	0x0800725c
 8006894:	08007266 	.word	0x08007266
 8006898:	08004619 	.word	0x08004619
 800689c:	0800661f 	.word	0x0800661f
 80068a0:	08007262 	.word	0x08007262

080068a4 <_sbrk_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4d06      	ldr	r5, [pc, #24]	; (80068c0 <_sbrk_r+0x1c>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4604      	mov	r4, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	602b      	str	r3, [r5, #0]
 80068b0:	f7fb fede 	bl	8002670 <_sbrk>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	d102      	bne.n	80068be <_sbrk_r+0x1a>
 80068b8:	682b      	ldr	r3, [r5, #0]
 80068ba:	b103      	cbz	r3, 80068be <_sbrk_r+0x1a>
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	bd38      	pop	{r3, r4, r5, pc}
 80068c0:	2000020c 	.word	0x2000020c

080068c4 <__sread>:
 80068c4:	b510      	push	{r4, lr}
 80068c6:	460c      	mov	r4, r1
 80068c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068cc:	f000 faa8 	bl	8006e20 <_read_r>
 80068d0:	2800      	cmp	r0, #0
 80068d2:	bfab      	itete	ge
 80068d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068d6:	89a3      	ldrhlt	r3, [r4, #12]
 80068d8:	181b      	addge	r3, r3, r0
 80068da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068de:	bfac      	ite	ge
 80068e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80068e2:	81a3      	strhlt	r3, [r4, #12]
 80068e4:	bd10      	pop	{r4, pc}

080068e6 <__swrite>:
 80068e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ea:	461f      	mov	r7, r3
 80068ec:	898b      	ldrh	r3, [r1, #12]
 80068ee:	05db      	lsls	r3, r3, #23
 80068f0:	4605      	mov	r5, r0
 80068f2:	460c      	mov	r4, r1
 80068f4:	4616      	mov	r6, r2
 80068f6:	d505      	bpl.n	8006904 <__swrite+0x1e>
 80068f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fc:	2302      	movs	r3, #2
 80068fe:	2200      	movs	r2, #0
 8006900:	f000 f9f8 	bl	8006cf4 <_lseek_r>
 8006904:	89a3      	ldrh	r3, [r4, #12]
 8006906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800690a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800690e:	81a3      	strh	r3, [r4, #12]
 8006910:	4632      	mov	r2, r6
 8006912:	463b      	mov	r3, r7
 8006914:	4628      	mov	r0, r5
 8006916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800691a:	f000 b869 	b.w	80069f0 <_write_r>

0800691e <__sseek>:
 800691e:	b510      	push	{r4, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006926:	f000 f9e5 	bl	8006cf4 <_lseek_r>
 800692a:	1c43      	adds	r3, r0, #1
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	bf15      	itete	ne
 8006930:	6560      	strne	r0, [r4, #84]	; 0x54
 8006932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800693a:	81a3      	strheq	r3, [r4, #12]
 800693c:	bf18      	it	ne
 800693e:	81a3      	strhne	r3, [r4, #12]
 8006940:	bd10      	pop	{r4, pc}

08006942 <__sclose>:
 8006942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006946:	f000 b8f1 	b.w	8006b2c <_close_r>
	...

0800694c <__swbuf_r>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	460e      	mov	r6, r1
 8006950:	4614      	mov	r4, r2
 8006952:	4605      	mov	r5, r0
 8006954:	b118      	cbz	r0, 800695e <__swbuf_r+0x12>
 8006956:	6983      	ldr	r3, [r0, #24]
 8006958:	b90b      	cbnz	r3, 800695e <__swbuf_r+0x12>
 800695a:	f7ff f913 	bl	8005b84 <__sinit>
 800695e:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <__swbuf_r+0x98>)
 8006960:	429c      	cmp	r4, r3
 8006962:	d12b      	bne.n	80069bc <__swbuf_r+0x70>
 8006964:	686c      	ldr	r4, [r5, #4]
 8006966:	69a3      	ldr	r3, [r4, #24]
 8006968:	60a3      	str	r3, [r4, #8]
 800696a:	89a3      	ldrh	r3, [r4, #12]
 800696c:	071a      	lsls	r2, r3, #28
 800696e:	d52f      	bpl.n	80069d0 <__swbuf_r+0x84>
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	b36b      	cbz	r3, 80069d0 <__swbuf_r+0x84>
 8006974:	6923      	ldr	r3, [r4, #16]
 8006976:	6820      	ldr	r0, [r4, #0]
 8006978:	1ac0      	subs	r0, r0, r3
 800697a:	6963      	ldr	r3, [r4, #20]
 800697c:	b2f6      	uxtb	r6, r6
 800697e:	4283      	cmp	r3, r0
 8006980:	4637      	mov	r7, r6
 8006982:	dc04      	bgt.n	800698e <__swbuf_r+0x42>
 8006984:	4621      	mov	r1, r4
 8006986:	4628      	mov	r0, r5
 8006988:	f000 f966 	bl	8006c58 <_fflush_r>
 800698c:	bb30      	cbnz	r0, 80069dc <__swbuf_r+0x90>
 800698e:	68a3      	ldr	r3, [r4, #8]
 8006990:	3b01      	subs	r3, #1
 8006992:	60a3      	str	r3, [r4, #8]
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	6022      	str	r2, [r4, #0]
 800699a:	701e      	strb	r6, [r3, #0]
 800699c:	6963      	ldr	r3, [r4, #20]
 800699e:	3001      	adds	r0, #1
 80069a0:	4283      	cmp	r3, r0
 80069a2:	d004      	beq.n	80069ae <__swbuf_r+0x62>
 80069a4:	89a3      	ldrh	r3, [r4, #12]
 80069a6:	07db      	lsls	r3, r3, #31
 80069a8:	d506      	bpl.n	80069b8 <__swbuf_r+0x6c>
 80069aa:	2e0a      	cmp	r6, #10
 80069ac:	d104      	bne.n	80069b8 <__swbuf_r+0x6c>
 80069ae:	4621      	mov	r1, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 f951 	bl	8006c58 <_fflush_r>
 80069b6:	b988      	cbnz	r0, 80069dc <__swbuf_r+0x90>
 80069b8:	4638      	mov	r0, r7
 80069ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069bc:	4b0a      	ldr	r3, [pc, #40]	; (80069e8 <__swbuf_r+0x9c>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	d101      	bne.n	80069c6 <__swbuf_r+0x7a>
 80069c2:	68ac      	ldr	r4, [r5, #8]
 80069c4:	e7cf      	b.n	8006966 <__swbuf_r+0x1a>
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <__swbuf_r+0xa0>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	bf08      	it	eq
 80069cc:	68ec      	ldreq	r4, [r5, #12]
 80069ce:	e7ca      	b.n	8006966 <__swbuf_r+0x1a>
 80069d0:	4621      	mov	r1, r4
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 f81e 	bl	8006a14 <__swsetup_r>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d0cb      	beq.n	8006974 <__swbuf_r+0x28>
 80069dc:	f04f 37ff 	mov.w	r7, #4294967295
 80069e0:	e7ea      	b.n	80069b8 <__swbuf_r+0x6c>
 80069e2:	bf00      	nop
 80069e4:	080070c4 	.word	0x080070c4
 80069e8:	080070e4 	.word	0x080070e4
 80069ec:	080070a4 	.word	0x080070a4

080069f0 <_write_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4d07      	ldr	r5, [pc, #28]	; (8006a10 <_write_r+0x20>)
 80069f4:	4604      	mov	r4, r0
 80069f6:	4608      	mov	r0, r1
 80069f8:	4611      	mov	r1, r2
 80069fa:	2200      	movs	r2, #0
 80069fc:	602a      	str	r2, [r5, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f7fb fde6 	bl	80025d0 <_write>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_write_r+0x1e>
 8006a08:	682b      	ldr	r3, [r5, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_write_r+0x1e>
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	2000020c 	.word	0x2000020c

08006a14 <__swsetup_r>:
 8006a14:	4b32      	ldr	r3, [pc, #200]	; (8006ae0 <__swsetup_r+0xcc>)
 8006a16:	b570      	push	{r4, r5, r6, lr}
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	4606      	mov	r6, r0
 8006a1c:	460c      	mov	r4, r1
 8006a1e:	b125      	cbz	r5, 8006a2a <__swsetup_r+0x16>
 8006a20:	69ab      	ldr	r3, [r5, #24]
 8006a22:	b913      	cbnz	r3, 8006a2a <__swsetup_r+0x16>
 8006a24:	4628      	mov	r0, r5
 8006a26:	f7ff f8ad 	bl	8005b84 <__sinit>
 8006a2a:	4b2e      	ldr	r3, [pc, #184]	; (8006ae4 <__swsetup_r+0xd0>)
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d10f      	bne.n	8006a50 <__swsetup_r+0x3c>
 8006a30:	686c      	ldr	r4, [r5, #4]
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a38:	0719      	lsls	r1, r3, #28
 8006a3a:	d42c      	bmi.n	8006a96 <__swsetup_r+0x82>
 8006a3c:	06dd      	lsls	r5, r3, #27
 8006a3e:	d411      	bmi.n	8006a64 <__swsetup_r+0x50>
 8006a40:	2309      	movs	r3, #9
 8006a42:	6033      	str	r3, [r6, #0]
 8006a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4e:	e03e      	b.n	8006ace <__swsetup_r+0xba>
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <__swsetup_r+0xd4>)
 8006a52:	429c      	cmp	r4, r3
 8006a54:	d101      	bne.n	8006a5a <__swsetup_r+0x46>
 8006a56:	68ac      	ldr	r4, [r5, #8]
 8006a58:	e7eb      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a5a:	4b24      	ldr	r3, [pc, #144]	; (8006aec <__swsetup_r+0xd8>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	bf08      	it	eq
 8006a60:	68ec      	ldreq	r4, [r5, #12]
 8006a62:	e7e6      	b.n	8006a32 <__swsetup_r+0x1e>
 8006a64:	0758      	lsls	r0, r3, #29
 8006a66:	d512      	bpl.n	8006a8e <__swsetup_r+0x7a>
 8006a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a6a:	b141      	cbz	r1, 8006a7e <__swsetup_r+0x6a>
 8006a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a70:	4299      	cmp	r1, r3
 8006a72:	d002      	beq.n	8006a7a <__swsetup_r+0x66>
 8006a74:	4630      	mov	r0, r6
 8006a76:	f7ff fcdb 	bl	8006430 <_free_r>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a7e:	89a3      	ldrh	r3, [r4, #12]
 8006a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a84:	81a3      	strh	r3, [r4, #12]
 8006a86:	2300      	movs	r3, #0
 8006a88:	6063      	str	r3, [r4, #4]
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f043 0308 	orr.w	r3, r3, #8
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	6923      	ldr	r3, [r4, #16]
 8006a98:	b94b      	cbnz	r3, 8006aae <__swsetup_r+0x9a>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa4:	d003      	beq.n	8006aae <__swsetup_r+0x9a>
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	f000 f95b 	bl	8006d64 <__smakebuf_r>
 8006aae:	89a0      	ldrh	r0, [r4, #12]
 8006ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ab4:	f010 0301 	ands.w	r3, r0, #1
 8006ab8:	d00a      	beq.n	8006ad0 <__swsetup_r+0xbc>
 8006aba:	2300      	movs	r3, #0
 8006abc:	60a3      	str	r3, [r4, #8]
 8006abe:	6963      	ldr	r3, [r4, #20]
 8006ac0:	425b      	negs	r3, r3
 8006ac2:	61a3      	str	r3, [r4, #24]
 8006ac4:	6923      	ldr	r3, [r4, #16]
 8006ac6:	b943      	cbnz	r3, 8006ada <__swsetup_r+0xc6>
 8006ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006acc:	d1ba      	bne.n	8006a44 <__swsetup_r+0x30>
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
 8006ad0:	0781      	lsls	r1, r0, #30
 8006ad2:	bf58      	it	pl
 8006ad4:	6963      	ldrpl	r3, [r4, #20]
 8006ad6:	60a3      	str	r3, [r4, #8]
 8006ad8:	e7f4      	b.n	8006ac4 <__swsetup_r+0xb0>
 8006ada:	2000      	movs	r0, #0
 8006adc:	e7f7      	b.n	8006ace <__swsetup_r+0xba>
 8006ade:	bf00      	nop
 8006ae0:	20000004 	.word	0x20000004
 8006ae4:	080070c4 	.word	0x080070c4
 8006ae8:	080070e4 	.word	0x080070e4
 8006aec:	080070a4 	.word	0x080070a4

08006af0 <__assert_func>:
 8006af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006af2:	4614      	mov	r4, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	4b09      	ldr	r3, [pc, #36]	; (8006b1c <__assert_func+0x2c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4605      	mov	r5, r0
 8006afc:	68d8      	ldr	r0, [r3, #12]
 8006afe:	b14c      	cbz	r4, 8006b14 <__assert_func+0x24>
 8006b00:	4b07      	ldr	r3, [pc, #28]	; (8006b20 <__assert_func+0x30>)
 8006b02:	9100      	str	r1, [sp, #0]
 8006b04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b08:	4906      	ldr	r1, [pc, #24]	; (8006b24 <__assert_func+0x34>)
 8006b0a:	462b      	mov	r3, r5
 8006b0c:	f000 f8e0 	bl	8006cd0 <fiprintf>
 8006b10:	f000 f9a5 	bl	8006e5e <abort>
 8006b14:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <__assert_func+0x38>)
 8006b16:	461c      	mov	r4, r3
 8006b18:	e7f3      	b.n	8006b02 <__assert_func+0x12>
 8006b1a:	bf00      	nop
 8006b1c:	20000004 	.word	0x20000004
 8006b20:	0800726d 	.word	0x0800726d
 8006b24:	0800727a 	.word	0x0800727a
 8006b28:	080072a8 	.word	0x080072a8

08006b2c <_close_r>:
 8006b2c:	b538      	push	{r3, r4, r5, lr}
 8006b2e:	4d06      	ldr	r5, [pc, #24]	; (8006b48 <_close_r+0x1c>)
 8006b30:	2300      	movs	r3, #0
 8006b32:	4604      	mov	r4, r0
 8006b34:	4608      	mov	r0, r1
 8006b36:	602b      	str	r3, [r5, #0]
 8006b38:	f7fb fd66 	bl	8002608 <_close>
 8006b3c:	1c43      	adds	r3, r0, #1
 8006b3e:	d102      	bne.n	8006b46 <_close_r+0x1a>
 8006b40:	682b      	ldr	r3, [r5, #0]
 8006b42:	b103      	cbz	r3, 8006b46 <_close_r+0x1a>
 8006b44:	6023      	str	r3, [r4, #0]
 8006b46:	bd38      	pop	{r3, r4, r5, pc}
 8006b48:	2000020c 	.word	0x2000020c

08006b4c <__sflush_r>:
 8006b4c:	898a      	ldrh	r2, [r1, #12]
 8006b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b52:	4605      	mov	r5, r0
 8006b54:	0710      	lsls	r0, r2, #28
 8006b56:	460c      	mov	r4, r1
 8006b58:	d458      	bmi.n	8006c0c <__sflush_r+0xc0>
 8006b5a:	684b      	ldr	r3, [r1, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dc05      	bgt.n	8006b6c <__sflush_r+0x20>
 8006b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dc02      	bgt.n	8006b6c <__sflush_r+0x20>
 8006b66:	2000      	movs	r0, #0
 8006b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	d0f9      	beq.n	8006b66 <__sflush_r+0x1a>
 8006b72:	2300      	movs	r3, #0
 8006b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b78:	682f      	ldr	r7, [r5, #0]
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	d032      	beq.n	8006be4 <__sflush_r+0x98>
 8006b7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b80:	89a3      	ldrh	r3, [r4, #12]
 8006b82:	075a      	lsls	r2, r3, #29
 8006b84:	d505      	bpl.n	8006b92 <__sflush_r+0x46>
 8006b86:	6863      	ldr	r3, [r4, #4]
 8006b88:	1ac0      	subs	r0, r0, r3
 8006b8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b8c:	b10b      	cbz	r3, 8006b92 <__sflush_r+0x46>
 8006b8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b90:	1ac0      	subs	r0, r0, r3
 8006b92:	2300      	movs	r3, #0
 8006b94:	4602      	mov	r2, r0
 8006b96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b98:	6a21      	ldr	r1, [r4, #32]
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	47b0      	blx	r6
 8006b9e:	1c43      	adds	r3, r0, #1
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	d106      	bne.n	8006bb2 <__sflush_r+0x66>
 8006ba4:	6829      	ldr	r1, [r5, #0]
 8006ba6:	291d      	cmp	r1, #29
 8006ba8:	d82c      	bhi.n	8006c04 <__sflush_r+0xb8>
 8006baa:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <__sflush_r+0x108>)
 8006bac:	40ca      	lsrs	r2, r1
 8006bae:	07d6      	lsls	r6, r2, #31
 8006bb0:	d528      	bpl.n	8006c04 <__sflush_r+0xb8>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	6062      	str	r2, [r4, #4]
 8006bb6:	04d9      	lsls	r1, r3, #19
 8006bb8:	6922      	ldr	r2, [r4, #16]
 8006bba:	6022      	str	r2, [r4, #0]
 8006bbc:	d504      	bpl.n	8006bc8 <__sflush_r+0x7c>
 8006bbe:	1c42      	adds	r2, r0, #1
 8006bc0:	d101      	bne.n	8006bc6 <__sflush_r+0x7a>
 8006bc2:	682b      	ldr	r3, [r5, #0]
 8006bc4:	b903      	cbnz	r3, 8006bc8 <__sflush_r+0x7c>
 8006bc6:	6560      	str	r0, [r4, #84]	; 0x54
 8006bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bca:	602f      	str	r7, [r5, #0]
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	d0ca      	beq.n	8006b66 <__sflush_r+0x1a>
 8006bd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bd4:	4299      	cmp	r1, r3
 8006bd6:	d002      	beq.n	8006bde <__sflush_r+0x92>
 8006bd8:	4628      	mov	r0, r5
 8006bda:	f7ff fc29 	bl	8006430 <_free_r>
 8006bde:	2000      	movs	r0, #0
 8006be0:	6360      	str	r0, [r4, #52]	; 0x34
 8006be2:	e7c1      	b.n	8006b68 <__sflush_r+0x1c>
 8006be4:	6a21      	ldr	r1, [r4, #32]
 8006be6:	2301      	movs	r3, #1
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b0      	blx	r6
 8006bec:	1c41      	adds	r1, r0, #1
 8006bee:	d1c7      	bne.n	8006b80 <__sflush_r+0x34>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0c4      	beq.n	8006b80 <__sflush_r+0x34>
 8006bf6:	2b1d      	cmp	r3, #29
 8006bf8:	d001      	beq.n	8006bfe <__sflush_r+0xb2>
 8006bfa:	2b16      	cmp	r3, #22
 8006bfc:	d101      	bne.n	8006c02 <__sflush_r+0xb6>
 8006bfe:	602f      	str	r7, [r5, #0]
 8006c00:	e7b1      	b.n	8006b66 <__sflush_r+0x1a>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	e7ad      	b.n	8006b68 <__sflush_r+0x1c>
 8006c0c:	690f      	ldr	r7, [r1, #16]
 8006c0e:	2f00      	cmp	r7, #0
 8006c10:	d0a9      	beq.n	8006b66 <__sflush_r+0x1a>
 8006c12:	0793      	lsls	r3, r2, #30
 8006c14:	680e      	ldr	r6, [r1, #0]
 8006c16:	bf08      	it	eq
 8006c18:	694b      	ldreq	r3, [r1, #20]
 8006c1a:	600f      	str	r7, [r1, #0]
 8006c1c:	bf18      	it	ne
 8006c1e:	2300      	movne	r3, #0
 8006c20:	eba6 0807 	sub.w	r8, r6, r7
 8006c24:	608b      	str	r3, [r1, #8]
 8006c26:	f1b8 0f00 	cmp.w	r8, #0
 8006c2a:	dd9c      	ble.n	8006b66 <__sflush_r+0x1a>
 8006c2c:	6a21      	ldr	r1, [r4, #32]
 8006c2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006c30:	4643      	mov	r3, r8
 8006c32:	463a      	mov	r2, r7
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b0      	blx	r6
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	dc06      	bgt.n	8006c4a <__sflush_r+0xfe>
 8006c3c:	89a3      	ldrh	r3, [r4, #12]
 8006c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c42:	81a3      	strh	r3, [r4, #12]
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e78e      	b.n	8006b68 <__sflush_r+0x1c>
 8006c4a:	4407      	add	r7, r0
 8006c4c:	eba8 0800 	sub.w	r8, r8, r0
 8006c50:	e7e9      	b.n	8006c26 <__sflush_r+0xda>
 8006c52:	bf00      	nop
 8006c54:	20400001 	.word	0x20400001

08006c58 <_fflush_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	690b      	ldr	r3, [r1, #16]
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	b913      	cbnz	r3, 8006c68 <_fflush_r+0x10>
 8006c62:	2500      	movs	r5, #0
 8006c64:	4628      	mov	r0, r5
 8006c66:	bd38      	pop	{r3, r4, r5, pc}
 8006c68:	b118      	cbz	r0, 8006c72 <_fflush_r+0x1a>
 8006c6a:	6983      	ldr	r3, [r0, #24]
 8006c6c:	b90b      	cbnz	r3, 8006c72 <_fflush_r+0x1a>
 8006c6e:	f7fe ff89 	bl	8005b84 <__sinit>
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <_fflush_r+0x6c>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	d11b      	bne.n	8006cb0 <_fflush_r+0x58>
 8006c78:	686c      	ldr	r4, [r5, #4]
 8006c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0ef      	beq.n	8006c62 <_fflush_r+0xa>
 8006c82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c84:	07d0      	lsls	r0, r2, #31
 8006c86:	d404      	bmi.n	8006c92 <_fflush_r+0x3a>
 8006c88:	0599      	lsls	r1, r3, #22
 8006c8a:	d402      	bmi.n	8006c92 <_fflush_r+0x3a>
 8006c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c8e:	f7ff f81c 	bl	8005cca <__retarget_lock_acquire_recursive>
 8006c92:	4628      	mov	r0, r5
 8006c94:	4621      	mov	r1, r4
 8006c96:	f7ff ff59 	bl	8006b4c <__sflush_r>
 8006c9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c9c:	07da      	lsls	r2, r3, #31
 8006c9e:	4605      	mov	r5, r0
 8006ca0:	d4e0      	bmi.n	8006c64 <_fflush_r+0xc>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	059b      	lsls	r3, r3, #22
 8006ca6:	d4dd      	bmi.n	8006c64 <_fflush_r+0xc>
 8006ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006caa:	f7ff f80f 	bl	8005ccc <__retarget_lock_release_recursive>
 8006cae:	e7d9      	b.n	8006c64 <_fflush_r+0xc>
 8006cb0:	4b05      	ldr	r3, [pc, #20]	; (8006cc8 <_fflush_r+0x70>)
 8006cb2:	429c      	cmp	r4, r3
 8006cb4:	d101      	bne.n	8006cba <_fflush_r+0x62>
 8006cb6:	68ac      	ldr	r4, [r5, #8]
 8006cb8:	e7df      	b.n	8006c7a <_fflush_r+0x22>
 8006cba:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <_fflush_r+0x74>)
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	bf08      	it	eq
 8006cc0:	68ec      	ldreq	r4, [r5, #12]
 8006cc2:	e7da      	b.n	8006c7a <_fflush_r+0x22>
 8006cc4:	080070c4 	.word	0x080070c4
 8006cc8:	080070e4 	.word	0x080070e4
 8006ccc:	080070a4 	.word	0x080070a4

08006cd0 <fiprintf>:
 8006cd0:	b40e      	push	{r1, r2, r3}
 8006cd2:	b503      	push	{r0, r1, lr}
 8006cd4:	4601      	mov	r1, r0
 8006cd6:	ab03      	add	r3, sp, #12
 8006cd8:	4805      	ldr	r0, [pc, #20]	; (8006cf0 <fiprintf+0x20>)
 8006cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cde:	6800      	ldr	r0, [r0, #0]
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	f7ff fcaf 	bl	8006644 <_vfiprintf_r>
 8006ce6:	b002      	add	sp, #8
 8006ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cec:	b003      	add	sp, #12
 8006cee:	4770      	bx	lr
 8006cf0:	20000004 	.word	0x20000004

08006cf4 <_lseek_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d07      	ldr	r5, [pc, #28]	; (8006d14 <_lseek_r+0x20>)
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4608      	mov	r0, r1
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	602a      	str	r2, [r5, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	f7fb fca7 	bl	8002656 <_lseek>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_lseek_r+0x1e>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_lseek_r+0x1e>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	2000020c 	.word	0x2000020c

08006d18 <__swhatbuf_r>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	460e      	mov	r6, r1
 8006d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d20:	2900      	cmp	r1, #0
 8006d22:	b096      	sub	sp, #88	; 0x58
 8006d24:	4614      	mov	r4, r2
 8006d26:	461d      	mov	r5, r3
 8006d28:	da08      	bge.n	8006d3c <__swhatbuf_r+0x24>
 8006d2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	602a      	str	r2, [r5, #0]
 8006d32:	061a      	lsls	r2, r3, #24
 8006d34:	d410      	bmi.n	8006d58 <__swhatbuf_r+0x40>
 8006d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d3a:	e00e      	b.n	8006d5a <__swhatbuf_r+0x42>
 8006d3c:	466a      	mov	r2, sp
 8006d3e:	f000 f895 	bl	8006e6c <_fstat_r>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	dbf1      	blt.n	8006d2a <__swhatbuf_r+0x12>
 8006d46:	9a01      	ldr	r2, [sp, #4]
 8006d48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d50:	425a      	negs	r2, r3
 8006d52:	415a      	adcs	r2, r3
 8006d54:	602a      	str	r2, [r5, #0]
 8006d56:	e7ee      	b.n	8006d36 <__swhatbuf_r+0x1e>
 8006d58:	2340      	movs	r3, #64	; 0x40
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	b016      	add	sp, #88	; 0x58
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d64 <__smakebuf_r>:
 8006d64:	898b      	ldrh	r3, [r1, #12]
 8006d66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d68:	079d      	lsls	r5, r3, #30
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460c      	mov	r4, r1
 8006d6e:	d507      	bpl.n	8006d80 <__smakebuf_r+0x1c>
 8006d70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	6123      	str	r3, [r4, #16]
 8006d78:	2301      	movs	r3, #1
 8006d7a:	6163      	str	r3, [r4, #20]
 8006d7c:	b002      	add	sp, #8
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
 8006d80:	ab01      	add	r3, sp, #4
 8006d82:	466a      	mov	r2, sp
 8006d84:	f7ff ffc8 	bl	8006d18 <__swhatbuf_r>
 8006d88:	9900      	ldr	r1, [sp, #0]
 8006d8a:	4605      	mov	r5, r0
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	f7ff fbbb 	bl	8006508 <_malloc_r>
 8006d92:	b948      	cbnz	r0, 8006da8 <__smakebuf_r+0x44>
 8006d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d98:	059a      	lsls	r2, r3, #22
 8006d9a:	d4ef      	bmi.n	8006d7c <__smakebuf_r+0x18>
 8006d9c:	f023 0303 	bic.w	r3, r3, #3
 8006da0:	f043 0302 	orr.w	r3, r3, #2
 8006da4:	81a3      	strh	r3, [r4, #12]
 8006da6:	e7e3      	b.n	8006d70 <__smakebuf_r+0xc>
 8006da8:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <__smakebuf_r+0x7c>)
 8006daa:	62b3      	str	r3, [r6, #40]	; 0x28
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	6020      	str	r0, [r4, #0]
 8006db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006db4:	81a3      	strh	r3, [r4, #12]
 8006db6:	9b00      	ldr	r3, [sp, #0]
 8006db8:	6163      	str	r3, [r4, #20]
 8006dba:	9b01      	ldr	r3, [sp, #4]
 8006dbc:	6120      	str	r0, [r4, #16]
 8006dbe:	b15b      	cbz	r3, 8006dd8 <__smakebuf_r+0x74>
 8006dc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	f000 f863 	bl	8006e90 <_isatty_r>
 8006dca:	b128      	cbz	r0, 8006dd8 <__smakebuf_r+0x74>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	f043 0301 	orr.w	r3, r3, #1
 8006dd6:	81a3      	strh	r3, [r4, #12]
 8006dd8:	89a0      	ldrh	r0, [r4, #12]
 8006dda:	4305      	orrs	r5, r0
 8006ddc:	81a5      	strh	r5, [r4, #12]
 8006dde:	e7cd      	b.n	8006d7c <__smakebuf_r+0x18>
 8006de0:	08005b1d 	.word	0x08005b1d

08006de4 <__ascii_mbtowc>:
 8006de4:	b082      	sub	sp, #8
 8006de6:	b901      	cbnz	r1, 8006dea <__ascii_mbtowc+0x6>
 8006de8:	a901      	add	r1, sp, #4
 8006dea:	b142      	cbz	r2, 8006dfe <__ascii_mbtowc+0x1a>
 8006dec:	b14b      	cbz	r3, 8006e02 <__ascii_mbtowc+0x1e>
 8006dee:	7813      	ldrb	r3, [r2, #0]
 8006df0:	600b      	str	r3, [r1, #0]
 8006df2:	7812      	ldrb	r2, [r2, #0]
 8006df4:	1e10      	subs	r0, r2, #0
 8006df6:	bf18      	it	ne
 8006df8:	2001      	movne	r0, #1
 8006dfa:	b002      	add	sp, #8
 8006dfc:	4770      	bx	lr
 8006dfe:	4610      	mov	r0, r2
 8006e00:	e7fb      	b.n	8006dfa <__ascii_mbtowc+0x16>
 8006e02:	f06f 0001 	mvn.w	r0, #1
 8006e06:	e7f8      	b.n	8006dfa <__ascii_mbtowc+0x16>

08006e08 <__malloc_lock>:
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <__malloc_lock+0x8>)
 8006e0a:	f7fe bf5e 	b.w	8005cca <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20000200 	.word	0x20000200

08006e14 <__malloc_unlock>:
 8006e14:	4801      	ldr	r0, [pc, #4]	; (8006e1c <__malloc_unlock+0x8>)
 8006e16:	f7fe bf59 	b.w	8005ccc <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20000200 	.word	0x20000200

08006e20 <_read_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	; (8006e40 <_read_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fb fbb1 	bl	8002596 <_read>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_read_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_read_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	2000020c 	.word	0x2000020c

08006e44 <__ascii_wctomb>:
 8006e44:	b149      	cbz	r1, 8006e5a <__ascii_wctomb+0x16>
 8006e46:	2aff      	cmp	r2, #255	; 0xff
 8006e48:	bf85      	ittet	hi
 8006e4a:	238a      	movhi	r3, #138	; 0x8a
 8006e4c:	6003      	strhi	r3, [r0, #0]
 8006e4e:	700a      	strbls	r2, [r1, #0]
 8006e50:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e54:	bf98      	it	ls
 8006e56:	2001      	movls	r0, #1
 8006e58:	4770      	bx	lr
 8006e5a:	4608      	mov	r0, r1
 8006e5c:	4770      	bx	lr

08006e5e <abort>:
 8006e5e:	b508      	push	{r3, lr}
 8006e60:	2006      	movs	r0, #6
 8006e62:	f000 f84d 	bl	8006f00 <raise>
 8006e66:	2001      	movs	r0, #1
 8006e68:	f7fb fb8b 	bl	8002582 <_exit>

08006e6c <_fstat_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d07      	ldr	r5, [pc, #28]	; (8006e8c <_fstat_r+0x20>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	4611      	mov	r1, r2
 8006e78:	602b      	str	r3, [r5, #0]
 8006e7a:	f7fb fbd1 	bl	8002620 <_fstat>
 8006e7e:	1c43      	adds	r3, r0, #1
 8006e80:	d102      	bne.n	8006e88 <_fstat_r+0x1c>
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	b103      	cbz	r3, 8006e88 <_fstat_r+0x1c>
 8006e86:	6023      	str	r3, [r4, #0]
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	bf00      	nop
 8006e8c:	2000020c 	.word	0x2000020c

08006e90 <_isatty_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4d06      	ldr	r5, [pc, #24]	; (8006eac <_isatty_r+0x1c>)
 8006e94:	2300      	movs	r3, #0
 8006e96:	4604      	mov	r4, r0
 8006e98:	4608      	mov	r0, r1
 8006e9a:	602b      	str	r3, [r5, #0]
 8006e9c:	f7fb fbd0 	bl	8002640 <_isatty>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_isatty_r+0x1a>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_isatty_r+0x1a>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	2000020c 	.word	0x2000020c

08006eb0 <_raise_r>:
 8006eb0:	291f      	cmp	r1, #31
 8006eb2:	b538      	push	{r3, r4, r5, lr}
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	d904      	bls.n	8006ec4 <_raise_r+0x14>
 8006eba:	2316      	movs	r3, #22
 8006ebc:	6003      	str	r3, [r0, #0]
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ec6:	b112      	cbz	r2, 8006ece <_raise_r+0x1e>
 8006ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ecc:	b94b      	cbnz	r3, 8006ee2 <_raise_r+0x32>
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 f830 	bl	8006f34 <_getpid_r>
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4620      	mov	r0, r4
 8006eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ede:	f000 b817 	b.w	8006f10 <_kill_r>
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d00a      	beq.n	8006efc <_raise_r+0x4c>
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	d103      	bne.n	8006ef2 <_raise_r+0x42>
 8006eea:	2316      	movs	r3, #22
 8006eec:	6003      	str	r3, [r0, #0]
 8006eee:	2001      	movs	r0, #1
 8006ef0:	e7e7      	b.n	8006ec2 <_raise_r+0x12>
 8006ef2:	2400      	movs	r4, #0
 8006ef4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ef8:	4628      	mov	r0, r5
 8006efa:	4798      	blx	r3
 8006efc:	2000      	movs	r0, #0
 8006efe:	e7e0      	b.n	8006ec2 <_raise_r+0x12>

08006f00 <raise>:
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <raise+0xc>)
 8006f02:	4601      	mov	r1, r0
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	f7ff bfd3 	b.w	8006eb0 <_raise_r>
 8006f0a:	bf00      	nop
 8006f0c:	20000004 	.word	0x20000004

08006f10 <_kill_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4d07      	ldr	r5, [pc, #28]	; (8006f30 <_kill_r+0x20>)
 8006f14:	2300      	movs	r3, #0
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	f7fb fb20 	bl	8002562 <_kill>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d102      	bne.n	8006f2c <_kill_r+0x1c>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b103      	cbz	r3, 8006f2c <_kill_r+0x1c>
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000020c 	.word	0x2000020c

08006f34 <_getpid_r>:
 8006f34:	f7fb bb0d 	b.w	8002552 <_getpid>

08006f38 <_init>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	bf00      	nop
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr

08006f44 <_fini>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr
