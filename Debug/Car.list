
Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003918  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b20  08003b20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b28  08003b28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08003b3c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08003b3c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbdc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8f  00000000  00000000  0002fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a8  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00033950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002206d  00000000  00000000  00034aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012707  00000000  00000000  00056b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d56d7  00000000  00000000  00069214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e8eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e34  00000000  00000000  0013e93c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003ad8 	.word	0x08003ad8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003ad8 	.word	0x08003ad8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	689b      	ldr	r3, [r3, #8]
 8000528:	f003 0302 	and.w	r3, r3, #2
 800052c:	2b02      	cmp	r3, #2
 800052e:	d101      	bne.n	8000534 <LL_SPI_IsActiveFlag_TXE+0x18>
 8000530:	2301      	movs	r3, #1
 8000532:	e000      	b.n	8000536 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	689b      	ldr	r3, [r3, #8]
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	2b80      	cmp	r3, #128	; 0x80
 8000554:	d101      	bne.n	800055a <LL_SPI_IsActiveFlag_BSY+0x18>
 8000556:	2301      	movs	r3, #1
 8000558:	e000      	b.n	800055c <LL_SPI_IsActiveFlag_BSY+0x1a>
 800055a:	2300      	movs	r3, #0
}
 800055c:	4618      	mov	r0, r3
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000578:	4618      	mov	r0, r3
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_SPI_GetTxFIFOLevel>:
  *         @arg @ref LL_SPI_TX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_TX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_TX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetTxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FTLVL));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	330c      	adds	r3, #12
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	460b      	mov	r3, r1
 80005c6:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	330c      	adds	r3, #12
 80005cc:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	78fa      	ldrb	r2, [r7, #3]
 80005d2:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80005d4:	bf00      	nop
 80005d6:	3714      	adds	r7, #20
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	619a      	str	r2, [r3, #24]
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <SPI_Write_8>:
static void SPI_Write_8(uint8_t data);
static uint8_t SPI_Read_8(uint8_t data);


static void SPI_Write_8(uint8_t data)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
	/* wait for empty buffer */
	while (!(LL_SPI_IsActiveFlag_TXE(SPI_HANDLER))){}
 8000622:	bf00      	nop
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <SPI_Write_8+0x5c>)
 8000626:	f7ff ff79 	bl	800051c <LL_SPI_IsActiveFlag_TXE>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f9      	beq.n	8000624 <SPI_Write_8+0xc>
		LL_SPI_TransmitData8(SPI_HANDLER, data);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4619      	mov	r1, r3
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <SPI_Write_8+0x5c>)
 8000636:	f7ff ffc1 	bl	80005bc <LL_SPI_TransmitData8>
	/* wait for TX buffer to clear */
	while (LL_SPI_GetTxFIFOLevel(SPI_HANDLER) != LL_SPI_TX_FIFO_EMPTY){};
 800063a:	bf00      	nop
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <SPI_Write_8+0x5c>)
 800063e:	f7ff ffa1 	bl	8000584 <LL_SPI_GetTxFIFOLevel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f9      	bne.n	800063c <SPI_Write_8+0x24>
	/* check busy flag */
	while (LL_SPI_IsActiveFlag_BSY(SPI_HANDLER) != 0);
 8000648:	bf00      	nop
 800064a:	480a      	ldr	r0, [pc, #40]	; (8000674 <SPI_Write_8+0x5c>)
 800064c:	f7ff ff79 	bl	8000542 <LL_SPI_IsActiveFlag_BSY>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f9      	bne.n	800064a <SPI_Write_8+0x32>
	/* wait for RX buffer to fill */
	while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY)
 8000656:	e002      	b.n	800065e <SPI_Write_8+0x46>
	{
		/* clear received data */
		LL_SPI_ReceiveData8(SPI_HANDLER);
 8000658:	4806      	ldr	r0, [pc, #24]	; (8000674 <SPI_Write_8+0x5c>)
 800065a:	f7ff ffa1 	bl	80005a0 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <SPI_Write_8+0x5c>)
 8000660:	f7ff ff82 	bl	8000568 <LL_SPI_GetRxFIFOLevel>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d1f6      	bne.n	8000658 <SPI_Write_8+0x40>
	}
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40003c00 	.word	0x40003c00

08000678 <SPI_Read_8>:


static uint8_t SPI_Read_8(uint8_t reg_address)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	73fb      	strb	r3, [r7, #15]
	/* write address of register to read */
	SPI_Write_8(reg_address);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ffc5 	bl	8000618 <SPI_Write_8>
	/* send dummy byte to generate clock signal and read data from register */
	while (!(LL_SPI_IsActiveFlag_TXE(SPI_HANDLER))){}
 800068e:	bf00      	nop
 8000690:	4814      	ldr	r0, [pc, #80]	; (80006e4 <SPI_Read_8+0x6c>)
 8000692:	f7ff ff43 	bl	800051c <LL_SPI_IsActiveFlag_TXE>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0f9      	beq.n	8000690 <SPI_Read_8+0x18>
	LL_SPI_TransmitData8(SPI_HANDLER, 0xFF);
 800069c:	21ff      	movs	r1, #255	; 0xff
 800069e:	4811      	ldr	r0, [pc, #68]	; (80006e4 <SPI_Read_8+0x6c>)
 80006a0:	f7ff ff8c 	bl	80005bc <LL_SPI_TransmitData8>
	while (LL_SPI_GetTxFIFOLevel(SPI_HANDLER) != LL_SPI_TX_FIFO_EMPTY){};
 80006a4:	bf00      	nop
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <SPI_Read_8+0x6c>)
 80006a8:	f7ff ff6c 	bl	8000584 <LL_SPI_GetTxFIFOLevel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f9      	bne.n	80006a6 <SPI_Read_8+0x2e>
		/* check busy flag */
		while (LL_SPI_IsActiveFlag_BSY(SPI_HANDLER) != 0);
 80006b2:	bf00      	nop
 80006b4:	480b      	ldr	r0, [pc, #44]	; (80006e4 <SPI_Read_8+0x6c>)
 80006b6:	f7ff ff44 	bl	8000542 <LL_SPI_IsActiveFlag_BSY>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d1f9      	bne.n	80006b4 <SPI_Read_8+0x3c>
		/* wait for RX buffer to fill */
		while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY)
 80006c0:	e004      	b.n	80006cc <SPI_Read_8+0x54>
		{
			/* clear received data */
			temp = LL_SPI_ReceiveData8(SPI_HANDLER);
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <SPI_Read_8+0x6c>)
 80006c4:	f7ff ff6c 	bl	80005a0 <LL_SPI_ReceiveData8>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73fb      	strb	r3, [r7, #15]
		while (LL_SPI_GetRxFIFOLevel(SPI_HANDLER) != LL_SPI_RX_FIFO_EMPTY)
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <SPI_Read_8+0x6c>)
 80006ce:	f7ff ff4b 	bl	8000568 <LL_SPI_GetRxFIFOLevel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1f4      	bne.n	80006c2 <SPI_Read_8+0x4a>
		}
		return temp;
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
	}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40003c00 	.word	0x40003c00

080006e8 <LoRa_Write>:


void LoRa_Write(uint8_t reg_addr, uint8_t reg_value)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	460a      	mov	r2, r1
 80006f2:	71fb      	strb	r3, [r7, #7]
 80006f4:	4613      	mov	r3, r2
 80006f6:	71bb      	strb	r3, [r7, #6]
	NSS_PIN_LOW
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <LoRa_Write+0x48>)
 80006fe:	f7ff ff7d 	bl	80005fc <LL_GPIO_ResetOutputPin>
	uint8_t write_addr = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	73fb      	strb	r3, [r7, #15]
	write_addr = reg_addr | 0x80;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800070c:	73fb      	strb	r3, [r7, #15]
	SPI_Write_8(write_addr);
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff81 	bl	8000618 <SPI_Write_8>
	SPI_Write_8(reg_value);
 8000716:	79bb      	ldrb	r3, [r7, #6]
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff7d 	bl	8000618 <SPI_Write_8>
	NSS_PIN_HIGH
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	4803      	ldr	r0, [pc, #12]	; (8000730 <LoRa_Write+0x48>)
 8000724:	f7ff ff5c 	bl	80005e0 <LL_GPIO_SetOutputPin>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	48000800 	.word	0x48000800

08000734 <LoRa_Read>:


uint8_t LoRa_Read(uint8_t reg_addr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	73bb      	strb	r3, [r7, #14]
	addr = reg_addr & 0x7F;
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800074c:	73fb      	strb	r3, [r7, #15]
	NSS_PIN_LOW
 800074e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <LoRa_Read+0x44>)
 8000754:	f7ff ff52 	bl	80005fc <LL_GPIO_ResetOutputPin>
	temp = SPI_Read_8(addr);
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff8c 	bl	8000678 <SPI_Read_8>
 8000760:	4603      	mov	r3, r0
 8000762:	73bb      	strb	r3, [r7, #14]
	NSS_PIN_HIGH
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <LoRa_Read+0x44>)
 800076a:	f7ff ff39 	bl	80005e0 <LL_GPIO_SetOutputPin>
	return temp;
 800076e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	48000800 	.word	0x48000800

0800077c <LoRa_Mode>:


void LoRa_Mode(e_mode mode)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]

	/* mask 0xf8 */

	uint8_t read_value = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	73fb      	strb	r3, [r7, #15]
	read_value = LoRa_Read(ADDR_RegOpMode);
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ffd2 	bl	8000734 <LoRa_Read>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]
	read_value = read_value & 0xf8; /* set bit that you want to change to 0 */
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	f023 0307 	bic.w	r3, r3, #7
 800079a:	73fb      	strb	r3, [r7, #15]
	read_value = read_value | mode; /* add bits you want */
 800079c:	7bfa      	ldrb	r2, [r7, #15]
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	73fb      	strb	r3, [r7, #15]
	LoRa_Write(ADDR_RegOpMode, read_value);
 80007a4:	7bfb      	ldrb	r3, [r7, #15]
 80007a6:	4619      	mov	r1, r3
 80007a8:	2001      	movs	r0, #1
 80007aa:	f7ff ff9d 	bl	80006e8 <LoRa_Write>
}
 80007ae:	bf00      	nop
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <lora_set_bandwidth>:

void lora_set_bandwidth(e_bandwidth bandwidth)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b084      	sub	sp, #16
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4603      	mov	r3, r0
 80007be:	71fb      	strb	r3, [r7, #7]
	uint8_t read_value = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	73fb      	strb	r3, [r7, #15]
	read_value = LoRa_Read(ADDR_RegModemConfig1);
 80007c4:	201d      	movs	r0, #29
 80007c6:	f7ff ffb5 	bl	8000734 <LoRa_Read>
 80007ca:	4603      	mov	r3, r0
 80007cc:	73fb      	strb	r3, [r7, #15]
	read_value = read_value & 0x0f;
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f003 030f 	and.w	r3, r3, #15
 80007d4:	73fb      	strb	r3, [r7, #15]
	read_value = read_value | bandwidth<<4;
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	b25a      	sxtb	r2, r3
 80007dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	b25b      	sxtb	r3, r3
 80007e4:	73fb      	strb	r3, [r7, #15]
	LoRa_Write(ADDR_RegModemConfig1, read_value);
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4619      	mov	r1, r3
 80007ea:	201d      	movs	r0, #29
 80007ec:	f7ff ff7c 	bl	80006e8 <LoRa_Write>
}
 80007f0:	bf00      	nop
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <lora_set_spreading_factor>:
	read_value = read_value | coding_rate<<1;
	LoRa_Write(ADDR_RegModemConfig1, read_value);
}

void lora_set_spreading_factor(e_spreading_factor SF)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	uint8_t read_value = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	73fb      	strb	r3, [r7, #15]
	read_value = LoRa_Read(ADDR_RegModemConfig2);
 8000806:	201e      	movs	r0, #30
 8000808:	f7ff ff94 	bl	8000734 <LoRa_Read>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]
	read_value = read_value & 0x0f;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	73fb      	strb	r3, [r7, #15]
	read_value = read_value | SF<<4;
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	b25a      	sxtb	r2, r3
 800081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000822:	4313      	orrs	r3, r2
 8000824:	b25b      	sxtb	r3, r3
 8000826:	73fb      	strb	r3, [r7, #15]
	LoRa_Write(ADDR_RegModemConfig2, read_value);
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	4619      	mov	r1, r3
 800082c:	201e      	movs	r0, #30
 800082e:	f7ff ff5b 	bl	80006e8 <LoRa_Write>
}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <LoRa_Init>:
	return recieve_data;
}


void LoRa_Init()
{
 800083a:	b580      	push	{r7, lr}
 800083c:	af00      	add	r7, sp, #0
	 * Preamble length =
	 *
	 *
	 *
	 */
	LoRa_Mode(SLEEP);
 800083e:	2000      	movs	r0, #0
 8000840:	f7ff ff9c 	bl	800077c <LoRa_Mode>
	/* SET LORA MODE */
	LoRa_Write(ADDR_RegOpMode, 0x88);
 8000844:	2188      	movs	r1, #136	; 0x88
 8000846:	2001      	movs	r0, #1
 8000848:	f7ff ff4e 	bl	80006e8 <LoRa_Write>
	/* Interrupt mapping */
	LoRa_Write(ADDR_RegDioMapping1, 0x40);
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	2040      	movs	r0, #64	; 0x40
 8000850:	f7ff ff4a 	bl	80006e8 <LoRa_Write>
	lora_set_bandwidth(khz_125);
 8000854:	2007      	movs	r0, #7
 8000856:	f7ff ffae 	bl	80007b6 <lora_set_bandwidth>
	lora_set_spreading_factor(SF_12);
 800085a:	200c      	movs	r0, #12
 800085c:	f7ff ffcc 	bl	80007f8 <lora_set_spreading_factor>
	/* SET CRC enable */
	LoRa_Write(ADDR_RegModemConfig2, 0xC4);
 8000860:	21c4      	movs	r1, #196	; 0xc4
 8000862:	201e      	movs	r0, #30
 8000864:	f7ff ff40 	bl	80006e8 <LoRa_Write>
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4907      	ldr	r1, [pc, #28]	; (80008c0 <__NVIC_EnableIRQ+0x38>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800098a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800098c:	4907      	ldr	r1, [pc, #28]	; (80009ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4313      	orrs	r3, r2
 8000992:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4013      	ands	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr
 80009ac:	40021000 	.word	0x40021000

080009b0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80009ba:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <LL_SYSCFG_SetEXTISource+0x6c>)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	f003 0303 	and.w	r3, r3, #3
 80009c2:	3302      	adds	r3, #2
 80009c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	0c1b      	lsrs	r3, r3, #16
 80009cc:	43db      	mvns	r3, r3
 80009ce:	ea02 0103 	and.w	r1, r2, r3
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	0c1b      	lsrs	r3, r3, #16
 80009d6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	fa93 f3a3 	rbit	r3, r3
 80009de:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80009ea:	2320      	movs	r3, #32
 80009ec:	e003      	b.n	80009f6 <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	fab3 f383 	clz	r3, r3
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f003 031f 	and.w	r3, r3, #31
 80009fa:	687a      	ldr	r2, [r7, #4]
 80009fc:	409a      	lsls	r2, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <LL_SYSCFG_SetEXTISource+0x6c>)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	430a      	orrs	r2, r1
 8000a08:	3302      	adds	r3, #2
 8000a0a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a0e:	bf00      	nop
 8000a10:	371c      	adds	r7, #28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40010000 	.word	0x40010000

08000a20 <LL_GPIO_SetPinMode>:
{
 8000a20:	b480      	push	{r7}
 8000a22:	b08b      	sub	sp, #44	; 0x2c
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa93 f3a3 	rbit	r3, r3
 8000a3a:	613b      	str	r3, [r7, #16]
  return result;
 8000a3c:	693b      	ldr	r3, [r7, #16]
 8000a3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d101      	bne.n	8000a4a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000a46:	2320      	movs	r3, #32
 8000a48:	e003      	b.n	8000a52 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	fab3 f383 	clz	r3, r3
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	2103      	movs	r1, #3
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	401a      	ands	r2, r3
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	fa93 f3a3 	rbit	r3, r3
 8000a68:	61fb      	str	r3, [r7, #28]
  return result;
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000a74:	2320      	movs	r3, #32
 8000a76:	e003      	b.n	8000a80 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7a:	fab3 f383 	clz	r3, r3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	fa01 f303 	lsl.w	r3, r1, r3
 8000a88:	431a      	orrs	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	601a      	str	r2, [r3, #0]
}
 8000a8e:	bf00      	nop
 8000a90:	372c      	adds	r7, #44	; 0x2c
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_GPIO_SetPinPull>:
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b08b      	sub	sp, #44	; 0x2c
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa93 f3a3 	rbit	r3, r3
 8000ab4:	613b      	str	r3, [r7, #16]
  return result;
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000ac0:	2320      	movs	r3, #32
 8000ac2:	e003      	b.n	8000acc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	fab3 f383 	clz	r3, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	2103      	movs	r1, #3
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000adc:	6a3b      	ldr	r3, [r7, #32]
 8000ade:	fa93 f3a3 	rbit	r3, r3
 8000ae2:	61fb      	str	r3, [r7, #28]
  return result;
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d101      	bne.n	8000af2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000aee:	2320      	movs	r3, #32
 8000af0:	e003      	b.n	8000afa <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af4:	fab3 f383 	clz	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	6879      	ldr	r1, [r7, #4]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	431a      	orrs	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	60da      	str	r2, [r3, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	372c      	adds	r7, #44	; 0x2c
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <LL_GPIO_SetOutputPin>:
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	619a      	str	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <LL_GPIO_ResetOutputPin>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000b6e:	2004      	movs	r0, #4
 8000b70:	f7ff ff06 	bl	8000980 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8000b74:	2020      	movs	r0, #32
 8000b76:	f7ff ff03 	bl	8000980 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff ff00 	bl	8000980 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f7ff fefd 	bl	8000980 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000b86:	2120      	movs	r1, #32
 8000b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8c:	f7ff ffd0 	bl	8000b30 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(NSS_GPIO_Port, NSS_Pin);
 8000b90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b94:	4842      	ldr	r0, [pc, #264]	; (8000ca0 <MX_GPIO_Init+0x154>)
 8000b96:	f7ff ffbd 	bl	8000b14 <LL_GPIO_SetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000b9a:	4942      	ldr	r1, [pc, #264]	; (8000ca4 <MX_GPIO_Init+0x158>)
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f7ff ff07 	bl	80009b0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE6);
 8000ba2:	4941      	ldr	r1, [pc, #260]	; (8000ca8 <MX_GPIO_Init+0x15c>)
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff ff03 	bl	80009b0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bae:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 f9b8 	bl	8002f3c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 f9a8 	bl	8002f3c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf2:	482b      	ldr	r0, [pc, #172]	; (8000ca0 <MX_GPIO_Init+0x154>)
 8000bf4:	f7ff ff51 	bl	8000a9a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(TXFLAG_GPIO_Port, TXFLAG_Pin, LL_GPIO_PULL_NO);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	4828      	ldr	r0, [pc, #160]	; (8000ca0 <MX_GPIO_Init+0x154>)
 8000bfe:	f7ff ff4c 	bl	8000a9a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000c02:	2200      	movs	r2, #0
 8000c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c08:	4825      	ldr	r0, [pc, #148]	; (8000ca0 <MX_GPIO_Init+0x154>)
 8000c0a:	f7ff ff09 	bl	8000a20 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(TXFLAG_GPIO_Port, TXFLAG_Pin, LL_GPIO_MODE_INPUT);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2140      	movs	r1, #64	; 0x40
 8000c12:	4823      	ldr	r0, [pc, #140]	; (8000ca0 <MX_GPIO_Init+0x154>)
 8000c14:	f7ff ff04 	bl	8000a20 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c34:	f002 fbc6 	bl	80033c4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = NSS_Pin;
 8000c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4619      	mov	r1, r3
 8000c52:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <MX_GPIO_Init+0x154>)
 8000c54:	f002 fbb6 	bl	80033c4 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c58:	f7ff fe08 	bl	800086c <__NVIC_GetPriorityGrouping>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fe58 	bl	8000918 <NVIC_EncodePriority>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	2017      	movs	r0, #23
 8000c6e:	f7ff fe29 	bl	80008c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c72:	2017      	movs	r0, #23
 8000c74:	f7ff fe08 	bl	8000888 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c78:	f7ff fdf8 	bl	800086c <__NVIC_GetPriorityGrouping>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fe48 	bl	8000918 <NVIC_EncodePriority>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	2028      	movs	r0, #40	; 0x28
 8000c8e:	f7ff fe19 	bl	80008c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c92:	2028      	movs	r0, #40	; 0x28
 8000c94:	f7ff fdf8 	bl	8000888 <__NVIC_EnableIRQ>

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	48000800 	.word	0x48000800
 8000ca4:	00f00003 	.word	0x00f00003
 8000ca8:	0f000001 	.word	0x0f000001

08000cac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <LL_RCC_HSI_Enable+0x1c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <LL_RCC_HSI_Enable+0x1c>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <LL_RCC_HSI_IsReady+0x24>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cdc:	d101      	bne.n	8000ce2 <LL_RCC_HSI_IsReady+0x16>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <LL_RCC_HSI_IsReady+0x18>
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	061b      	lsls	r3, r3, #24
 8000d08:	4904      	ldr	r1, [pc, #16]	; (8000d1c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	604b      	str	r3, [r1, #4]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	40021000 	.word	0x40021000

08000d20 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <LL_RCC_SetSysClkSource+0x24>)
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f023 0203 	bic.w	r2, r3, #3
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <LL_RCC_SetSysClkSource+0x24>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	608b      	str	r3, [r1, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40021000 	.word	0x40021000

08000d48 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <LL_RCC_GetSysClkSource+0x18>)
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 030c 	and.w	r3, r3, #12
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40021000 	.word	0x40021000

08000d64 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d74:	4904      	ldr	r1, [pc, #16]	; (8000d88 <LL_RCC_SetAHBPrescaler+0x24>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000

08000d8c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000d9c:	4904      	ldr	r1, [pc, #16]	; (8000db0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	608b      	str	r3, [r1, #8]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	40021000 	.word	0x40021000

08000db4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000dc4:	4904      	ldr	r1, [pc, #16]	; (8000dd8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	608b      	str	r3, [r1, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	40021000 	.word	0x40021000

08000ddc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <LL_RCC_PLL_Enable+0x1c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <LL_RCC_PLL_Enable+0x1c>)
 8000de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	40021000 	.word	0x40021000

08000dfc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <LL_RCC_PLL_IsReady+0x24>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e0c:	d101      	bne.n	8000e12 <LL_RCC_PLL_IsReady+0x16>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <LL_RCC_PLL_IsReady+0x18>
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40021000 	.word	0x40021000

08000e24 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	68f9      	ldr	r1, [r7, #12]
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	4311      	orrs	r1, r2
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	0212      	lsls	r2, r2, #8
 8000e44:	4311      	orrs	r1, r2
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	4904      	ldr	r1, [pc, #16]	; (8000e5c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	f9ff800c 	.word	0xf9ff800c

08000e64 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000

08000e84 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <LL_FLASH_SetLatency+0x24>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f023 020f 	bic.w	r2, r3, #15
 8000e94:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <LL_FLASH_SetLatency+0x24>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40022000 	.word	0x40022000

08000eac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000eb0:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <LL_FLASH_GetLatency+0x18>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 030f 	and.w	r3, r3, #15
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000ed8:	4904      	ldr	r1, [pc, #16]	; (8000eec <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40007000 	.word	0x40007000

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef4:	f000 fc49 	bl	800178a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef8:	f000 f80c 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efc:	f7ff fe26 	bl	8000b4c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f00:	f000 fba0 	bl	8001644 <MX_LPUART1_UART_Init>
  MX_SPI3_Init();
 8000f04:	f000 f8cc 	bl	80010a0 <MX_SPI3_Init>
  MX_TIM2_Init();
 8000f08:	f000 f9ee 	bl	80012e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LoRa_Init();
 8000f0c:	f7ff fc95 	bl	800083a <LoRa_Init>
  /* USER CODE BEGIN WHILE */

  //LL_SPI_Disable(SPI_HANDLER);


  while (1)
 8000f10:	e7fe      	b.n	8000f10 <main+0x20>
	...

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff ffb3 	bl	8000e84 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffc4 	bl	8000eac <LL_FLASH_GetLatency>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d1fa      	bne.n	8000f20 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000f2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f2e:	f7ff ffcb 	bl	8000ec8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000f32:	f7ff febb 	bl	8000cac <LL_RCC_HSI_Enable>
   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000f36:	bf00      	nop
 8000f38:	f7ff fec8 	bl	8000ccc <LL_RCC_HSI_IsReady>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d1fa      	bne.n	8000f38 <SystemClock_Config+0x24>
  {
  }

  LL_RCC_HSI_SetCalibTrimming(64);
 8000f42:	2040      	movs	r0, #64	; 0x40
 8000f44:	f7ff fed6 	bl	8000cf4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 10, LL_RCC_PLLR_DIV_2);
 8000f48:	2300      	movs	r3, #0
 8000f4a:	220a      	movs	r2, #10
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f7ff ff68 	bl	8000e24 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000f54:	f7ff ff86 	bl	8000e64 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000f58:	f7ff ff40 	bl	8000ddc <LL_RCC_PLL_Enable>
   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000f5c:	bf00      	nop
 8000f5e:	f7ff ff4d 	bl	8000dfc <LL_RCC_PLL_IsReady>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d1fa      	bne.n	8000f5e <SystemClock_Config+0x4a>
  {
  }

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f7ff fed9 	bl	8000d20 <LL_RCC_SetSysClkSource>
   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000f6e:	bf00      	nop
 8000f70:	f7ff feea 	bl	8000d48 <LL_RCC_GetSysClkSource>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d1fa      	bne.n	8000f70 <SystemClock_Config+0x5c>
  {
  }

  /* Set AHB prescaler*/
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_2);
 8000f7a:	2080      	movs	r0, #128	; 0x80
 8000f7c:	f7ff fef2 	bl	8000d64 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ff03 	bl	8000d8c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff ff14 	bl	8000db4 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(40000000);
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <SystemClock_Config+0x94>)
 8000f8e:	f002 fd67 	bl	8003a60 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000f92:	2000      	movs	r0, #0
 8000f94:	f000 fc12 	bl	80017bc <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f9e:	f000 f805 	bl	8000fac <Error_Handler>
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	02625a00 	.word	0x02625a00

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <Error_Handler+0x8>
	...

08000fb8 <LL_AHB2_GRP1_EnableClock>:
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000fce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ff2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ff4:	4907      	ldr	r1, [pc, #28]	; (8001014 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ffe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4013      	ands	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001006:	68fb      	ldr	r3, [r7, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000

08001018 <LL_SPI_Enable>:
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <LL_SPI_Disable>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_SPI_SetStandard>:
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f023 0210 	bic.w	r2, r3, #16
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_SPI_DisableNSSPulseMgt>:
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f023 0208 	bic.w	r2, r3, #8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	605a      	str	r2, [r3, #4]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
	...

080010a0 <MX_SPI3_Init>:

/* USER CODE END 0 */

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */
  LL_SPI_Disable(SPI3);
 80010a6:	483d      	ldr	r0, [pc, #244]	; (800119c <MX_SPI3_Init+0xfc>)
 80010a8:	f7ff ffc6 	bl	8001038 <LL_SPI_Disable>

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	2228      	movs	r2, #40	; 0x28
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f002 fd07 	bl	8003ac8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80010ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010ce:	f7ff ff8b 	bl	8000fe8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010d2:	2004      	movs	r0, #4
 80010d4:	f7ff ff70 	bl	8000fb8 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80010d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010dc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010de:	2302      	movs	r3, #2
 80010e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80010ee:	2306      	movs	r3, #6
 80010f0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	463b      	mov	r3, r7
 80010f4:	4619      	mov	r1, r3
 80010f6:	482a      	ldr	r0, [pc, #168]	; (80011a0 <MX_SPI3_Init+0x100>)
 80010f8:	f002 f964 	bl	80033c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80010fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001100:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001102:	2302      	movs	r3, #2
 8001104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001112:	2306      	movs	r3, #6
 8001114:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	463b      	mov	r3, r7
 8001118:	4619      	mov	r1, r3
 800111a:	4821      	ldr	r0, [pc, #132]	; (80011a0 <MX_SPI3_Init+0x100>)
 800111c:	f002 f952 	bl	80033c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001126:	2302      	movs	r3, #2
 8001128:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8001136:	2306      	movs	r3, #6
 8001138:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <MX_SPI3_Init+0x100>)
 8001140:	f002 f940 	bl	80033c4 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001148:	f44f 7382 	mov.w	r3, #260	; 0x104
 800114c:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800114e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001152:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001158:	2300      	movs	r3, #0
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800115c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8001162:	2310      	movs	r3, #16
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800116e:	2307      	movs	r3, #7
 8001170:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4619      	mov	r1, r3
 8001178:	4808      	ldr	r0, [pc, #32]	; (800119c <MX_SPI3_Init+0xfc>)
 800117a:	f002 fc13 	bl	80039a4 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800117e:	2100      	movs	r1, #0
 8001180:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_SPI3_Init+0xfc>)
 8001182:	f7ff ff69 	bl	8001058 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_SPI3_Init+0xfc>)
 8001188:	f7ff ff79 	bl	800107e <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI3_Init 2 */
  LL_SPI_Enable(SPI3);
 800118c:	4803      	ldr	r0, [pc, #12]	; (800119c <MX_SPI3_Init+0xfc>)
 800118e:	f7ff ff43 	bl	8001018 <LL_SPI_Enable>
  /* USER CODE END SPI3_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3740      	adds	r7, #64	; 0x40
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40003c00 	.word	0x40003c00
 80011a0:	48000800 	.word	0x48000800

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_MspInit+0x44>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6613      	str	r3, [r2, #96]	; 0x60
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x44>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6593      	str	r3, [r2, #88]	; 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011da:	f000 fda1 	bl	8001d20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80011f6:	695a      	ldr	r2, [r3, #20]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4013      	ands	r3, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d101      	bne.n	8001206 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40010400 	.word	0x40010400

08001218 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6153      	str	r3, [r2, #20]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	40010400 	.word	0x40010400

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 fad4 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001290:	2040      	movs	r0, #64	; 0x40
 8001292:	f7ff ffab 	bl	80011ec <LL_EXTI_IsActiveFlag_0_31>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 800129c:	2040      	movs	r0, #64	; 0x40
 800129e:	f7ff ffbb 	bl	8001218 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_6 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 80012aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012ae:	f7ff ff9d 	bl	80011ec <LL_EXTI_IsActiveFlag_0_31>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 80012b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012bc:	f7ff ffac 	bl	8001218 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_13 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <SystemInit+0x20>)
 80012ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ce:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <SystemInit+0x20>)
 80012d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08e      	sub	sp, #56	; 0x38
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012fc:	f107 031c 	add.w	r3, r7, #28
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001308:	463b      	mov	r3, r7
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
 8001316:	615a      	str	r2, [r3, #20]
 8001318:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800131a:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <MX_TIM2_Init+0xfc>)
 800131c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001320:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <MX_TIM2_Init+0xfc>)
 8001324:	2207      	movs	r2, #7
 8001326:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <MX_TIM2_Init+0xfc>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <MX_TIM2_Init+0xfc>)
 8001330:	2263      	movs	r2, #99	; 0x63
 8001332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b2b      	ldr	r3, [pc, #172]	; (80013e4 <MX_TIM2_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800133a:	4b2a      	ldr	r3, [pc, #168]	; (80013e4 <MX_TIM2_Init+0xfc>)
 800133c:	2280      	movs	r2, #128	; 0x80
 800133e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001340:	4828      	ldr	r0, [pc, #160]	; (80013e4 <MX_TIM2_Init+0xfc>)
 8001342:	f000 fcfd 	bl	8001d40 <HAL_TIM_Base_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800134c:	f7ff fe2e 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800135a:	4619      	mov	r1, r3
 800135c:	4821      	ldr	r0, [pc, #132]	; (80013e4 <MX_TIM2_Init+0xfc>)
 800135e:	f000 febb 	bl	80020d8 <HAL_TIM_ConfigClockSource>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001368:	f7ff fe20 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800136c:	481d      	ldr	r0, [pc, #116]	; (80013e4 <MX_TIM2_Init+0xfc>)
 800136e:	f000 fd3e 	bl	8001dee <HAL_TIM_PWM_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001378:	f7ff fe18 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4816      	ldr	r0, [pc, #88]	; (80013e4 <MX_TIM2_Init+0xfc>)
 800138c:	f001 fc18 	bl	8002bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001396:	f7ff fe09 	bl	8000fac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139a:	2360      	movs	r3, #96	; 0x60
 800139c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_TIM2_Init+0xfc>)
 80013b2:	f000 fd7d 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013bc:	f7ff fdf6 	bl	8000fac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	2204      	movs	r2, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM2_Init+0xfc>)
 80013c8:	f000 fd72 	bl	8001eb0 <HAL_TIM_PWM_ConfigChannel>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80013d2:	f7ff fdeb 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM2_Init+0xfc>)
 80013d8:	f000 f824 	bl	8001424 <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3738      	adds	r7, #56	; 0x38
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000028 	.word	0x20000028

080013e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013f8:	d10b      	bne.n	8001412 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_TIM_Base_MspInit+0x38>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_TIM_Base_MspInit+0x38>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6593      	str	r3, [r2, #88]	; 0x58
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_TIM_Base_MspInit+0x38>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001444:	d11c      	bne.n	8001480 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_TIM_MspPostInit+0x64>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_TIM_MspPostInit+0x64>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_TIM_MspPostInit+0x64>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800145e:	2303      	movs	r3, #3
 8001460:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800146e:	2301      	movs	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147c:	f000 face 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	3720      	adds	r7, #32
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40021000 	.word	0x40021000

0800148c <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f043 0201 	orr.w	r2, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	601a      	str	r2, [r3, #0]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	601a      	str	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3308      	adds	r3, #8
 80014da:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	e853 3f00 	ldrex	r3, [r3]
 80014e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	075b      	lsls	r3, r3, #29
 80014ee:	4313      	orrs	r3, r2
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3308      	adds	r3, #8
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	61ba      	str	r2, [r7, #24]
 80014fa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014fc:	6979      	ldr	r1, [r7, #20]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	e841 2300 	strex	r3, r2, [r1]
 8001504:	613b      	str	r3, [r7, #16]
   return(result);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1e4      	bne.n	80014d6 <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3724      	adds	r7, #36	; 0x24
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 800151a:	b480      	push	{r7}
 800151c:	b089      	sub	sp, #36	; 0x24
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3308      	adds	r3, #8
 8001528:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	e853 3f00 	ldrex	r3, [r3]
 8001530:	60bb      	str	r3, [r7, #8]
   return(result);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	065b      	lsls	r3, r3, #25
 800153c:	4313      	orrs	r3, r2
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3308      	adds	r3, #8
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	61ba      	str	r2, [r7, #24]
 8001548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800154a:	6979      	ldr	r1, [r7, #20]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	e841 2300 	strex	r3, r2, [r1]
 8001552:	613b      	str	r3, [r7, #16]
   return(result);
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e4      	bne.n	8001524 <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 800155a:	bf00      	nop
 800155c:	bf00      	nop
 800155e:	3724      	adds	r7, #36	; 0x24
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800157c:	d101      	bne.n	8001582 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015a4:	d101      	bne.n	80015aa <LL_LPUART_IsActiveFlag_REACK+0x1a>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <LL_LPUART_IsActiveFlag_REACK+0x1c>
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_SetLPUARTClockSource>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80015c0:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <LL_RCC_SetLPUARTClockSource+0x28>)
 80015c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80015ca:	4905      	ldr	r1, [pc, #20]	; (80015e0 <LL_RCC_SetLPUARTClockSource+0x28>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <LL_AHB2_GRP1_EnableClock>:
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4013      	ands	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	40021000 	.word	0x40021000

08001614 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800161c:	4b08      	ldr	r3, [pc, #32]	; (8001640 <LL_APB1_GRP2_EnableClock+0x2c>)
 800161e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001620:	4907      	ldr	r1, [pc, #28]	; (8001640 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001628:	4b05      	ldr	r3, [pc, #20]	; (8001640 <LL_APB1_GRP2_EnableClock+0x2c>)
 800162a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4013      	ands	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001632:	68fb      	ldr	r3, [r7, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40021000 	.word	0x40021000

08001644 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08e      	sub	sp, #56	; 0x38
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]

  LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 800166e:	2000      	movs	r0, #0
 8001670:	f7ff ffa2 	bl	80015b8 <LL_RCC_SetLPUARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff ffcd 	bl	8001614 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff ffb2 	bl	80015e4 <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin;
 8001680:	2304      	movs	r3, #4
 8001682:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001684:	2302      	movs	r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8001694:	230c      	movs	r3, #12
 8001696:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LPUART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f001 fe90 	bl	80033c4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80016a4:	2308      	movs	r3, #8
 80016a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016a8:	2302      	movs	r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 80016b8:	230c      	movs	r3, #12
 80016ba:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f001 fe7e 	bl	80033c4 <LL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  LPUART_InitStruct.BaudRate = 115200;
 80016cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016d0:	623b      	str	r3, [r7, #32]
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 80016d2:	2300      	movs	r3, #0
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 80016de:	230c      	movs	r3, #12
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 80016e6:	f107 031c 	add.w	r3, r7, #28
 80016ea:	4619      	mov	r1, r3
 80016ec:	4811      	ldr	r0, [pc, #68]	; (8001734 <MX_LPUART1_UART_Init+0xf0>)
 80016ee:	f001 ff71 	bl	80035d4 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80016f2:	2100      	movs	r1, #0
 80016f4:	480f      	ldr	r0, [pc, #60]	; (8001734 <MX_LPUART1_UART_Init+0xf0>)
 80016f6:	f7ff fee9 	bl	80014cc <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 80016fa:	2100      	movs	r1, #0
 80016fc:	480d      	ldr	r0, [pc, #52]	; (8001734 <MX_LPUART1_UART_Init+0xf0>)
 80016fe:	f7ff ff0c 	bl	800151a <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8001702:	480c      	ldr	r0, [pc, #48]	; (8001734 <MX_LPUART1_UART_Init+0xf0>)
 8001704:	f7ff fed2 	bl	80014ac <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 8001708:	480a      	ldr	r0, [pc, #40]	; (8001734 <MX_LPUART1_UART_Init+0xf0>)
 800170a:	f7ff febf 	bl	800148c <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 800170e:	bf00      	nop
 8001710:	4808      	ldr	r0, [pc, #32]	; (8001734 <MX_LPUART1_UART_Init+0xf0>)
 8001712:	f7ff ff29 	bl	8001568 <LL_LPUART_IsActiveFlag_TEACK>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f9      	beq.n	8001710 <MX_LPUART1_UART_Init+0xcc>
 800171c:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_LPUART1_UART_Init+0xf0>)
 800171e:	f7ff ff37 	bl	8001590 <LL_LPUART_IsActiveFlag_REACK>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f3      	beq.n	8001710 <MX_LPUART1_UART_Init+0xcc>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	3738      	adds	r7, #56	; 0x38
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40008000 	.word	0x40008000

08001738 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800173a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800173c:	f7ff fdc2 	bl	80012c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <LoopForever+0x6>)
  ldr r1, =_edata
 8001742:	490d      	ldr	r1, [pc, #52]	; (8001778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <LoopForever+0xe>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001748:	e002      	b.n	8001750 <LoopCopyDataInit>

0800174a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800174c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174e:	3304      	adds	r3, #4

08001750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001754:	d3f9      	bcc.n	800174a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001758:	4c0a      	ldr	r4, [pc, #40]	; (8001784 <LoopForever+0x16>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800175c:	e001      	b.n	8001762 <LoopFillZerobss>

0800175e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001760:	3204      	adds	r2, #4

08001762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001764:	d3fb      	bcc.n	800175e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001766:	f002 f98b 	bl	8003a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176a:	f7ff fbc1 	bl	8000ef0 <main>

0800176e <LoopForever>:

LoopForever:
    b LoopForever
 800176e:	e7fe      	b.n	800176e <LoopForever>
  ldr   r0, =_estack
 8001770:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800177c:	08003b30 	.word	0x08003b30
  ldr r2, =_sbss
 8001780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001784:	20000078 	.word	0x20000078

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>

0800178a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 f90f 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f80e 	bl	80017bc <HAL_InitTick>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d002      	beq.n	80017ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	e001      	b.n	80017b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ac:	f7ff fcfa 	bl	80011a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b0:	79fb      	ldrb	r3, [r7, #7]

}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017c8:	4b16      	ldr	r3, [pc, #88]	; (8001824 <HAL_InitTick+0x68>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d022      	beq.n	8001816 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_InitTick+0x6c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_InitTick+0x68>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80017e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f90c 	bl	8001a02 <HAL_SYSTICK_Config>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10f      	bne.n	8001810 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	d809      	bhi.n	800180a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f6:	2200      	movs	r2, #0
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	f04f 30ff 	mov.w	r0, #4294967295
 80017fe:	f000 f8e6 	bl	80019ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_InitTick+0x70>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	e007      	b.n	800181a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e004      	b.n	800181a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e001      	b.n	800181a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000008 	.word	0x20000008
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x1c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_IncTick+0x20>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4413      	add	r3, r2
 800183e:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_IncTick+0x1c>)
 8001840:	6013      	str	r3, [r2, #0]
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	20000074 	.word	0x20000074
 8001850:	20000008 	.word	0x20000008

08001854 <__NVIC_SetPriorityGrouping>:
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001884:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001886:	4a04      	ldr	r2, [pc, #16]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60d3      	str	r3, [r2, #12]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_GetPriorityGrouping>:
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_SetPriority>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff47 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff5e 	bl	800189c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff90 	bl	800190c <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5f 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffb2 	bl	8001974 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a2a:	e15a      	b.n	8001ce2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 814c 	beq.w	8001cdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d017      	beq.n	8001afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a6 	beq.w	8001cdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9c:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba8:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x2e8>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd2:	d01f      	beq.n	8001c14 <HAL_GPIO_Init+0x1f8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2ec>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d019      	beq.n	8001c10 <HAL_GPIO_Init+0x1f4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_Init+0x1f0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x2f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1ec>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2f8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1e8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1e4>
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	e00a      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c00:	2306      	movs	r3, #6
 8001c02:	e008      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c14:	2300      	movs	r3, #0
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c26:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_GPIO_Init+0x2e8>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c58:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c82:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cac:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cd6:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f ae9d 	bne.w	8001a2c <HAL_GPIO_Init+0x10>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000c00 	.word	0x48000c00
 8001d14:	48001000 	.word	0x48001000
 8001d18:	48001400 	.word	0x48001400
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2e:	6093      	str	r3, [r2, #8]
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40007000 	.word	0x40007000

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e049      	b.n	8001de6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fb3e 	bl	80013e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 faae 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e049      	b.n	8001e94 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d106      	bne.n	8001e1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f841 	bl	8001e9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f000 fa57 	bl	80022e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e0ff      	b.n	80020ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b14      	cmp	r3, #20
 8001eda:	f200 80f0 	bhi.w	80020be <HAL_TIM_PWM_ConfigChannel+0x20e>
 8001ede:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee4:	08001f39 	.word	0x08001f39
 8001ee8:	080020bf 	.word	0x080020bf
 8001eec:	080020bf 	.word	0x080020bf
 8001ef0:	080020bf 	.word	0x080020bf
 8001ef4:	08001f79 	.word	0x08001f79
 8001ef8:	080020bf 	.word	0x080020bf
 8001efc:	080020bf 	.word	0x080020bf
 8001f00:	080020bf 	.word	0x080020bf
 8001f04:	08001fbb 	.word	0x08001fbb
 8001f08:	080020bf 	.word	0x080020bf
 8001f0c:	080020bf 	.word	0x080020bf
 8001f10:	080020bf 	.word	0x080020bf
 8001f14:	08001ffb 	.word	0x08001ffb
 8001f18:	080020bf 	.word	0x080020bf
 8001f1c:	080020bf 	.word	0x080020bf
 8001f20:	080020bf 	.word	0x080020bf
 8001f24:	0800203d 	.word	0x0800203d
 8001f28:	080020bf 	.word	0x080020bf
 8001f2c:	080020bf 	.word	0x080020bf
 8001f30:	080020bf 	.word	0x080020bf
 8001f34:	0800207d 	.word	0x0800207d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fa78 	bl	8002434 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0208 	orr.w	r2, r2, #8
 8001f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0204 	bic.w	r2, r2, #4
 8001f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6999      	ldr	r1, [r3, #24]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	619a      	str	r2, [r3, #24]
      break;
 8001f76:	e0a5      	b.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f000 faf2 	bl	8002568 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699a      	ldr	r2, [r3, #24]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6999      	ldr	r1, [r3, #24]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	021a      	lsls	r2, r3, #8
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	619a      	str	r2, [r3, #24]
      break;
 8001fb8:	e084      	b.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68b9      	ldr	r1, [r7, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 fb65 	bl	8002690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0208 	orr.w	r2, r2, #8
 8001fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0204 	bic.w	r2, r2, #4
 8001fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69d9      	ldr	r1, [r3, #28]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	61da      	str	r2, [r3, #28]
      break;
 8001ff8:	e064      	b.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68b9      	ldr	r1, [r7, #8]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fbd7 	bl	80027b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002014:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002024:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69d9      	ldr	r1, [r3, #28]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	021a      	lsls	r2, r3, #8
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	61da      	str	r2, [r3, #28]
      break;
 800203a:	e043      	b.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	4618      	mov	r0, r3
 8002044:	f000 fc4a 	bl	80028dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0208 	orr.w	r2, r2, #8
 8002056:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0204 	bic.w	r2, r2, #4
 8002066:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800207a:	e023      	b.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 fc94 	bl	80029b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002096:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	021a      	lsls	r2, r3, #8
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80020bc:	e002      	b.n	80020c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	75fb      	strb	r3, [r7, #23]
      break;
 80020c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3718      	adds	r7, #24
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop

080020d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_TIM_ConfigClockSource+0x1c>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e0e6      	b.n	80022c2 <HAL_TIM_ConfigClockSource+0x1ea>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800211e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a67      	ldr	r2, [pc, #412]	; (80022cc <HAL_TIM_ConfigClockSource+0x1f4>)
 800212e:	4293      	cmp	r3, r2
 8002130:	f000 80b1 	beq.w	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 8002134:	4a65      	ldr	r2, [pc, #404]	; (80022cc <HAL_TIM_ConfigClockSource+0x1f4>)
 8002136:	4293      	cmp	r3, r2
 8002138:	f200 80b6 	bhi.w	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 800213c:	4a64      	ldr	r2, [pc, #400]	; (80022d0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	f000 80a9 	beq.w	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 8002144:	4a62      	ldr	r2, [pc, #392]	; (80022d0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	f200 80ae 	bhi.w	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 800214c:	4a61      	ldr	r2, [pc, #388]	; (80022d4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800214e:	4293      	cmp	r3, r2
 8002150:	f000 80a1 	beq.w	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 8002154:	4a5f      	ldr	r2, [pc, #380]	; (80022d4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8002156:	4293      	cmp	r3, r2
 8002158:	f200 80a6 	bhi.w	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 800215c:	4a5e      	ldr	r2, [pc, #376]	; (80022d8 <HAL_TIM_ConfigClockSource+0x200>)
 800215e:	4293      	cmp	r3, r2
 8002160:	f000 8099 	beq.w	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 8002164:	4a5c      	ldr	r2, [pc, #368]	; (80022d8 <HAL_TIM_ConfigClockSource+0x200>)
 8002166:	4293      	cmp	r3, r2
 8002168:	f200 809e 	bhi.w	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 800216c:	4a5b      	ldr	r2, [pc, #364]	; (80022dc <HAL_TIM_ConfigClockSource+0x204>)
 800216e:	4293      	cmp	r3, r2
 8002170:	f000 8091 	beq.w	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 8002174:	4a59      	ldr	r2, [pc, #356]	; (80022dc <HAL_TIM_ConfigClockSource+0x204>)
 8002176:	4293      	cmp	r3, r2
 8002178:	f200 8096 	bhi.w	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 800217c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002180:	f000 8089 	beq.w	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 8002184:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002188:	f200 808e 	bhi.w	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 800218c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002190:	d03e      	beq.n	8002210 <HAL_TIM_ConfigClockSource+0x138>
 8002192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002196:	f200 8087 	bhi.w	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800219e:	f000 8086 	beq.w	80022ae <HAL_TIM_ConfigClockSource+0x1d6>
 80021a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a6:	d87f      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80021a8:	2b70      	cmp	r3, #112	; 0x70
 80021aa:	d01a      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x10a>
 80021ac:	2b70      	cmp	r3, #112	; 0x70
 80021ae:	d87b      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80021b0:	2b60      	cmp	r3, #96	; 0x60
 80021b2:	d050      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0x17e>
 80021b4:	2b60      	cmp	r3, #96	; 0x60
 80021b6:	d877      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80021b8:	2b50      	cmp	r3, #80	; 0x50
 80021ba:	d03c      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0x15e>
 80021bc:	2b50      	cmp	r3, #80	; 0x50
 80021be:	d873      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80021c0:	2b40      	cmp	r3, #64	; 0x40
 80021c2:	d058      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0x19e>
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d86f      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80021c8:	2b30      	cmp	r3, #48	; 0x30
 80021ca:	d064      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 80021cc:	2b30      	cmp	r3, #48	; 0x30
 80021ce:	d86b      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d060      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d867      	bhi.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05c      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 80021dc:	2b10      	cmp	r3, #16
 80021de:	d05a      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x1be>
 80021e0:	e062      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	6899      	ldr	r1, [r3, #8]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f000 fcc5 	bl	8002b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	609a      	str	r2, [r3, #8]
      break;
 800220e:	e04f      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f000 fcae 	bl	8002b80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002232:	609a      	str	r2, [r3, #8]
      break;
 8002234:	e03c      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	461a      	mov	r2, r3
 8002244:	f000 fc20 	bl	8002a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2150      	movs	r1, #80	; 0x50
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fc79 	bl	8002b46 <TIM_ITRx_SetConfig>
      break;
 8002254:	e02c      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	461a      	mov	r2, r3
 8002264:	f000 fc3f 	bl	8002ae6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2160      	movs	r1, #96	; 0x60
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fc69 	bl	8002b46 <TIM_ITRx_SetConfig>
      break;
 8002274:	e01c      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	461a      	mov	r2, r3
 8002284:	f000 fc00 	bl	8002a88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2140      	movs	r1, #64	; 0x40
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fc59 	bl	8002b46 <TIM_ITRx_SetConfig>
      break;
 8002294:	e00c      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4619      	mov	r1, r3
 80022a0:	4610      	mov	r0, r2
 80022a2:	f000 fc50 	bl	8002b46 <TIM_ITRx_SetConfig>
      break;
 80022a6:	e003      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
      break;
 80022ac:	e000      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80022ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	00100070 	.word	0x00100070
 80022d0:	00100050 	.word	0x00100050
 80022d4:	00100040 	.word	0x00100040
 80022d8:	00100030 	.word	0x00100030
 80022dc:	00100020 	.word	0x00100020

080022e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a48      	ldr	r2, [pc, #288]	; (8002414 <TIM_Base_SetConfig+0x134>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d013      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fe:	d00f      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a45      	ldr	r2, [pc, #276]	; (8002418 <TIM_Base_SetConfig+0x138>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00b      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a44      	ldr	r2, [pc, #272]	; (800241c <TIM_Base_SetConfig+0x13c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d007      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a43      	ldr	r2, [pc, #268]	; (8002420 <TIM_Base_SetConfig+0x140>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d003      	beq.n	8002320 <TIM_Base_SetConfig+0x40>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a42      	ldr	r2, [pc, #264]	; (8002424 <TIM_Base_SetConfig+0x144>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d108      	bne.n	8002332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a37      	ldr	r2, [pc, #220]	; (8002414 <TIM_Base_SetConfig+0x134>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d01f      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d01b      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a34      	ldr	r2, [pc, #208]	; (8002418 <TIM_Base_SetConfig+0x138>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d017      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a33      	ldr	r2, [pc, #204]	; (800241c <TIM_Base_SetConfig+0x13c>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a32      	ldr	r2, [pc, #200]	; (8002420 <TIM_Base_SetConfig+0x140>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d00f      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a32      	ldr	r2, [pc, #200]	; (8002428 <TIM_Base_SetConfig+0x148>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00b      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a31      	ldr	r2, [pc, #196]	; (800242c <TIM_Base_SetConfig+0x14c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a30      	ldr	r2, [pc, #192]	; (8002430 <TIM_Base_SetConfig+0x150>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d003      	beq.n	800237a <TIM_Base_SetConfig+0x9a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <TIM_Base_SetConfig+0x144>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d108      	bne.n	800238c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	4313      	orrs	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <TIM_Base_SetConfig+0x134>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <TIM_Base_SetConfig+0x100>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a19      	ldr	r2, [pc, #100]	; (8002420 <TIM_Base_SetConfig+0x140>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d00f      	beq.n	80023e0 <TIM_Base_SetConfig+0x100>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a19      	ldr	r2, [pc, #100]	; (8002428 <TIM_Base_SetConfig+0x148>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d00b      	beq.n	80023e0 <TIM_Base_SetConfig+0x100>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <TIM_Base_SetConfig+0x14c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d007      	beq.n	80023e0 <TIM_Base_SetConfig+0x100>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a17      	ldr	r2, [pc, #92]	; (8002430 <TIM_Base_SetConfig+0x150>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d003      	beq.n	80023e0 <TIM_Base_SetConfig+0x100>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <TIM_Base_SetConfig+0x144>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d105      	bne.n	8002406 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f023 0201 	bic.w	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	611a      	str	r2, [r3, #16]
  }
}
 8002406:	bf00      	nop
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400
 800241c:	40000800 	.word	0x40000800
 8002420:	40013400 	.word	0x40013400
 8002424:	40015000 	.word	0x40015000
 8002428:	40014000 	.word	0x40014000
 800242c:	40014400 	.word	0x40014400
 8002430:	40014800 	.word	0x40014800

08002434 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f023 0201 	bic.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f023 0302 	bic.w	r3, r3, #2
 8002480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a30      	ldr	r2, [pc, #192]	; (8002550 <TIM_OC1_SetConfig+0x11c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <TIM_OC1_SetConfig+0x88>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a2f      	ldr	r2, [pc, #188]	; (8002554 <TIM_OC1_SetConfig+0x120>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d00f      	beq.n	80024bc <TIM_OC1_SetConfig+0x88>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <TIM_OC1_SetConfig+0x124>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00b      	beq.n	80024bc <TIM_OC1_SetConfig+0x88>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a2d      	ldr	r2, [pc, #180]	; (800255c <TIM_OC1_SetConfig+0x128>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <TIM_OC1_SetConfig+0x88>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <TIM_OC1_SetConfig+0x12c>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <TIM_OC1_SetConfig+0x88>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <TIM_OC1_SetConfig+0x130>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d10c      	bne.n	80024d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f023 0308 	bic.w	r3, r3, #8
 80024c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 0304 	bic.w	r3, r3, #4
 80024d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <TIM_OC1_SetConfig+0x11c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <TIM_OC1_SetConfig+0xd2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <TIM_OC1_SetConfig+0x120>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00f      	beq.n	8002506 <TIM_OC1_SetConfig+0xd2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1b      	ldr	r2, [pc, #108]	; (8002558 <TIM_OC1_SetConfig+0x124>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00b      	beq.n	8002506 <TIM_OC1_SetConfig+0xd2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1a      	ldr	r2, [pc, #104]	; (800255c <TIM_OC1_SetConfig+0x128>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <TIM_OC1_SetConfig+0xd2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a19      	ldr	r2, [pc, #100]	; (8002560 <TIM_OC1_SetConfig+0x12c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_OC1_SetConfig+0xd2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <TIM_OC1_SetConfig+0x130>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d111      	bne.n	800252a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	621a      	str	r2, [r3, #32]
}
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40012c00 	.word	0x40012c00
 8002554:	40013400 	.word	0x40013400
 8002558:	40014000 	.word	0x40014000
 800255c:	40014400 	.word	0x40014400
 8002560:	40014800 	.word	0x40014800
 8002564:	40015000 	.word	0x40015000

08002568 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f023 0210 	bic.w	r2, r3, #16
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0320 	bic.w	r3, r3, #32
 80025b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a2c      	ldr	r2, [pc, #176]	; (8002678 <TIM_OC2_SetConfig+0x110>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <TIM_OC2_SetConfig+0x74>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a2b      	ldr	r2, [pc, #172]	; (800267c <TIM_OC2_SetConfig+0x114>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <TIM_OC2_SetConfig+0x74>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <TIM_OC2_SetConfig+0x118>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10d      	bne.n	80025f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	011b      	lsls	r3, r3, #4
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a1f      	ldr	r2, [pc, #124]	; (8002678 <TIM_OC2_SetConfig+0x110>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d013      	beq.n	8002628 <TIM_OC2_SetConfig+0xc0>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a1e      	ldr	r2, [pc, #120]	; (800267c <TIM_OC2_SetConfig+0x114>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d00f      	beq.n	8002628 <TIM_OC2_SetConfig+0xc0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <TIM_OC2_SetConfig+0x11c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00b      	beq.n	8002628 <TIM_OC2_SetConfig+0xc0>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <TIM_OC2_SetConfig+0x120>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <TIM_OC2_SetConfig+0xc0>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a1c      	ldr	r2, [pc, #112]	; (800268c <TIM_OC2_SetConfig+0x124>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_OC2_SetConfig+0xc0>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a17      	ldr	r2, [pc, #92]	; (8002680 <TIM_OC2_SetConfig+0x118>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d113      	bne.n	8002650 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800262e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	621a      	str	r2, [r3, #32]
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40012c00 	.word	0x40012c00
 800267c:	40013400 	.word	0x40013400
 8002680:	40015000 	.word	0x40015000
 8002684:	40014000 	.word	0x40014000
 8002688:	40014400 	.word	0x40014400
 800268c:	40014800 	.word	0x40014800

08002690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0303 	bic.w	r3, r3, #3
 80026ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2b      	ldr	r2, [pc, #172]	; (800279c <TIM_OC3_SetConfig+0x10c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d007      	beq.n	8002702 <TIM_OC3_SetConfig+0x72>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <TIM_OC3_SetConfig+0x110>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d003      	beq.n	8002702 <TIM_OC3_SetConfig+0x72>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <TIM_OC3_SetConfig+0x114>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10d      	bne.n	800271e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002708:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800271c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <TIM_OC3_SetConfig+0x10c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d013      	beq.n	800274e <TIM_OC3_SetConfig+0xbe>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <TIM_OC3_SetConfig+0x110>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00f      	beq.n	800274e <TIM_OC3_SetConfig+0xbe>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <TIM_OC3_SetConfig+0x118>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00b      	beq.n	800274e <TIM_OC3_SetConfig+0xbe>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <TIM_OC3_SetConfig+0x11c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <TIM_OC3_SetConfig+0xbe>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1b      	ldr	r2, [pc, #108]	; (80027b0 <TIM_OC3_SetConfig+0x120>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_OC3_SetConfig+0xbe>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a16      	ldr	r2, [pc, #88]	; (80027a4 <TIM_OC3_SetConfig+0x114>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d113      	bne.n	8002776 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800275c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	621a      	str	r2, [r3, #32]
}
 8002790:	bf00      	nop
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40013400 	.word	0x40013400
 80027a4:	40015000 	.word	0x40015000
 80027a8:	40014000 	.word	0x40014000
 80027ac:	40014400 	.word	0x40014400
 80027b0:	40014800 	.word	0x40014800

080027b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	031b      	lsls	r3, r3, #12
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <TIM_OC4_SetConfig+0x110>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <TIM_OC4_SetConfig+0x74>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <TIM_OC4_SetConfig+0x114>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d003      	beq.n	8002828 <TIM_OC4_SetConfig+0x74>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <TIM_OC4_SetConfig+0x118>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10d      	bne.n	8002844 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800282e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	031b      	lsls	r3, r3, #12
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002842:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a1f      	ldr	r2, [pc, #124]	; (80028c4 <TIM_OC4_SetConfig+0x110>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <TIM_OC4_SetConfig+0xc0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a1e      	ldr	r2, [pc, #120]	; (80028c8 <TIM_OC4_SetConfig+0x114>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00f      	beq.n	8002874 <TIM_OC4_SetConfig+0xc0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <TIM_OC4_SetConfig+0x11c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00b      	beq.n	8002874 <TIM_OC4_SetConfig+0xc0>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <TIM_OC4_SetConfig+0x120>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_OC4_SetConfig+0xc0>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <TIM_OC4_SetConfig+0x124>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_OC4_SetConfig+0xc0>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <TIM_OC4_SetConfig+0x118>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d113      	bne.n	800289c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800287a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002882:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4313      	orrs	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	019b      	lsls	r3, r3, #6
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40013400 	.word	0x40013400
 80028cc:	40015000 	.word	0x40015000
 80028d0:	40014000 	.word	0x40014000
 80028d4:	40014400 	.word	0x40014400
 80028d8:	40014800 	.word	0x40014800

080028dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002920:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	4313      	orrs	r3, r2
 800292c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <TIM_OC5_SetConfig+0xbc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <TIM_OC5_SetConfig+0x82>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a18      	ldr	r2, [pc, #96]	; (800299c <TIM_OC5_SetConfig+0xc0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <TIM_OC5_SetConfig+0x82>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a17      	ldr	r2, [pc, #92]	; (80029a0 <TIM_OC5_SetConfig+0xc4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00b      	beq.n	800295e <TIM_OC5_SetConfig+0x82>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a16      	ldr	r2, [pc, #88]	; (80029a4 <TIM_OC5_SetConfig+0xc8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_OC5_SetConfig+0x82>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a15      	ldr	r2, [pc, #84]	; (80029a8 <TIM_OC5_SetConfig+0xcc>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_OC5_SetConfig+0x82>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <TIM_OC5_SetConfig+0xd0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d109      	bne.n	8002972 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40013400 	.word	0x40013400
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40014400 	.word	0x40014400
 80029a8:	40014800 	.word	0x40014800
 80029ac:	40015000 	.word	0x40015000

080029b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	021b      	lsls	r3, r3, #8
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80029f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	051b      	lsls	r3, r3, #20
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <TIM_OC6_SetConfig+0xc0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <TIM_OC6_SetConfig+0x84>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <TIM_OC6_SetConfig+0xc4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00f      	beq.n	8002a34 <TIM_OC6_SetConfig+0x84>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a18      	ldr	r2, [pc, #96]	; (8002a78 <TIM_OC6_SetConfig+0xc8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <TIM_OC6_SetConfig+0x84>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a17      	ldr	r2, [pc, #92]	; (8002a7c <TIM_OC6_SetConfig+0xcc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <TIM_OC6_SetConfig+0x84>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <TIM_OC6_SetConfig+0xd0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_OC6_SetConfig+0x84>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <TIM_OC6_SetConfig+0xd4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d109      	bne.n	8002a48 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	621a      	str	r2, [r3, #32]
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40012c00 	.word	0x40012c00
 8002a74:	40013400 	.word	0x40013400
 8002a78:	40014000 	.word	0x40014000
 8002a7c:	40014400 	.word	0x40014400
 8002a80:	40014800 	.word	0x40014800
 8002a84:	40015000 	.word	0x40015000

08002a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f023 0201 	bic.w	r2, r3, #1
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f023 030a 	bic.w	r3, r3, #10
 8002ac4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	621a      	str	r2, [r3, #32]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b087      	sub	sp, #28
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f023 0210 	bic.w	r2, r3, #16
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	031b      	lsls	r3, r3, #12
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	621a      	str	r2, [r3, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b085      	sub	sp, #20
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b62:	683a      	ldr	r2, [r7, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f043 0307 	orr.w	r3, r3, #7
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	021a      	lsls	r2, r3, #8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	609a      	str	r2, [r3, #8]
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e06f      	b.n	8002cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a31      	ldr	r2, [pc, #196]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d009      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a30      	ldr	r2, [pc, #192]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d004      	beq.n	8002c16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a2e      	ldr	r2, [pc, #184]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d108      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d01d      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c58:	d018      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00e      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a15      	ldr	r2, [pc, #84]	; (8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a16      	ldr	r2, [pc, #88]	; (8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	68ba      	ldr	r2, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	40012c00 	.word	0x40012c00
 8002cc8:	40013400 	.word	0x40013400
 8002ccc:	40015000 	.word	0x40015000
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40014000 	.word	0x40014000

08002cdc <LL_EXTI_EnableIT_0_31>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <LL_EXTI_EnableIT_0_31+0x20>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4904      	ldr	r1, [pc, #16]	; (8002cfc <LL_EXTI_EnableIT_0_31+0x20>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	40010400 	.word	0x40010400

08002d00 <LL_EXTI_EnableIT_32_63>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	4904      	ldr	r1, [pc, #16]	; (8002d20 <LL_EXTI_EnableIT_32_63+0x20>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	620b      	str	r3, [r1, #32]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40010400 	.word	0x40010400

08002d24 <LL_EXTI_DisableIT_0_31>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	4904      	ldr	r1, [pc, #16]	; (8002d48 <LL_EXTI_DisableIT_0_31+0x24>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010400 	.word	0x40010400

08002d4c <LL_EXTI_DisableIT_32_63>:
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002d54:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <LL_EXTI_DisableIT_32_63+0x24>)
 8002d56:	6a1a      	ldr	r2, [r3, #32]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	4904      	ldr	r1, [pc, #16]	; (8002d70 <LL_EXTI_DisableIT_32_63+0x24>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	620b      	str	r3, [r1, #32]
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40010400 	.word	0x40010400

08002d74 <LL_EXTI_EnableEvent_0_31>:
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4904      	ldr	r1, [pc, #16]	; (8002d94 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	604b      	str	r3, [r1, #4]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40010400 	.word	0x40010400

08002d98 <LL_EXTI_EnableEvent_32_63>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da4:	4904      	ldr	r1, [pc, #16]	; (8002db8 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40010400 	.word	0x40010400

08002dbc <LL_EXTI_DisableEvent_0_31>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	4904      	ldr	r1, [pc, #16]	; (8002de0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010400 	.word	0x40010400

08002de4 <LL_EXTI_DisableEvent_32_63>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002dee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	43db      	mvns	r3, r3
 8002df4:	4904      	ldr	r1, [pc, #16]	; (8002e08 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40010400 	.word	0x40010400

08002e0c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	4904      	ldr	r1, [pc, #16]	; (8002e2c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	608b      	str	r3, [r1, #8]
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40010400 	.word	0x40010400

08002e30 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3c:	4904      	ldr	r1, [pc, #16]	; (8002e50 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40010400 	.word	0x40010400

08002e54 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002e5c:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	4904      	ldr	r1, [pc, #16]	; (8002e78 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	608b      	str	r3, [r1, #8]
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40010400 	.word	0x40010400

08002e7c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40010400 	.word	0x40010400

08002ea4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002eae:	68da      	ldr	r2, [r3, #12]
 8002eb0:	4904      	ldr	r1, [pc, #16]	; (8002ec4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60cb      	str	r3, [r1, #12]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	40010400 	.word	0x40010400

08002ec8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed4:	4904      	ldr	r1, [pc, #16]	; (8002ee8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	40010400 	.word	0x40010400

08002eec <LL_EXTI_DisableFallingTrig_0_31>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	43db      	mvns	r3, r3
 8002efc:	4904      	ldr	r1, [pc, #16]	; (8002f10 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	60cb      	str	r3, [r1, #12]
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	40010400 	.word	0x40010400

08002f14 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	4904      	ldr	r1, [pc, #16]	; (8002f38 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010400 	.word	0x40010400

08002f3c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	7a1b      	ldrb	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 80d3 	beq.w	80030f8 <LL_EXTI_Init+0x1bc>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d063      	beq.n	8003022 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	7a5b      	ldrb	r3, [r3, #9]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d01c      	beq.n	8002f9c <LL_EXTI_Init+0x60>
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	dc25      	bgt.n	8002fb2 <LL_EXTI_Init+0x76>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <LL_EXTI_Init+0x34>
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d00b      	beq.n	8002f86 <LL_EXTI_Init+0x4a>
 8002f6e:	e020      	b.n	8002fb2 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff ff21 	bl	8002dbc <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff feac 	bl	8002cdc <LL_EXTI_EnableIT_0_31>
          break;
 8002f84:	e018      	b.n	8002fb8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff feca 	bl	8002d24 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff feed 	bl	8002d74 <LL_EXTI_EnableEvent_0_31>
          break;
 8002f9a:	e00d      	b.n	8002fb8 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fe9b 	bl	8002cdc <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fee2 	bl	8002d74 <LL_EXTI_EnableEvent_0_31>
          break;
 8002fb0:	e002      	b.n	8002fb8 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	60fb      	str	r3, [r7, #12]
          break;
 8002fb6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7a9b      	ldrb	r3, [r3, #10]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d030      	beq.n	8003022 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	7a9b      	ldrb	r3, [r3, #10]
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d01c      	beq.n	8003002 <LL_EXTI_Init+0xc6>
 8002fc8:	2b03      	cmp	r3, #3
 8002fca:	dc25      	bgt.n	8003018 <LL_EXTI_Init+0xdc>
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d002      	beq.n	8002fd6 <LL_EXTI_Init+0x9a>
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d00b      	beq.n	8002fec <LL_EXTI_Init+0xb0>
 8002fd4:	e020      	b.n	8003018 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff ff86 	bl	8002eec <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff11 	bl	8002e0c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002fea:	e01b      	b.n	8003024 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff2f 	bl	8002e54 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff ff52 	bl	8002ea4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003000:	e010      	b.n	8003024 <LL_EXTI_Init+0xe8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff00 	bl	8002e0c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	f7ff ff47 	bl	8002ea4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003016:	e005      	b.n	8003024 <LL_EXTI_Init+0xe8>
          default:
            status |= 0x02u;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	60fb      	str	r3, [r7, #12]
            break;
 8003020:	e000      	b.n	8003024 <LL_EXTI_Init+0xe8>
        }
      }
 8003022:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d07a      	beq.n	8003122 <LL_EXTI_Init+0x1e6>
    {
      switch (EXTI_InitStruct->Mode)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7a5b      	ldrb	r3, [r3, #9]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d01c      	beq.n	800306e <LL_EXTI_Init+0x132>
 8003034:	2b02      	cmp	r3, #2
 8003036:	dc25      	bgt.n	8003084 <LL_EXTI_Init+0x148>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d002      	beq.n	8003042 <LL_EXTI_Init+0x106>
 800303c:	2b01      	cmp	r3, #1
 800303e:	d00b      	beq.n	8003058 <LL_EXTI_Init+0x11c>
 8003040:	e020      	b.n	8003084 <LL_EXTI_Init+0x148>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fecc 	bl	8002de4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fe55 	bl	8002d00 <LL_EXTI_EnableIT_32_63>
          break;
 8003056:	e01a      	b.n	800308e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff fe75 	bl	8002d4c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fe96 	bl	8002d98 <LL_EXTI_EnableEvent_32_63>
          break;
 800306c:	e00f      	b.n	800308e <LL_EXTI_Init+0x152>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fe44 	bl	8002d00 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fe8b 	bl	8002d98 <LL_EXTI_EnableEvent_32_63>
          break;
 8003082:	e004      	b.n	800308e <LL_EXTI_Init+0x152>
        default:
          status |= 0x04u;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
          break;
 800308c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7a9b      	ldrb	r3, [r3, #10]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d045      	beq.n	8003122 <LL_EXTI_Init+0x1e6>
      {
        switch (EXTI_InitStruct->Trigger)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7a9b      	ldrb	r3, [r3, #10]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d01c      	beq.n	80030d8 <LL_EXTI_Init+0x19c>
 800309e:	2b03      	cmp	r3, #3
 80030a0:	dc25      	bgt.n	80030ee <LL_EXTI_Init+0x1b2>
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d002      	beq.n	80030ac <LL_EXTI_Init+0x170>
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d00b      	beq.n	80030c2 <LL_EXTI_Init+0x186>
 80030aa:	e020      	b.n	80030ee <LL_EXTI_Init+0x1b2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff2f 	bl	8002f14 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff feb8 	bl	8002e30 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80030c0:	e030      	b.n	8003124 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fed8 	bl	8002e7c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fef9 	bl	8002ec8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80030d6:	e025      	b.n	8003124 <LL_EXTI_Init+0x1e8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff fea7 	bl	8002e30 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff feee 	bl	8002ec8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80030ec:	e01a      	b.n	8003124 <LL_EXTI_Init+0x1e8>
          default:
            status |= 0x05u;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f043 0305 	orr.w	r3, r3, #5
 80030f4:	60fb      	str	r3, [r7, #12]
            break;
 80030f6:	e015      	b.n	8003124 <LL_EXTI_Init+0x1e8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff fe11 	bl	8002d24 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fe58 	bl	8002dbc <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fe1b 	bl	8002d4c <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fe62 	bl	8002de4 <LL_EXTI_DisableEvent_32_63>
 8003120:	e000      	b.n	8003124 <LL_EXTI_Init+0x1e8>
      }
 8003122:	bf00      	nop
  }

  return status;
 8003124:	68fb      	ldr	r3, [r7, #12]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <LL_GPIO_SetPinMode>:
{
 800312e:	b480      	push	{r7}
 8003130:	b08b      	sub	sp, #44	; 0x2c
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa93 f3a3 	rbit	r3, r3
 8003148:	613b      	str	r3, [r7, #16]
  return result;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8003154:	2320      	movs	r3, #32
 8003156:	e003      	b.n	8003160 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	2103      	movs	r1, #3
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	43db      	mvns	r3, r3
 800316a:	401a      	ands	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	61fb      	str	r3, [r7, #28]
  return result;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e003      	b.n	800318e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	fa01 f303 	lsl.w	r3, r1, r3
 8003196:	431a      	orrs	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	601a      	str	r2, [r3, #0]
}
 800319c:	bf00      	nop
 800319e:	372c      	adds	r7, #44	; 0x2c
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_GPIO_SetPinOutputType>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	43db      	mvns	r3, r3
 80031bc:	401a      	ands	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	431a      	orrs	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_GPIO_SetPinSpeed>:
{
 80031d8:	b480      	push	{r7}
 80031da:	b08b      	sub	sp, #44	; 0x2c
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	613b      	str	r3, [r7, #16]
  return result;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e003      	b.n	800320a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2103      	movs	r1, #3
 800320e:	fa01 f303 	lsl.w	r3, r1, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	401a      	ands	r2, r3
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321a:	6a3b      	ldr	r3, [r7, #32]
 800321c:	fa93 f3a3 	rbit	r3, r3
 8003220:	61fb      	str	r3, [r7, #28]
  return result;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800322c:	2320      	movs	r3, #32
 800322e:	e003      	b.n	8003238 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	fab3 f383 	clz	r3, r3
 8003236:	b2db      	uxtb	r3, r3
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	609a      	str	r2, [r3, #8]
}
 8003246:	bf00      	nop
 8003248:	372c      	adds	r7, #44	; 0x2c
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_GPIO_SetPinPull>:
{
 8003252:	b480      	push	{r7}
 8003254:	b08b      	sub	sp, #44	; 0x2c
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa93 f3a3 	rbit	r3, r3
 800326c:	613b      	str	r3, [r7, #16]
  return result;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003278:	2320      	movs	r3, #32
 800327a:	e003      	b.n	8003284 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	2103      	movs	r1, #3
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	401a      	ands	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	61fb      	str	r3, [r7, #28]
  return result;
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e003      	b.n	80032b2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	431a      	orrs	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	60da      	str	r2, [r3, #12]
}
 80032c0:	bf00      	nop
 80032c2:	372c      	adds	r7, #44	; 0x2c
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_GPIO_SetAFPin_0_7>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b08b      	sub	sp, #44	; 0x2c
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa93 f3a3 	rbit	r3, r3
 80032e6:	613b      	str	r3, [r7, #16]
  return result;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e003      	b.n	80032fe <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	fab3 f383 	clz	r3, r3
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	210f      	movs	r1, #15
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43db      	mvns	r3, r3
 8003308:	401a      	ands	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	61fb      	str	r3, [r7, #28]
  return result;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003320:	2320      	movs	r3, #32
 8003322:	e003      	b.n	800332c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	372c      	adds	r7, #44	; 0x2c
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_GPIO_SetAFPin_8_15>:
{
 8003346:	b480      	push	{r7}
 8003348:	b08b      	sub	sp, #44	; 0x2c
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	613b      	str	r3, [r7, #16]
  return result;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800336e:	2320      	movs	r3, #32
 8003370:	e003      	b.n	800337a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	210f      	movs	r1, #15
 800337e:	fa01 f303 	lsl.w	r3, r1, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	401a      	ands	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	61fb      	str	r3, [r7, #28]
  return result;
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800339e:	2320      	movs	r3, #32
 80033a0:	e003      	b.n	80033aa <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	fa01 f303 	lsl.w	r3, r1, r3
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80033b8:	bf00      	nop
 80033ba:	372c      	adds	r7, #44	; 0x2c
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	fa93 f3a3 	rbit	r3, r3
 80033da:	60fb      	str	r3, [r7, #12]
  return result;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <LL_GPIO_Init+0x26>
    return 32U;
 80033e6:	2320      	movs	r3, #32
 80033e8:	e003      	b.n	80033f2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fab3 f383 	clz	r3, r3
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80033f4:	e048      	b.n	8003488 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2101      	movs	r1, #1
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	4013      	ands	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d03a      	beq.n	8003482 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d003      	beq.n	800341c <LL_GPIO_Init+0x58>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b02      	cmp	r3, #2
 800341a:	d10e      	bne.n	800343a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	461a      	mov	r2, r3
 8003422:	69b9      	ldr	r1, [r7, #24]
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fed7 	bl	80031d8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	6819      	ldr	r1, [r3, #0]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff feb7 	bl	80031a8 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	461a      	mov	r2, r3
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff05 	bl	8003252 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d111      	bne.n	8003474 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2bff      	cmp	r3, #255	; 0xff
 8003454:	d807      	bhi.n	8003466 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	461a      	mov	r2, r3
 800345c:	69b9      	ldr	r1, [r7, #24]
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ff34 	bl	80032cc <LL_GPIO_SetAFPin_0_7>
 8003464:	e006      	b.n	8003474 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	461a      	mov	r2, r3
 800346c:	69b9      	ldr	r1, [r7, #24]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff69 	bl	8003346 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	461a      	mov	r2, r3
 800347a:	69b9      	ldr	r1, [r7, #24]
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fe56 	bl	800312e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3301      	adds	r3, #1
 8003486:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	fa22 f303 	lsr.w	r3, r2, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1af      	bne.n	80033f6 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <LL_LPUART_IsEnabled>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <LL_LPUART_IsEnabled+0x18>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <LL_LPUART_IsEnabled+0x1a>
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_LPUART_SetPrescaler>:
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f023 030f 	bic.w	r3, r3, #15
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b292      	uxth	r2, r2
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034e2:	bf00      	nop
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <LL_LPUART_SetStopBitsLength>:
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	605a      	str	r2, [r3, #4]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <LL_LPUART_SetHWFlowCtrl>:
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	609a      	str	r2, [r3, #8]
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <LL_LPUART_SetBaudRate>:
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b088      	sub	sp, #32
 8003542:	af00      	add	r7, sp, #0
 8003544:	61f8      	str	r0, [r7, #28]
 8003546:	61b9      	str	r1, [r7, #24]
 8003548:	617a      	str	r2, [r7, #20]
 800354a:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d039      	beq.n	80035c6 <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	2200      	movs	r2, #0
 8003556:	60bb      	str	r3, [r7, #8]
 8003558:	60fa      	str	r2, [r7, #12]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	4b1b      	ldr	r3, [pc, #108]	; (80035d0 <LL_LPUART_SetBaudRate+0x94>)
 8003562:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003566:	b29b      	uxth	r3, r3
 8003568:	2200      	movs	r2, #0
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003572:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003576:	f7fc fe4f 	bl	8000218 <__aeabi_uldivmod>
 800357a:	4602      	mov	r2, r0
 800357c:	460b      	mov	r3, r1
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	020b      	lsls	r3, r1, #8
 800358c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003590:	0202      	lsls	r2, r0, #8
 8003592:	6939      	ldr	r1, [r7, #16]
 8003594:	0849      	lsrs	r1, r1, #1
 8003596:	2000      	movs	r0, #0
 8003598:	460c      	mov	r4, r1
 800359a:	4605      	mov	r5, r0
 800359c:	eb12 0804 	adds.w	r8, r2, r4
 80035a0:	eb43 0905 	adc.w	r9, r3, r5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2200      	movs	r2, #0
 80035a8:	469a      	mov	sl, r3
 80035aa:	4693      	mov	fp, r2
 80035ac:	4652      	mov	r2, sl
 80035ae:	465b      	mov	r3, fp
 80035b0:	4640      	mov	r0, r8
 80035b2:	4649      	mov	r1, r9
 80035b4:	f7fc fe30 	bl	8000218 <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	60da      	str	r2, [r3, #12]
}
 80035c6:	bf00      	nop
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d0:	08003b08 	.word	0x08003b08

080035d4 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7ff ff5c 	bl	80034a0 <LL_LPUART_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d136      	bne.n	800365c <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <LL_LPUART_Init+0x94>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	6891      	ldr	r1, [r2, #8]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	6912      	ldr	r2, [r2, #16]
 80035fe:	4311      	orrs	r1, r2
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	6952      	ldr	r2, [r2, #20]
 8003604:	430a      	orrs	r2, r1
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ff6b 	bl	80034ee <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff ff78 	bl	8003514 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8003624:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003628:	f000 f8bc 	bl	80037a4 <LL_RCC_GetLPUARTClockFreq>
 800362c:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d009      	beq.n	8003650 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 800363c:	2300      	movs	r3, #0
 800363e:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff76 	bl	800353c <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ff35 	bl	80034c6 <LL_LPUART_SetPrescaler>
  }

  return (status);
 800365c:	7bfb      	ldrb	r3, [r7, #15]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	efffe9f3 	.word	0xefffe9f3

0800366c <LL_RCC_HSI_IsReady>:
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <LL_RCC_HSI_IsReady+0x24>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d101      	bne.n	8003682 <LL_RCC_HSI_IsReady+0x16>
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <LL_RCC_HSI_IsReady+0x18>
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000

08003694 <LL_RCC_LSE_IsReady>:
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003698:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <LL_RCC_LSE_IsReady+0x24>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d101      	bne.n	80036aa <LL_RCC_LSE_IsReady+0x16>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <LL_RCC_LSE_IsReady+0x18>
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000

080036bc <LL_RCC_GetSysClkSource>:
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <LL_RCC_GetSysClkSource+0x18>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000

080036d8 <LL_RCC_GetAHBPrescaler>:
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000

080036f4 <LL_RCC_GetAPB1Prescaler>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <LL_RCC_GetAPB1Prescaler+0x18>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003700:	4618      	mov	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000

08003710 <LL_RCC_GetLPUARTClockSource>:
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <LL_RCC_GetLPUARTClockSource+0x20>)
 800371a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4013      	ands	r3, r2
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <LL_RCC_PLL_GetMainSource>:
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <LL_RCC_PLL_GetMainSource+0x18>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0303 	and.w	r3, r3, #3
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40021000 	.word	0x40021000

08003750 <LL_RCC_PLL_GetN>:
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <LL_RCC_PLL_GetN+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40021000 	.word	0x40021000

0800376c <LL_RCC_PLL_GetR>:
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003770:	4b04      	ldr	r3, [pc, #16]	; (8003784 <LL_RCC_PLL_GetR+0x18>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000

08003788 <LL_RCC_PLL_GetDivider>:
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <LL_RCC_PLL_GetDivider+0x18>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000

080037a4 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ffad 	bl	8003710 <LL_RCC_GetLPUARTClockSource>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037bc:	d015      	beq.n	80037ea <LL_RCC_GetLPUARTClockFreq+0x46>
 80037be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037c2:	d81b      	bhi.n	80037fc <LL_RCC_GetLPUARTClockFreq+0x58>
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d003      	beq.n	80037d2 <LL_RCC_GetLPUARTClockFreq+0x2e>
 80037ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ce:	d004      	beq.n	80037da <LL_RCC_GetLPUARTClockFreq+0x36>
 80037d0:	e014      	b.n	80037fc <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 80037d2:	f000 f829 	bl	8003828 <RCC_GetSystemClockFreq>
 80037d6:	60f8      	str	r0, [r7, #12]
      break;
 80037d8:	e01f      	b.n	800381a <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 80037da:	f7ff ff47 	bl	800366c <LL_RCC_HSI_IsReady>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d017      	beq.n	8003814 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <LL_RCC_GetLPUARTClockFreq+0x80>)
 80037e6:	60fb      	str	r3, [r7, #12]
      }
      break;
 80037e8:	e014      	b.n	8003814 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 80037ea:	f7ff ff53 	bl	8003694 <LL_RCC_LSE_IsReady>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d011      	beq.n	8003818 <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 80037f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f8:	60fb      	str	r3, [r7, #12]
      }
      break;
 80037fa:	e00d      	b.n	8003818 <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80037fc:	f000 f814 	bl	8003828 <RCC_GetSystemClockFreq>
 8003800:	4603      	mov	r3, r0
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f836 	bl	8003874 <RCC_GetHCLKClockFreq>
 8003808:	4603      	mov	r3, r0
 800380a:	4618      	mov	r0, r3
 800380c:	f000 f84a 	bl	80038a4 <RCC_GetPCLK1ClockFreq>
 8003810:	60f8      	str	r0, [r7, #12]
      break;
 8003812:	e002      	b.n	800381a <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 8003818:	bf00      	nop
  }

  return lpuart_frequency;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	00f42400 	.word	0x00f42400

08003828 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800382e:	f7ff ff45 	bl	80036bc <LL_RCC_GetSysClkSource>
 8003832:	4603      	mov	r3, r0
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d00c      	beq.n	8003852 <RCC_GetSystemClockFreq+0x2a>
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d80e      	bhi.n	800385a <RCC_GetSystemClockFreq+0x32>
 800383c:	2b04      	cmp	r3, #4
 800383e:	d002      	beq.n	8003846 <RCC_GetSystemClockFreq+0x1e>
 8003840:	2b08      	cmp	r3, #8
 8003842:	d003      	beq.n	800384c <RCC_GetSystemClockFreq+0x24>
 8003844:	e009      	b.n	800385a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <RCC_GetSystemClockFreq+0x44>)
 8003848:	607b      	str	r3, [r7, #4]
      break;
 800384a:	e009      	b.n	8003860 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <RCC_GetSystemClockFreq+0x48>)
 800384e:	607b      	str	r3, [r7, #4]
      break;
 8003850:	e006      	b.n	8003860 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003852:	f000 f83d 	bl	80038d0 <RCC_PLL_GetFreqDomain_SYS>
 8003856:	6078      	str	r0, [r7, #4]
      break;
 8003858:	e002      	b.n	8003860 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <RCC_GetSystemClockFreq+0x44>)
 800385c:	607b      	str	r3, [r7, #4]
      break;
 800385e:	bf00      	nop
  }

  return frequency;
 8003860:	687b      	ldr	r3, [r7, #4]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	00f42400 	.word	0x00f42400
 8003870:	00989680 	.word	0x00989680

08003874 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800387c:	f7ff ff2c 	bl	80036d8 <LL_RCC_GetAHBPrescaler>
 8003880:	4603      	mov	r3, r0
 8003882:	091b      	lsrs	r3, r3, #4
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	4a05      	ldr	r2, [pc, #20]	; (80038a0 <RCC_GetHCLKClockFreq+0x2c>)
 800388a:	5cd3      	ldrb	r3, [r2, r3]
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	08003af0 	.word	0x08003af0

080038a4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80038ac:	f7ff ff22 	bl	80036f4 <LL_RCC_GetAPB1Prescaler>
 80038b0:	4603      	mov	r3, r0
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <RCC_GetPCLK1ClockFreq+0x28>)
 80038b6:	5cd3      	ldrb	r3, [r2, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	08003b00 	.word	0x08003b00

080038d0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80038d6:	f7ff ff2d 	bl	8003734 <LL_RCC_PLL_GetMainSource>
 80038da:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d003      	beq.n	80038ea <RCC_PLL_GetFreqDomain_SYS+0x1a>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b03      	cmp	r3, #3
 80038e6:	d003      	beq.n	80038f0 <RCC_PLL_GetFreqDomain_SYS+0x20>
 80038e8:	e005      	b.n	80038f6 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80038ea:	4b11      	ldr	r3, [pc, #68]	; (8003930 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80038ec:	607b      	str	r3, [r7, #4]
      break;
 80038ee:	e005      	b.n	80038fc <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80038f0:	4b10      	ldr	r3, [pc, #64]	; (8003934 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 80038f2:	607b      	str	r3, [r7, #4]
      break;
 80038f4:	e002      	b.n	80038fc <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 80038f6:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80038f8:	607b      	str	r3, [r7, #4]
      break;
 80038fa:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038fc:	f7ff ff28 	bl	8003750 <LL_RCC_PLL_GetN>
 8003900:	4602      	mov	r2, r0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	fb03 f402 	mul.w	r4, r3, r2
 8003908:	f7ff ff3e 	bl	8003788 <LL_RCC_PLL_GetDivider>
 800390c:	4603      	mov	r3, r0
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	3301      	adds	r3, #1
 8003912:	fbb4 f4f3 	udiv	r4, r4, r3
 8003916:	f7ff ff29 	bl	800376c <LL_RCC_PLL_GetR>
 800391a:	4603      	mov	r3, r0
 800391c:	0e5b      	lsrs	r3, r3, #25
 800391e:	3301      	adds	r3, #1
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003926:	4618      	mov	r0, r3
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	bd90      	pop	{r4, r7, pc}
 800392e:	bf00      	nop
 8003930:	00f42400 	.word	0x00f42400
 8003934:	00989680 	.word	0x00989680

08003938 <LL_SPI_IsEnabled>:
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d101      	bne.n	8003950 <LL_SPI_IsEnabled+0x18>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <LL_SPI_IsEnabled+0x1a>
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_SPI_SetRxFIFOThreshold>:
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <LL_SPI_SetCRCPolynomial>:
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	611a      	str	r2, [r3, #16]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffc0 	bl	8003938 <LL_SPI_IsEnabled>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d145      	bne.n	8003a4a <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c6:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	6811      	ldr	r1, [r2, #0]
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	6852      	ldr	r2, [r2, #4]
 80039d2:	4311      	orrs	r1, r2
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	68d2      	ldr	r2, [r2, #12]
 80039d8:	4311      	orrs	r1, r2
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	6912      	ldr	r2, [r2, #16]
 80039de:	4311      	orrs	r1, r2
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	6952      	ldr	r2, [r2, #20]
 80039e4:	4311      	orrs	r1, r2
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	6992      	ldr	r2, [r2, #24]
 80039ea:	4311      	orrs	r1, r2
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	69d2      	ldr	r2, [r2, #28]
 80039f0:	4311      	orrs	r1, r2
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	6a12      	ldr	r2, [r2, #32]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	6891      	ldr	r1, [r2, #8]
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	6952      	ldr	r2, [r2, #20]
 8003a12:	0c12      	lsrs	r2, r2, #16
 8003a14:	430a      	orrs	r2, r1
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a24:	d204      	bcs.n	8003a30 <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8003a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff ff97 	bl	800395e <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d105      	bne.n	8003a46 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ff9f 	bl	8003984 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2S_SUPPORT */
  return status;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <LL_SetSystemCoreClock+0x1c>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000000 	.word	0x20000000

08003a80 <__libc_init_array>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4d0d      	ldr	r5, [pc, #52]	; (8003ab8 <__libc_init_array+0x38>)
 8003a84:	4c0d      	ldr	r4, [pc, #52]	; (8003abc <__libc_init_array+0x3c>)
 8003a86:	1b64      	subs	r4, r4, r5
 8003a88:	10a4      	asrs	r4, r4, #2
 8003a8a:	2600      	movs	r6, #0
 8003a8c:	42a6      	cmp	r6, r4
 8003a8e:	d109      	bne.n	8003aa4 <__libc_init_array+0x24>
 8003a90:	4d0b      	ldr	r5, [pc, #44]	; (8003ac0 <__libc_init_array+0x40>)
 8003a92:	4c0c      	ldr	r4, [pc, #48]	; (8003ac4 <__libc_init_array+0x44>)
 8003a94:	f000 f820 	bl	8003ad8 <_init>
 8003a98:	1b64      	subs	r4, r4, r5
 8003a9a:	10a4      	asrs	r4, r4, #2
 8003a9c:	2600      	movs	r6, #0
 8003a9e:	42a6      	cmp	r6, r4
 8003aa0:	d105      	bne.n	8003aae <__libc_init_array+0x2e>
 8003aa2:	bd70      	pop	{r4, r5, r6, pc}
 8003aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa8:	4798      	blx	r3
 8003aaa:	3601      	adds	r6, #1
 8003aac:	e7ee      	b.n	8003a8c <__libc_init_array+0xc>
 8003aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab2:	4798      	blx	r3
 8003ab4:	3601      	adds	r6, #1
 8003ab6:	e7f2      	b.n	8003a9e <__libc_init_array+0x1e>
 8003ab8:	08003b28 	.word	0x08003b28
 8003abc:	08003b28 	.word	0x08003b28
 8003ac0:	08003b28 	.word	0x08003b28
 8003ac4:	08003b2c 	.word	0x08003b2c

08003ac8 <memset>:
 8003ac8:	4402      	add	r2, r0
 8003aca:	4603      	mov	r3, r0
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d100      	bne.n	8003ad2 <memset+0xa>
 8003ad0:	4770      	bx	lr
 8003ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad6:	e7f9      	b.n	8003acc <memset+0x4>

08003ad8 <_init>:
 8003ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ada:	bf00      	nop
 8003adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ade:	bc08      	pop	{r3}
 8003ae0:	469e      	mov	lr, r3
 8003ae2:	4770      	bx	lr

08003ae4 <_fini>:
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	bf00      	nop
 8003ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aea:	bc08      	pop	{r3}
 8003aec:	469e      	mov	lr, r3
 8003aee:	4770      	bx	lr
